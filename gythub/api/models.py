# generated by datamodel-codegen:
#   filename:  https://raw.githubusercontent.com/github/rest-api-description/main/descriptions-next/api.github.com/api.github.com.json
#   timestamp: 2024-01-30T04:42:26+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import (
    AnyUrl,
    AwareDatetime,
    BaseModel,
    ConfigDict,
    EmailStr,
    Field,
    RootModel,
    confloat,
    conint,
    constr,
)


class Root(BaseModel):
    current_user_url: str
    current_user_authorizations_html_url: str
    authorizations_url: str
    code_search_url: str
    commit_search_url: str
    emails_url: str
    emojis_url: str
    events_url: str
    feeds_url: str
    followers_url: str
    following_url: str
    gists_url: str
    hub_url: str
    issue_search_url: str
    issues_url: str
    keys_url: str
    label_search_url: str
    notifications_url: str
    organization_url: str
    organization_repositories_url: str
    organization_teams_url: str
    public_gists_url: str
    rate_limit_url: str
    repository_url: str
    repository_search_url: str
    current_user_repositories_url: str
    starred_url: str
    starred_gists_url: str
    topic_search_url: Optional[str] = None
    user_url: str
    user_organizations_url: str
    user_repositories_url: str
    user_search_url: str


class SecurityAdvisoryEcosystems(Enum):
    rubygems = "rubygems"
    npm = "npm"
    pip = "pip"
    maven = "maven"
    nuget = "nuget"
    composer = "composer"
    go = "go"
    rust = "rust"
    erlang = "erlang"
    actions = "actions"
    pub = "pub"
    other = "other"
    swift = "swift"


class SimpleUser(BaseModel):
    name: Optional[str] = None
    email: Optional[str] = None
    login: str = Field(..., examples=["octocat"])
    id: int = Field(..., examples=[1])
    node_id: str = Field(..., examples=["MDQ6VXNlcjE="])
    avatar_url: AnyUrl = Field(..., examples=["https://github.com/images/error/octocat_happy.gif"])
    gravatar_id: Optional[str] = Field(..., examples=["41d064eb2195891e12d0413f63227ea7"])
    url: AnyUrl = Field(..., examples=["https://api.github.com/users/octocat"])
    html_url: AnyUrl = Field(..., examples=["https://github.com/octocat"])
    followers_url: AnyUrl = Field(..., examples=["https://api.github.com/users/octocat/followers"])
    following_url: str = Field(
        ..., examples=["https://api.github.com/users/octocat/following{/other_user}"]
    )
    gists_url: str = Field(..., examples=["https://api.github.com/users/octocat/gists{/gist_id}"])
    starred_url: str = Field(
        ..., examples=["https://api.github.com/users/octocat/starred{/owner}{/repo}"]
    )
    subscriptions_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/subscriptions"]
    )
    organizations_url: AnyUrl = Field(..., examples=["https://api.github.com/users/octocat/orgs"])
    repos_url: AnyUrl = Field(..., examples=["https://api.github.com/users/octocat/repos"])
    events_url: str = Field(..., examples=["https://api.github.com/users/octocat/events{/privacy}"])
    received_events_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/received_events"]
    )
    type: str = Field(..., examples=["User"])
    site_admin: bool
    starred_at: Optional[str] = Field(None, examples=['"2020-07-09T00:17:55Z"'])


class SecurityAdvisoryCreditTypes(Enum):
    analyst = "analyst"
    finder = "finder"
    reporter = "reporter"
    coordinator = "coordinator"
    remediation_developer = "remediation_developer"
    remediation_reviewer = "remediation_reviewer"
    remediation_verifier = "remediation_verifier"
    tool = "tool"
    sponsor = "sponsor"
    other = "other"


class Type(Enum):
    reviewed = "reviewed"
    unreviewed = "unreviewed"
    malware = "malware"


class Severity(Enum):
    critical = "critical"
    high = "high"
    medium = "medium"
    low = "low"
    unknown = "unknown"


class Type1(Enum):
    CVE = "CVE"
    GHSA = "GHSA"


class Identifier(BaseModel):
    type: Type1 = Field(..., description="The type of identifier.")
    value: str = Field(..., description="The identifier value.")


class Package(BaseModel):
    ecosystem: SecurityAdvisoryEcosystems
    name: Optional[str] = Field(..., description="The unique package name within its ecosystem.")


class Vulnerability(BaseModel):
    package: Optional[Package] = Field(
        ..., description="The name of the package affected by the vulnerability."
    )
    vulnerable_version_range: Optional[str] = Field(
        ..., description="The range of the package versions affected by the vulnerability."
    )
    first_patched_version: Optional[str] = Field(
        ..., description="The package version that resolve the vulnerability."
    )
    vulnerable_functions: List[str] = Field(
        ..., description="The functions in the package that are affected by the vulnerability."
    )


class Cvss(BaseModel):
    vector_string: Optional[str] = Field(..., description="The CVSS vector.")
    score: Optional[confloat(ge=0.0, le=10.0)] = Field(..., description="The CVSS score.")


class Cwe(BaseModel):
    cwe_id: str = Field(..., description="The Common Weakness Enumeration (CWE) identifier.")
    name: str = Field(..., description="The name of the CWE.")


class Credit(BaseModel):
    user: SimpleUser
    type: SecurityAdvisoryCreditTypes


class GlobalAdvisory(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    ghsa_id: str = Field(..., description="The GitHub Security Advisory ID.")
    cve_id: Optional[str] = Field(
        ..., description="The Common Vulnerabilities and Exposures (CVE) ID."
    )
    url: str = Field(..., description="The API URL for the advisory.")
    html_url: AnyUrl = Field(..., description="The URL for the advisory.")
    repository_advisory_url: Optional[AnyUrl] = Field(
        ..., description="The API URL for the repository advisory."
    )
    summary: constr(max_length=1024) = Field(..., description="A short summary of the advisory.")
    description: Optional[constr(max_length=65535)] = Field(
        ..., description="A detailed description of what the advisory entails."
    )
    type: Type = Field(..., description="The type of advisory.")
    severity: Severity = Field(..., description="The severity of the advisory.")
    source_code_location: Optional[AnyUrl] = Field(
        ..., description="The URL of the advisory's source code."
    )
    identifiers: List[Identifier]
    references: List[str]
    published_at: AwareDatetime = Field(
        ..., description="The date and time of when the advisory was published, in ISO 8601 format."
    )
    updated_at: AwareDatetime = Field(
        ...,
        description="The date and time of when the advisory was last updated, in ISO 8601 format.",
    )
    github_reviewed_at: Optional[AwareDatetime] = Field(
        ...,
        description="The date and time of when the advisory was reviewed by GitHub, in ISO 8601 format.",
    )
    nvd_published_at: Optional[AwareDatetime] = Field(
        ...,
        description="The date and time when the advisory was published in the National Vulnerability Database, in ISO 8601 format.\nThis field is only populated when the advisory is imported from the National Vulnerability Database.",
    )
    withdrawn_at: Optional[AwareDatetime] = Field(
        ..., description="The date and time of when the advisory was withdrawn, in ISO 8601 format."
    )
    vulnerabilities: List[Vulnerability] = Field(
        ..., description="The products and respective version ranges affected by the advisory."
    )
    cvss: Optional[Cvss] = None
    cwes: List[Cwe]
    credits: List[Credit] = Field(..., description="The users who contributed to the advisory.")


class BasicError(BaseModel):
    message: Optional[str] = None
    documentation_url: Optional[str] = None
    url: Optional[str] = None
    status: Optional[str] = None


class ValidationErrorSimple(BaseModel):
    message: str
    documentation_url: str
    errors: Optional[List[str]] = None


class Permissions(BaseModel):
    issues: Optional[str] = None
    checks: Optional[str] = None
    metadata: Optional[str] = None
    contents: Optional[str] = None
    deployments: Optional[str] = None


class Integration(BaseModel):
    id: int = Field(..., description="Unique identifier of the GitHub app", examples=[37])
    slug: Optional[str] = Field(
        None, description="The slug name of the GitHub app", examples=["probot-owners"]
    )
    node_id: str = Field(..., examples=["MDExOkludGVncmF0aW9uMQ=="])
    owner: Optional[SimpleUser] = None
    name: str = Field(..., description="The name of the GitHub app", examples=["Probot Owners"])
    description: Optional[str] = Field(..., examples=["The description of the app."])
    external_url: AnyUrl = Field(..., examples=["https://example.com"])
    html_url: AnyUrl = Field(..., examples=["https://github.com/apps/super-ci"])
    created_at: AwareDatetime = Field(..., examples=["2017-07-08T16:18:44-04:00"])
    updated_at: AwareDatetime = Field(..., examples=["2017-07-08T16:18:44-04:00"])
    permissions: Permissions = Field(
        ...,
        description="The set of permissions for the GitHub app",
        examples=[{"issues": "read", "deployments": "write"}],
    )
    events: List[str] = Field(
        ..., description="The list of events for the GitHub app", examples=["label", "deployment"]
    )
    installations_count: Optional[int] = Field(
        None, description="The number of installations associated with the GitHub app", examples=[5]
    )
    client_id: Optional[str] = Field(None, examples=['"Iv1.25b5d1e65ffc4022"'])
    client_secret: Optional[str] = Field(
        None, examples=['"1d4b2097ac622ba702d19de498f005747a8b21d3"']
    )
    webhook_secret: Optional[str] = Field(
        None, examples=['"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"']
    )
    pem: Optional[str] = Field(
        None,
        examples=[
            '"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"'
        ],
    )


class WebhookConfigUrl(RootModel[AnyUrl]):
    root: AnyUrl = Field(
        ...,
        description="The URL to which the payloads will be delivered.",
        examples=["https://example.com/webhook"],
    )


class WebhookConfigContentType(RootModel[str]):
    root: str = Field(
        ...,
        description="The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
        examples=['"json"'],
    )


class WebhookConfigSecret(RootModel[str]):
    root: str = Field(
        ...,
        description="If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).",
        examples=['"********"'],
    )


class WebhookConfigInsecureSsl(RootModel[Union[str, float]]):
    root: Union[str, float]


class WebhookConfig(BaseModel):
    url: Optional[WebhookConfigUrl] = None
    content_type: Optional[WebhookConfigContentType] = None
    secret: Optional[WebhookConfigSecret] = None
    insecure_ssl: Optional[WebhookConfigInsecureSsl] = None


class HookDeliveryItem(BaseModel):
    id: int = Field(..., description="Unique identifier of the webhook delivery.", examples=[42])
    guid: str = Field(
        ...,
        description="Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).",
        examples=["58474f00-b361-11eb-836d-0e4f3503ccbe"],
    )
    delivered_at: AwareDatetime = Field(
        ...,
        description="Time when the webhook delivery occurred.",
        examples=["2021-05-12T20:33:44Z"],
    )
    redelivery: bool = Field(
        ..., description="Whether the webhook delivery is a redelivery.", examples=[False]
    )
    duration: float = Field(..., description="Time spent delivering.", examples=[0.03])
    status: str = Field(
        ...,
        description="Describes the response returned after attempting the delivery.",
        examples=["failed to connect"],
    )
    status_code: int = Field(
        ..., description="Status code received when delivery was made.", examples=[502]
    )
    event: str = Field(
        ..., description="The event that triggered the delivery.", examples=["issues"]
    )
    action: Optional[str] = Field(
        ...,
        description="The type of activity for the event that triggered the delivery.",
        examples=["opened"],
    )
    installation_id: Optional[int] = Field(
        ...,
        description="The id of the GitHub App installation associated with this event.",
        examples=[123],
    )
    repository_id: Optional[int] = Field(
        ..., description="The id of the repository associated with this event.", examples=[123]
    )


class ScimError(BaseModel):
    message: Optional[str] = None
    documentation_url: Optional[str] = None
    detail: Optional[str] = None
    status: Optional[int] = None
    scimType: Optional[str] = None
    schemas: Optional[List[str]] = None


class Error(BaseModel):
    resource: Optional[str] = None
    field: Optional[str] = None
    message: Optional[str] = None
    code: str
    index: Optional[int] = None
    value: Optional[Union[Optional[str], Optional[int], List[str]]] = None


class ValidationError(BaseModel):
    message: str
    documentation_url: str
    errors: Optional[List[Error]] = None


class Request(BaseModel):
    headers: Optional[Dict[str, Any]] = Field(
        ..., description="The request headers sent with the webhook delivery."
    )
    payload: Optional[Dict[str, Any]] = Field(..., description="The webhook payload.")


class Response(BaseModel):
    headers: Optional[Dict[str, Any]] = Field(
        ..., description="The response headers received when the delivery was made."
    )
    payload: Optional[str] = Field(..., description="The response payload received.")


class HookDelivery(BaseModel):
    id: int = Field(..., description="Unique identifier of the delivery.", examples=[42])
    guid: str = Field(
        ...,
        description="Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).",
        examples=["58474f00-b361-11eb-836d-0e4f3503ccbe"],
    )
    delivered_at: AwareDatetime = Field(
        ..., description="Time when the delivery was delivered.", examples=["2021-05-12T20:33:44Z"]
    )
    redelivery: bool = Field(
        ..., description="Whether the delivery is a redelivery.", examples=[False]
    )
    duration: float = Field(..., description="Time spent delivering.", examples=[0.03])
    status: str = Field(
        ...,
        description="Description of the status of the attempted delivery",
        examples=["failed to connect"],
    )
    status_code: int = Field(
        ..., description="Status code received when delivery was made.", examples=[502]
    )
    event: str = Field(
        ..., description="The event that triggered the delivery.", examples=["issues"]
    )
    action: Optional[str] = Field(
        ...,
        description="The type of activity for the event that triggered the delivery.",
        examples=["opened"],
    )
    installation_id: Optional[int] = Field(
        ...,
        description="The id of the GitHub App installation associated with this event.",
        examples=[123],
    )
    repository_id: Optional[int] = Field(
        ..., description="The id of the repository associated with this event.", examples=[123]
    )
    url: Optional[str] = Field(
        None, description="The URL target of the delivery.", examples=["https://www.example.com"]
    )
    request: Request
    response: Response


class Enterprise(BaseModel):
    description: Optional[str] = Field(None, description="A short description of the enterprise.")
    html_url: AnyUrl = Field(..., examples=["https://github.com/enterprises/octo-business"])
    website_url: Optional[AnyUrl] = Field(None, description="The enterprise's website URL.")
    id: int = Field(..., description="Unique identifier of the enterprise", examples=[42])
    node_id: str = Field(..., examples=["MDEwOlJlcG9zaXRvcnkxMjk2MjY5"])
    name: str = Field(..., description="The name of the enterprise.", examples=["Octo Business"])
    slug: str = Field(
        ..., description="The slug url identifier for the enterprise.", examples=["octo-business"]
    )
    created_at: Optional[AwareDatetime] = Field(..., examples=["2019-01-26T19:01:12Z"])
    updated_at: Optional[AwareDatetime] = Field(..., examples=["2019-01-26T19:14:43Z"])
    avatar_url: AnyUrl


class IntegrationInstallationRequest(BaseModel):
    id: int = Field(
        ..., description="Unique identifier of the request installation.", examples=[42]
    )
    node_id: Optional[str] = Field(None, examples=["MDExOkludGVncmF0aW9uMQ=="])
    account: Union[SimpleUser, Enterprise]
    requester: SimpleUser
    created_at: AwareDatetime = Field(..., examples=["2022-07-08T16:18:44-04:00"])


class Actions(Enum):
    read = "read"
    write = "write"


class RepositoryProjects(Enum):
    read = "read"
    write = "write"
    admin = "admin"


class Workflows(Enum):
    write = "write"


class OrganizationEvents(Enum):
    read = "read"


class AppPermissions(BaseModel):
    actions: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.",
    )
    administration: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.",
    )
    checks: Optional[Actions] = Field(
        None, description="The level of permission to grant the access token for checks on code."
    )
    codespaces: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token to create, edit, delete, and list Codespaces.",
    )
    contents: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.",
    )
    dependabot_secrets: Optional[Actions] = Field(
        None,
        description="The leve of permission to grant the access token to manage Dependabot secrets.",
    )
    deployments: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token for deployments and deployment statuses.",
    )
    environments: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token for managing repository environments.",
    )
    issues: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.",
    )
    metadata: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.",
    )
    packages: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token for packages published to GitHub Packages.",
    )
    pages: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.",
    )
    pull_requests: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.",
    )
    repository_custom_properties: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.",
    )
    repository_hooks: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token to manage the post-receive hooks for a repository.",
    )
    repository_projects: Optional[RepositoryProjects] = Field(
        None,
        description="The level of permission to grant the access token to manage repository projects, columns, and cards.",
    )
    secret_scanning_alerts: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token to view and manage secret scanning alerts.",
    )
    secrets: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token to manage repository secrets.",
    )
    security_events: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token to view and manage security events like code scanning alerts.",
    )
    single_file: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token to manage just a single file.",
    )
    statuses: Optional[Actions] = Field(
        None, description="The level of permission to grant the access token for commit statuses."
    )
    vulnerability_alerts: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token to manage Dependabot alerts.",
    )
    workflows: Optional[Workflows] = Field(
        None,
        description="The level of permission to grant the access token to update GitHub Actions workflow files.",
    )
    members: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token for organization teams and members.",
    )
    organization_administration: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token to manage access to an organization.",
    )
    organization_custom_roles: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token for custom repository roles management.",
    )
    organization_custom_org_roles: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token for custom organization roles management.",
    )
    organization_custom_properties: Optional[RepositoryProjects] = Field(
        None,
        description="The level of permission to grant the access token for custom property management.",
    )
    organization_copilot_seat_management: Optional[Workflows] = Field(
        None,
        description="The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in beta and is subject to change.",
    )
    organization_announcement_banners: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token to view and manage announcement banners for an organization.",
    )
    organization_events: Optional[OrganizationEvents] = Field(
        None,
        description="The level of permission to grant the access token to view events triggered by an activity in an organization.",
    )
    organization_hooks: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token to manage the post-receive hooks for an organization.",
    )
    organization_personal_access_tokens: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.",
    )
    organization_personal_access_token_requests: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.",
    )
    organization_plan: Optional[OrganizationEvents] = Field(
        None,
        description="The level of permission to grant the access token for viewing an organization's plan.",
    )
    organization_projects: Optional[RepositoryProjects] = Field(
        None,
        description="The level of permission to grant the access token to manage organization projects and projects beta (where available).",
    )
    organization_packages: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token for organization packages published to GitHub Packages.",
    )
    organization_secrets: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token to manage organization secrets.",
    )
    organization_self_hosted_runners: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.",
    )
    organization_user_blocking: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token to view and manage users blocked by the organization.",
    )
    team_discussions: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token to manage team discussions and related comments.",
    )
    email_addresses: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token to manage the email addresses belonging to a user.",
    )
    followers: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token to manage the followers belonging to a user.",
    )
    git_ssh_keys: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token to manage git SSH keys.",
    )
    gpg_keys: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token to view and manage GPG keys belonging to a user.",
    )
    interaction_limits: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token to view and manage interaction limits on a repository.",
    )
    profile: Optional[Workflows] = Field(
        None,
        description="The level of permission to grant the access token to manage the profile settings belonging to a user.",
    )
    starring: Optional[Actions] = Field(
        None,
        description="The level of permission to grant the access token to list and manage repositories a user is starring.",
    )


class RepositorySelection(Enum):
    all = "all"
    selected = "selected"


class Installation(BaseModel):
    id: int = Field(..., description="The ID of the installation.", examples=[1])
    account: Union[SimpleUser, Enterprise]
    repository_selection: RepositorySelection = Field(
        ...,
        description="Describe whether all repositories have been selected or there's a selection involved",
    )
    access_tokens_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/app/installations/1/access_tokens"]
    )
    repositories_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/installation/repositories"]
    )
    html_url: AnyUrl = Field(
        ..., examples=["https://github.com/organizations/github/settings/installations/1"]
    )
    app_id: int = Field(..., examples=[1])
    target_id: int = Field(
        ..., description="The ID of the user or organization this token is being scoped to."
    )
    target_type: str = Field(..., examples=["Organization"])
    permissions: AppPermissions
    events: List[str]
    created_at: AwareDatetime
    updated_at: AwareDatetime
    single_file_name: Optional[str] = Field(..., examples=["config.yaml"])
    has_multiple_single_files: Optional[bool] = Field(None, examples=[True])
    single_file_paths: Optional[List[str]] = Field(
        None, examples=["config.yml", ".github/issue_TEMPLATE.md"]
    )
    app_slug: str = Field(..., examples=["github-actions"])
    suspended_by: Optional[SimpleUser] = None
    suspended_at: Optional[AwareDatetime] = None
    contact_email: Optional[str] = Field(
        None, examples=['"test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"']
    )


class LicenseSimple(BaseModel):
    key: str = Field(..., examples=["mit"])
    name: str = Field(..., examples=["MIT License"])
    url: Optional[AnyUrl] = Field(..., examples=["https://api.github.com/licenses/mit"])
    spdx_id: Optional[str] = Field(..., examples=["MIT"])
    node_id: str = Field(..., examples=["MDc6TGljZW5zZW1pdA=="])
    html_url: Optional[AnyUrl] = None


class Permissions1(BaseModel):
    admin: bool
    pull: bool
    triage: Optional[bool] = None
    push: bool
    maintain: Optional[bool] = None


class Owner(BaseModel):
    login: Optional[str] = None
    id: Optional[int] = None
    node_id: Optional[str] = None
    avatar_url: Optional[str] = None
    gravatar_id: Optional[str] = None
    url: Optional[str] = None
    html_url: Optional[str] = None
    followers_url: Optional[str] = None
    following_url: Optional[str] = None
    gists_url: Optional[str] = None
    starred_url: Optional[str] = None
    subscriptions_url: Optional[str] = None
    organizations_url: Optional[str] = None
    repos_url: Optional[str] = None
    events_url: Optional[str] = None
    received_events_url: Optional[str] = None
    type: Optional[str] = None
    site_admin: Optional[bool] = None


class Permissions2(BaseModel):
    admin: Optional[bool] = None
    maintain: Optional[bool] = None
    push: Optional[bool] = None
    triage: Optional[bool] = None
    pull: Optional[bool] = None


class SquashMergeCommitTitle(Enum):
    PR_TITLE = "PR_TITLE"
    COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"


class SquashMergeCommitMessage(Enum):
    PR_BODY = "PR_BODY"
    COMMIT_MESSAGES = "COMMIT_MESSAGES"
    BLANK = "BLANK"


class MergeCommitTitle(Enum):
    PR_TITLE = "PR_TITLE"
    MERGE_MESSAGE = "MERGE_MESSAGE"


class MergeCommitMessage(Enum):
    PR_BODY = "PR_BODY"
    PR_TITLE = "PR_TITLE"
    BLANK = "BLANK"


class TemplateRepository(BaseModel):
    id: Optional[int] = None
    node_id: Optional[str] = None
    name: Optional[str] = None
    full_name: Optional[str] = None
    owner: Optional[Owner] = None
    private: Optional[bool] = None
    html_url: Optional[str] = None
    description: Optional[str] = None
    fork: Optional[bool] = None
    url: Optional[str] = None
    archive_url: Optional[str] = None
    assignees_url: Optional[str] = None
    blobs_url: Optional[str] = None
    branches_url: Optional[str] = None
    collaborators_url: Optional[str] = None
    comments_url: Optional[str] = None
    commits_url: Optional[str] = None
    compare_url: Optional[str] = None
    contents_url: Optional[str] = None
    contributors_url: Optional[str] = None
    deployments_url: Optional[str] = None
    downloads_url: Optional[str] = None
    events_url: Optional[str] = None
    forks_url: Optional[str] = None
    git_commits_url: Optional[str] = None
    git_refs_url: Optional[str] = None
    git_tags_url: Optional[str] = None
    git_url: Optional[str] = None
    issue_comment_url: Optional[str] = None
    issue_events_url: Optional[str] = None
    issues_url: Optional[str] = None
    keys_url: Optional[str] = None
    labels_url: Optional[str] = None
    languages_url: Optional[str] = None
    merges_url: Optional[str] = None
    milestones_url: Optional[str] = None
    notifications_url: Optional[str] = None
    pulls_url: Optional[str] = None
    releases_url: Optional[str] = None
    ssh_url: Optional[str] = None
    stargazers_url: Optional[str] = None
    statuses_url: Optional[str] = None
    subscribers_url: Optional[str] = None
    subscription_url: Optional[str] = None
    tags_url: Optional[str] = None
    teams_url: Optional[str] = None
    trees_url: Optional[str] = None
    clone_url: Optional[str] = None
    mirror_url: Optional[str] = None
    hooks_url: Optional[str] = None
    svn_url: Optional[str] = None
    homepage: Optional[str] = None
    language: Optional[str] = None
    forks_count: Optional[int] = None
    stargazers_count: Optional[int] = None
    watchers_count: Optional[int] = None
    size: Optional[int] = None
    default_branch: Optional[str] = None
    open_issues_count: Optional[int] = None
    is_template: Optional[bool] = None
    topics: Optional[List[str]] = None
    has_issues: Optional[bool] = None
    has_projects: Optional[bool] = None
    has_wiki: Optional[bool] = None
    has_pages: Optional[bool] = None
    has_downloads: Optional[bool] = None
    archived: Optional[bool] = None
    disabled: Optional[bool] = None
    visibility: Optional[str] = None
    pushed_at: Optional[str] = None
    created_at: Optional[str] = None
    updated_at: Optional[str] = None
    permissions: Optional[Permissions2] = None
    allow_rebase_merge: Optional[bool] = None
    temp_clone_token: Optional[str] = None
    allow_squash_merge: Optional[bool] = None
    allow_auto_merge: Optional[bool] = None
    delete_branch_on_merge: Optional[bool] = None
    allow_update_branch: Optional[bool] = None
    use_squash_pr_title_as_default: Optional[bool] = None
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    allow_merge_commit: Optional[bool] = None
    subscribers_count: Optional[int] = None
    network_count: Optional[int] = None


class Repository(BaseModel):
    id: int = Field(..., description="Unique identifier of the repository", examples=[42])
    node_id: str = Field(..., examples=["MDEwOlJlcG9zaXRvcnkxMjk2MjY5"])
    name: str = Field(..., description="The name of the repository.", examples=["Team Environment"])
    full_name: str = Field(..., examples=["octocat/Hello-World"])
    license: Optional[LicenseSimple] = None
    organization: Optional[SimpleUser] = None
    forks: int
    permissions: Optional[Permissions1] = None
    owner: SimpleUser
    private: bool = Field(..., description="Whether the repository is private or public.")
    html_url: AnyUrl = Field(..., examples=["https://github.com/octocat/Hello-World"])
    description: Optional[str] = Field(..., examples=["This your first repo!"])
    fork: bool
    url: AnyUrl = Field(..., examples=["https://api.github.com/repos/octocat/Hello-World"])
    archive_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"]
    )
    assignees_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/assignees{/user}"]
    )
    blobs_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"]
    )
    branches_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/branches{/branch}"]
    )
    collaborators_url: str = Field(
        ...,
        examples=["http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"],
    )
    comments_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/comments{/number}"]
    )
    commits_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/commits{/sha}"]
    )
    compare_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"]
    )
    contents_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/contents/{+path}"]
    )
    contributors_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/contributors"]
    )
    deployments_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/deployments"]
    )
    downloads_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/downloads"]
    )
    events_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/events"]
    )
    forks_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/forks"]
    )
    git_commits_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"]
    )
    git_refs_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"]
    )
    git_tags_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"]
    )
    git_url: str = Field(..., examples=["git:github.com/octocat/Hello-World.git"])
    issue_comment_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"]
    )
    issue_events_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"]
    )
    issues_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/issues{/number}"]
    )
    keys_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"]
    )
    labels_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/labels{/name}"]
    )
    languages_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/languages"]
    )
    merges_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/merges"]
    )
    milestones_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/milestones{/number}"]
    )
    notifications_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
        ],
    )
    pulls_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/pulls{/number}"]
    )
    releases_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/releases{/id}"]
    )
    ssh_url: str = Field(..., examples=["git@github.com:octocat/Hello-World.git"])
    stargazers_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/stargazers"]
    )
    statuses_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"]
    )
    subscribers_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/subscribers"]
    )
    subscription_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/subscription"]
    )
    tags_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/tags"])
    teams_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/teams"]
    )
    trees_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"]
    )
    clone_url: str = Field(..., examples=["https://github.com/octocat/Hello-World.git"])
    mirror_url: Optional[AnyUrl] = Field(..., examples=["git:git.example.com/octocat/Hello-World"])
    hooks_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/hooks"]
    )
    svn_url: AnyUrl = Field(..., examples=["https://svn.github.com/octocat/Hello-World"])
    homepage: Optional[AnyUrl] = Field(..., examples=["https://github.com"])
    language: Optional[str] = None
    forks_count: int = Field(..., examples=[9])
    stargazers_count: int = Field(..., examples=[80])
    watchers_count: int = Field(..., examples=[80])
    size: int = Field(
        ...,
        description="The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.",
        examples=[108],
    )
    default_branch: str = Field(
        ..., description="The default branch of the repository.", examples=["master"]
    )
    open_issues_count: int = Field(..., examples=[0])
    is_template: Optional[bool] = Field(
        False,
        description="Whether this repository acts as a template that can be used to generate new repositories.",
        examples=[True],
    )
    topics: Optional[List[str]] = None
    has_issues: bool = Field(..., description="Whether issues are enabled.", examples=[True])
    has_projects: bool = Field(..., description="Whether projects are enabled.", examples=[True])
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.", examples=[True])
    has_pages: bool
    has_downloads: bool = Field(..., description="Whether downloads are enabled.", examples=[True])
    has_discussions: Optional[bool] = Field(
        False, description="Whether discussions are enabled.", examples=[True]
    )
    archived: bool = Field(..., description="Whether the repository is archived.")
    disabled: bool = Field(..., description="Returns whether or not this repository disabled.")
    visibility: Optional[str] = Field(
        "public", description="The repository visibility: public, private, or internal."
    )
    pushed_at: Optional[AwareDatetime] = Field(..., examples=["2011-01-26T19:06:43Z"])
    created_at: Optional[AwareDatetime] = Field(..., examples=["2011-01-26T19:01:12Z"])
    updated_at: Optional[AwareDatetime] = Field(..., examples=["2011-01-26T19:14:43Z"])
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests.", examples=[True]
    )
    template_repository: Optional[TemplateRepository] = None
    temp_clone_token: Optional[str] = None
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests.", examples=[True]
    )
    allow_auto_merge: Optional[bool] = Field(
        False,
        description="Whether to allow Auto-merge to be used on pull requests.",
        examples=[False],
    )
    delete_branch_on_merge: Optional[bool] = Field(
        False,
        description="Whether to delete head branches when pull requests are merged",
        examples=[False],
    )
    allow_update_branch: Optional[bool] = Field(
        False,
        description="Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.",
        examples=[False],
    )
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests.", examples=[True]
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow forking this repo")
    web_commit_signoff_required: Optional[bool] = Field(
        False, description="Whether to require contributors to sign off on web-based commits"
    )
    subscribers_count: Optional[int] = None
    network_count: Optional[int] = None
    open_issues: int
    watchers: int
    master_branch: Optional[str] = None
    starred_at: Optional[str] = Field(None, examples=['"2020-07-09T00:17:42Z"'])
    anonymous_access_enabled: Optional[bool] = Field(
        None, description="Whether anonymous git access is enabled for this repository"
    )


class InstallationToken(BaseModel):
    token: str
    expires_at: str
    permissions: Optional[AppPermissions] = None
    repository_selection: Optional[RepositorySelection] = None
    repositories: Optional[List[Repository]] = None
    single_file: Optional[str] = Field(None, examples=["README.md"])
    has_multiple_single_files: Optional[bool] = Field(None, examples=[True])
    single_file_paths: Optional[List[str]] = Field(
        None, examples=["config.yml", ".github/issue_TEMPLATE.md"]
    )


class ScopedInstallation(BaseModel):
    permissions: AppPermissions
    repository_selection: RepositorySelection = Field(
        ...,
        description="Describe whether all repositories have been selected or there's a selection involved",
    )
    single_file_name: Optional[str] = Field(..., examples=["config.yaml"])
    has_multiple_single_files: Optional[bool] = Field(None, examples=[True])
    single_file_paths: Optional[List[str]] = Field(
        None, examples=["config.yml", ".github/issue_TEMPLATE.md"]
    )
    repositories_url: AnyUrl = Field(..., examples=["https://api.github.com/users/octocat/repos"])
    account: SimpleUser


class App(BaseModel):
    client_id: str
    name: str
    url: AnyUrl


class Authorization(BaseModel):
    id: int
    url: AnyUrl
    scopes: List[str] = Field(..., description="A list of scopes that this authorization is in.")
    token: str
    token_last_eight: Optional[str] = None
    hashed_token: Optional[str] = None
    app: App
    note: Optional[str] = None
    note_url: Optional[AnyUrl] = None
    updated_at: AwareDatetime
    created_at: AwareDatetime
    fingerprint: Optional[str] = None
    user: Optional[SimpleUser] = None
    installation: Optional[ScopedInstallation] = None
    expires_at: Optional[AwareDatetime] = None


class SimpleClassroomRepository(BaseModel):
    id: int = Field(..., description="A unique identifier of the repository.", examples=[1296269])
    full_name: str = Field(
        ...,
        description="The full, globally unique name of the repository.",
        examples=["octocat/Hello-World"],
    )
    html_url: AnyUrl = Field(
        ...,
        description="The URL to view the repository on GitHub.com.",
        examples=["https://github.com/octocat/Hello-World"],
    )
    node_id: str = Field(
        ...,
        description="The GraphQL identifier of the repository.",
        examples=["MDEwOlJlcG9zaXRvcnkxMjk2MjY5"],
    )
    private: bool = Field(..., description="Whether the repository is private.")
    default_branch: str = Field(
        ..., description="The default branch for the repository.", examples=["main"]
    )


class SimpleClassroomOrganization(BaseModel):
    id: int = Field(..., examples=[1])
    login: str = Field(..., examples=["github"])
    node_id: str = Field(..., examples=["MDEyOk9yZ2FuaXphdGlvbjE="])
    html_url: AnyUrl = Field(..., examples=["https://github.com/github"])
    name: Optional[str] = Field(..., examples=["Github - Code things happen here"])
    avatar_url: str = Field(..., examples=["https://github.com/images/error/octocat_happy.gif"])


class Classroom(BaseModel):
    id: int = Field(..., description="Unique identifier of the classroom.", examples=[42])
    name: str = Field(
        ..., description="The name of the classroom.", examples=["Programming Elixir"]
    )
    archived: bool = Field(..., description="Whether classroom is archived.", examples=[False])
    organization: SimpleClassroomOrganization
    url: str = Field(
        ...,
        description="The URL of the classroom on GitHub Classroom.",
        examples=["https://classroom.github.com/classrooms/1-programming-elixir"],
    )


class Type2(Enum):
    individual = "individual"
    group = "group"


class ClassroomAssignment(BaseModel):
    id: int = Field(..., description="Unique identifier of the repository.", examples=[42])
    public_repo: bool = Field(
        ...,
        description="Whether an accepted assignment creates a public repository.",
        examples=[True],
    )
    title: str = Field(..., description="Assignment title.", examples=["Intro to Binaries"])
    type: Type2 = Field(
        ...,
        description="Whether it's a group assignment or individual assignment.",
        examples=["individual"],
    )
    invite_link: str = Field(
        ...,
        description="The link that a student can use to accept the assignment.",
        examples=["https://classroom.github.com/a/Lx7jiUgx"],
    )
    invitations_enabled: bool = Field(
        ...,
        description="Whether the invitation link is enabled. Visiting an enabled invitation link will accept the assignment.",
        examples=[True],
    )
    slug: str = Field(
        ..., description="Sluggified name of the assignment.", examples=["intro-to-binaries"]
    )
    students_are_repo_admins: bool = Field(
        ...,
        description="Whether students are admins on created repository when a student accepts the assignment.",
        examples=[True],
    )
    feedback_pull_requests_enabled: bool = Field(
        ...,
        description="Whether feedback pull request will be created when a student accepts the assignment.",
        examples=[True],
    )
    max_teams: Optional[int] = Field(
        ..., description="The maximum allowable teams for the assignment.", examples=[0]
    )
    max_members: Optional[int] = Field(
        ..., description="The maximum allowable members per team.", examples=[0]
    )
    editor: str = Field(
        ..., description="The selected editor for the assignment.", examples=["codespaces"]
    )
    accepted: int = Field(
        ..., description="The number of students that have accepted the assignment.", examples=[25]
    )
    submitted: int = Field(
        ..., description="The number of students that have submitted the assignment.", examples=[10]
    )
    passing: int = Field(
        ..., description="The number of students that have passed the assignment.", examples=[10]
    )
    language: str = Field(
        ..., description="The programming language used in the assignment.", examples=["elixir"]
    )
    deadline: Optional[AwareDatetime] = Field(
        ...,
        description="The time at which the assignment is due.",
        examples=["2011-01-26T19:06:43Z"],
    )
    starter_code_repository: SimpleClassroomRepository
    classroom: Classroom


class SimpleClassroomUser(BaseModel):
    id: int = Field(..., examples=[1])
    login: str = Field(..., examples=["octocat"])
    avatar_url: AnyUrl = Field(..., examples=["https://github.com/images/error/octocat_happy.gif"])
    html_url: AnyUrl = Field(..., examples=["https://github.com/octocat"])


class SimpleClassroom(BaseModel):
    id: int = Field(..., description="Unique identifier of the classroom.", examples=[42])
    name: str = Field(
        ..., description="The name of the classroom.", examples=["Programming Elixir"]
    )
    archived: bool = Field(
        ..., description="Returns whether classroom is archived or not.", examples=[False]
    )
    url: str = Field(
        ...,
        description="The url of the classroom on GitHub Classroom.",
        examples=["https://classroom.github.com/classrooms/1-programming-elixir"],
    )


class SimpleClassroomAssignment(BaseModel):
    id: int = Field(..., description="Unique identifier of the repository.", examples=[42])
    public_repo: bool = Field(
        ...,
        description="Whether an accepted assignment creates a public repository.",
        examples=[True],
    )
    title: str = Field(..., description="Assignment title.", examples=["Intro to Binaries"])
    type: Type2 = Field(
        ...,
        description="Whether it's a Group Assignment or Individual Assignment.",
        examples=["individual"],
    )
    invite_link: str = Field(
        ...,
        description="The link that a student can use to accept the assignment.",
        examples=["https://classroom.github.com/a/Lx7jiUgx"],
    )
    invitations_enabled: bool = Field(
        ...,
        description="Whether the invitation link is enabled. Visiting an enabled invitation link will accept the assignment.",
        examples=[True],
    )
    slug: str = Field(
        ..., description="Sluggified name of the assignment.", examples=["intro-to-binaries"]
    )
    students_are_repo_admins: bool = Field(
        ...,
        description="Whether students are admins on created repository on accepted assignment.",
        examples=[True],
    )
    feedback_pull_requests_enabled: bool = Field(
        ...,
        description="Whether feedback pull request will be created on assignment acceptance.",
        examples=[True],
    )
    max_teams: Optional[int] = Field(
        None, description="The maximum allowable teams for the assignment.", examples=[0]
    )
    max_members: Optional[int] = Field(
        None, description="The maximum allowable members per team.", examples=[0]
    )
    editor: str = Field(
        ..., description="The selected editor for the assignment.", examples=["codespaces"]
    )
    accepted: int = Field(
        ..., description="The number of students that have accepted the assignment.", examples=[25]
    )
    submitted: int = Field(
        ..., description="The number of students that have submitted the assignment.", examples=[10]
    )
    passing: int = Field(
        ..., description="The number of students that have passed the assignment.", examples=[10]
    )
    language: str = Field(
        ..., description="The programming language used in the assignment.", examples=["elixir"]
    )
    deadline: Optional[AwareDatetime] = Field(
        ...,
        description="The time at which the assignment is due.",
        examples=["2011-01-26T19:06:43Z"],
    )
    classroom: SimpleClassroom


class ClassroomAcceptedAssignment(BaseModel):
    id: int = Field(..., description="Unique identifier of the repository.", examples=[42])
    submitted: bool = Field(
        ..., description="Whether an accepted assignment has been submitted.", examples=[True]
    )
    passing: bool = Field(..., description="Whether a submission passed.", examples=[True])
    commit_count: int = Field(..., description="Count of student commits.", examples=[5])
    grade: str = Field(..., description="Most recent grade.", examples=["10/10"])
    students: List[SimpleClassroomUser]
    repository: SimpleClassroomRepository
    assignment: SimpleClassroomAssignment


class ClassroomAssignmentGrade(BaseModel):
    assignment_name: str = Field(..., description="Name of the assignment")
    assignment_url: str = Field(..., description="URL of the assignment")
    starter_code_url: str = Field(..., description="URL of the starter code for the assignment")
    github_username: str = Field(..., description="GitHub username of the student")
    roster_identifier: str = Field(..., description="Roster identifier of the student")
    student_repository_name: str = Field(
        ..., description="Name of the student's assignment repository"
    )
    student_repository_url: str = Field(
        ..., description="URL of the student's assignment repository"
    )
    submission_timestamp: str = Field(
        ..., description="Timestamp of the student's assignment submission"
    )
    points_awarded: int = Field(..., description="Number of points awarded to the student")
    points_available: int = Field(..., description="Number of points available for the assignment")
    group_name: Optional[str] = Field(
        None, description="If a group assignment, name of the group the student is in"
    )


class CodeOfConduct(BaseModel):
    key: str = Field(..., examples=["contributor_covenant"])
    name: str = Field(..., examples=["Contributor Covenant"])
    url: AnyUrl = Field(
        ..., examples=["https://api.github.com/codes_of_conduct/contributor_covenant"]
    )
    body: Optional[str] = Field(
        None,
        examples=[
            "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.4, available at [http://contributor-covenant.org/version/1/4](http://contributor-covenant.org/version/1/4/).\n"
        ],
    )
    html_url: Optional[AnyUrl] = None


class AlertNumber(RootModel[int]):
    root: int = Field(..., description="The security alert number.")


class DependabotAlertPackage(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    ecosystem: str = Field(
        ..., description="The package's language or package management ecosystem."
    )
    name: str = Field(..., description="The unique package name within its ecosystem.")


class Severity1(Enum):
    low = "low"
    medium = "medium"
    high = "high"
    critical = "critical"


class FirstPatchedVersion(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    identifier: str = Field(..., description="The package version that patches this vulnerability.")


class DependabotAlertSecurityVulnerability(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    package: DependabotAlertPackage
    severity: Severity1 = Field(..., description="The severity of the vulnerability.")
    vulnerable_version_range: str = Field(
        ...,
        description="Conditions that identify vulnerable versions of this vulnerability's package.",
    )
    first_patched_version: Optional[FirstPatchedVersion] = Field(
        ...,
        description="Details pertaining to the package version that patches this vulnerability.",
    )


class Cvss1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    score: confloat(ge=0.0, le=10.0) = Field(
        ..., description="The overall CVSS score of the advisory."
    )
    vector_string: Optional[str] = Field(
        ..., description="The full CVSS vector string for the advisory."
    )


class Cwe1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    cwe_id: str = Field(..., description="The unique CWE ID.")
    name: str = Field(..., description="The short, plain text name of the CWE.")


class Identifier1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Type1 = Field(..., description="The type of advisory identifier.")
    value: str = Field(..., description="The value of the advisory identifier.")


class Reference(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: AnyUrl = Field(..., description="The URL of the reference.")


class DependabotAlertSecurityAdvisory(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    ghsa_id: str = Field(
        ..., description="The unique GitHub Security Advisory ID assigned to the advisory."
    )
    cve_id: Optional[str] = Field(..., description="The unique CVE ID assigned to the advisory.")
    summary: constr(max_length=1024) = Field(
        ..., description="A short, plain text summary of the advisory."
    )
    description: str = Field(
        ..., description="A long-form Markdown-supported description of the advisory."
    )
    vulnerabilities: List[DependabotAlertSecurityVulnerability] = Field(
        ..., description="Vulnerable version range information for the advisory."
    )
    severity: Severity1 = Field(..., description="The severity of the advisory.")
    cvss: Cvss1 = Field(
        ...,
        description="Details for the advisory pertaining to the Common Vulnerability Scoring System.",
    )
    cwes: List[Cwe1] = Field(
        ..., description="Details for the advisory pertaining to Common Weakness Enumeration."
    )
    identifiers: List[Identifier1] = Field(
        ..., description="Values that identify this advisory among security information sources."
    )
    references: List[Reference] = Field(
        ..., description="Links to additional advisory information."
    )
    published_at: AwareDatetime = Field(
        ...,
        description="The time that the advisory was published in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    updated_at: AwareDatetime = Field(
        ...,
        description="The time that the advisory was last modified in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    withdrawn_at: Optional[AwareDatetime] = Field(
        ...,
        description="The time that the advisory was withdrawn in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )


class AlertUrl(RootModel[AnyUrl]):
    root: AnyUrl = Field(..., description="The REST API URL of the alert resource.")


class AlertHtmlUrl(RootModel[AnyUrl]):
    root: AnyUrl = Field(..., description="The GitHub URL of the alert resource.")


class AlertCreatedAt(RootModel[AwareDatetime]):
    root: AwareDatetime = Field(
        ...,
        description="The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )


class AlertUpdatedAt(RootModel[AwareDatetime]):
    root: AwareDatetime = Field(
        ...,
        description="The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )


class AlertDismissedAt(RootModel[Optional[AwareDatetime]]):
    root: Optional[AwareDatetime] = Field(
        ...,
        description="The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )


class AlertFixedAt(RootModel[Optional[AwareDatetime]]):
    root: Optional[AwareDatetime] = Field(
        ...,
        description="The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )


class AlertAutoDismissedAt(RootModel[Optional[AwareDatetime]]):
    root: Optional[AwareDatetime] = Field(
        ...,
        description="The time that the alert was auto-dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )


class SimpleRepository(BaseModel):
    id: int = Field(..., description="A unique identifier of the repository.", examples=[1296269])
    node_id: str = Field(
        ...,
        description="The GraphQL identifier of the repository.",
        examples=["MDEwOlJlcG9zaXRvcnkxMjk2MjY5"],
    )
    name: str = Field(..., description="The name of the repository.", examples=["Hello-World"])
    full_name: str = Field(
        ...,
        description="The full, globally unique, name of the repository.",
        examples=["octocat/Hello-World"],
    )
    owner: SimpleUser
    private: bool = Field(..., description="Whether the repository is private.")
    html_url: AnyUrl = Field(
        ...,
        description="The URL to view the repository on GitHub.com.",
        examples=["https://github.com/octocat/Hello-World"],
    )
    description: Optional[str] = Field(
        ..., description="The repository description.", examples=["This your first repo!"]
    )
    fork: bool = Field(..., description="Whether the repository is a fork.")
    url: AnyUrl = Field(
        ...,
        description="The URL to get more information about the repository from the GitHub API.",
        examples=["https://api.github.com/repos/octocat/Hello-World"],
    )
    archive_url: str = Field(
        ...,
        description="A template for the API URL to download the repository as an archive.",
        examples=["https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"],
    )
    assignees_url: str = Field(
        ...,
        description="A template for the API URL to list the available assignees for issues in the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/assignees{/user}"],
    )
    blobs_url: str = Field(
        ...,
        description="A template for the API URL to create or retrieve a raw Git blob in the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"],
    )
    branches_url: str = Field(
        ...,
        description="A template for the API URL to get information about branches in the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/branches{/branch}"],
    )
    collaborators_url: str = Field(
        ...,
        description="A template for the API URL to get information about collaborators of the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"],
    )
    comments_url: str = Field(
        ...,
        description="A template for the API URL to get information about comments on the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/comments{/number}"],
    )
    commits_url: str = Field(
        ...,
        description="A template for the API URL to get information about commits on the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/commits{/sha}"],
    )
    compare_url: str = Field(
        ...,
        description="A template for the API URL to compare two commits or refs.",
        examples=["https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"],
    )
    contents_url: str = Field(
        ...,
        description="A template for the API URL to get the contents of the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/contents/{+path}"],
    )
    contributors_url: AnyUrl = Field(
        ...,
        description="A template for the API URL to list the contributors to the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/contributors"],
    )
    deployments_url: AnyUrl = Field(
        ...,
        description="The API URL to list the deployments of the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/deployments"],
    )
    downloads_url: AnyUrl = Field(
        ...,
        description="The API URL to list the downloads on the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/downloads"],
    )
    events_url: AnyUrl = Field(
        ...,
        description="The API URL to list the events of the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/events"],
    )
    forks_url: AnyUrl = Field(
        ...,
        description="The API URL to list the forks of the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/forks"],
    )
    git_commits_url: str = Field(
        ...,
        description="A template for the API URL to get information about Git commits of the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"],
    )
    git_refs_url: str = Field(
        ...,
        description="A template for the API URL to get information about Git refs of the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"],
    )
    git_tags_url: str = Field(
        ...,
        description="A template for the API URL to get information about Git tags of the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"],
    )
    issue_comment_url: str = Field(
        ...,
        description="A template for the API URL to get information about issue comments on the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"],
    )
    issue_events_url: str = Field(
        ...,
        description="A template for the API URL to get information about issue events on the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/issues/events{/number}"],
    )
    issues_url: str = Field(
        ...,
        description="A template for the API URL to get information about issues on the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/issues{/number}"],
    )
    keys_url: str = Field(
        ...,
        description="A template for the API URL to get information about deploy keys on the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/keys{/key_id}"],
    )
    labels_url: str = Field(
        ...,
        description="A template for the API URL to get information about labels of the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/labels{/name}"],
    )
    languages_url: AnyUrl = Field(
        ...,
        description="The API URL to get information about the languages of the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/languages"],
    )
    merges_url: AnyUrl = Field(
        ...,
        description="The API URL to merge branches in the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/merges"],
    )
    milestones_url: str = Field(
        ...,
        description="A template for the API URL to get information about milestones of the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/milestones{/number}"],
    )
    notifications_url: str = Field(
        ...,
        description="A template for the API URL to get information about notifications on the repository.",
        examples=[
            "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
        ],
    )
    pulls_url: str = Field(
        ...,
        description="A template for the API URL to get information about pull requests on the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/pulls{/number}"],
    )
    releases_url: str = Field(
        ...,
        description="A template for the API URL to get information about releases on the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/releases{/id}"],
    )
    stargazers_url: AnyUrl = Field(
        ...,
        description="The API URL to list the stargazers on the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/stargazers"],
    )
    statuses_url: str = Field(
        ...,
        description="A template for the API URL to get information about statuses of a commit.",
        examples=["https://api.github.com/repos/octocat/Hello-World/statuses/{sha}"],
    )
    subscribers_url: AnyUrl = Field(
        ...,
        description="The API URL to list the subscribers on the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/subscribers"],
    )
    subscription_url: AnyUrl = Field(
        ...,
        description="The API URL to subscribe to notifications for this repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/subscription"],
    )
    tags_url: AnyUrl = Field(
        ...,
        description="The API URL to get information about tags on the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/tags"],
    )
    teams_url: AnyUrl = Field(
        ...,
        description="The API URL to list the teams on the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/teams"],
    )
    trees_url: str = Field(
        ...,
        description="A template for the API URL to create or retrieve a raw Git tree of the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"],
    )
    hooks_url: AnyUrl = Field(
        ...,
        description="The API URL to list the hooks on the repository.",
        examples=["https://api.github.com/repos/octocat/Hello-World/hooks"],
    )


class State(Enum):
    auto_dismissed = "auto_dismissed"
    dismissed = "dismissed"
    fixed = "fixed"
    open = "open"


class Scope(Enum):
    development = "development"
    runtime = "runtime"
    NoneType_None = None


class Dependency(BaseModel):
    package: Optional[DependabotAlertPackage] = None
    manifest_path: Optional[str] = Field(
        None,
        description="The full path to the dependency manifest file, relative to the root of the repository.",
    )
    scope: Optional[Scope] = Field(
        None, description="The execution scope of the vulnerable dependency."
    )


class DismissedReason(Enum):
    fix_started = "fix_started"
    inaccurate = "inaccurate"
    no_bandwidth = "no_bandwidth"
    not_used = "not_used"
    tolerable_risk = "tolerable_risk"
    NoneType_None = None


class DependabotAlertWithRepository(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    number: AlertNumber
    state: State = Field(..., description="The state of the Dependabot alert.")
    dependency: Dependency = Field(..., description="Details for the vulnerable dependency.")
    security_advisory: DependabotAlertSecurityAdvisory
    security_vulnerability: DependabotAlertSecurityVulnerability
    url: AlertUrl
    html_url: AlertHtmlUrl
    created_at: AlertCreatedAt
    updated_at: AlertUpdatedAt
    dismissed_at: Optional[AlertDismissedAt] = None
    dismissed_by: Optional[SimpleUser] = None
    dismissed_reason: DismissedReason = Field(
        ..., description="The reason that the alert was dismissed."
    )
    dismissed_comment: Optional[constr(max_length=280)] = Field(
        ..., description="An optional comment associated with the alert's dismissal."
    )
    fixed_at: Optional[AlertFixedAt] = None
    auto_dismissed_at: Optional[AlertAutoDismissedAt] = None
    repository: SimpleRepository


class SecretScanningAlertState(Enum):
    open = "open"
    resolved = "resolved"


class SecretScanningAlertResolution(Enum):
    false_positive = "false_positive"
    wont_fix = "wont_fix"
    revoked = "revoked"
    used_in_tests = "used_in_tests"
    NoneType_None = None


class Validity(Enum):
    active = "active"
    inactive = "inactive"
    unknown = "unknown"


class OrganizationSecretScanningAlert(BaseModel):
    number: Optional[AlertNumber] = None
    created_at: Optional[AlertCreatedAt] = None
    updated_at: Optional[AlertUpdatedAt] = None
    url: Optional[AlertUrl] = None
    html_url: Optional[AlertHtmlUrl] = None
    locations_url: Optional[AnyUrl] = Field(
        None, description="The REST API URL of the code locations for this alert."
    )
    state: Optional[SecretScanningAlertState] = None
    resolution: Optional[SecretScanningAlertResolution] = None
    resolved_at: Optional[AwareDatetime] = Field(
        None,
        description="The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    resolved_by: Optional[SimpleUser] = None
    secret_type: Optional[str] = Field(
        None, description="The type of secret that secret scanning detected."
    )
    secret_type_display_name: Optional[str] = Field(
        None,
        description='User-friendly name for the detected secret, matching the `secret_type`.\nFor a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."',
    )
    secret: Optional[str] = Field(None, description="The secret that was detected.")
    repository: Optional[SimpleRepository] = None
    push_protection_bypassed: Optional[bool] = Field(
        None, description="Whether push protection was bypassed for the detected secret."
    )
    push_protection_bypassed_by: Optional[SimpleUser] = None
    push_protection_bypassed_at: Optional[AwareDatetime] = Field(
        None,
        description="The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    resolution_comment: Optional[str] = Field(
        None, description="The comment that was optionally added when this alert was closed"
    )
    validity: Optional[Validity] = Field(
        None, description="The token status as of the latest validity check."
    )


class Actor(BaseModel):
    id: int
    login: str
    display_login: Optional[str] = None
    gravatar_id: Optional[str] = None
    url: AnyUrl
    avatar_url: AnyUrl


class State1(Enum):
    open = "open"
    closed = "closed"


class Milestone(BaseModel):
    url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/Hello-World/milestones/1"]
    )
    html_url: AnyUrl = Field(
        ..., examples=["https://github.com/octocat/Hello-World/milestones/v1.0"]
    )
    labels_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/Hello-World/milestones/1/labels"]
    )
    id: int = Field(..., examples=[1002604])
    node_id: str = Field(..., examples=["MDk6TWlsZXN0b25lMTAwMjYwNA=="])
    number: int = Field(..., description="The number of the milestone.", examples=[42])
    state: State1 = Field(..., description="The state of the milestone.", examples=["open"])
    title: str = Field(..., description="The title of the milestone.", examples=["v1.0"])
    description: Optional[str] = Field(..., examples=["Tracking milestone for version 1.0"])
    creator: Optional[SimpleUser] = None
    open_issues: int = Field(..., examples=[4])
    closed_issues: int = Field(..., examples=[8])
    created_at: AwareDatetime = Field(..., examples=["2011-04-10T20:09:31Z"])
    updated_at: AwareDatetime = Field(..., examples=["2014-03-03T18:58:10Z"])
    closed_at: Optional[AwareDatetime] = Field(..., examples=["2013-02-12T13:22:01Z"])
    due_on: Optional[AwareDatetime] = Field(..., examples=["2012-10-09T23:39:01Z"])


class AuthorAssociation(Enum):
    COLLABORATOR = "COLLABORATOR"
    CONTRIBUTOR = "CONTRIBUTOR"
    FIRST_TIMER = "FIRST_TIMER"
    FIRST_TIME_CONTRIBUTOR = "FIRST_TIME_CONTRIBUTOR"
    MANNEQUIN = "MANNEQUIN"
    MEMBER = "MEMBER"
    NONE = "NONE"
    OWNER = "OWNER"


class ReactionRollup(BaseModel):
    url: AnyUrl
    total_count: int
    field_1: int = Field(..., alias="+1")
    field_1_1: int = Field(..., alias="-1")
    laugh: int
    confused: int
    heart: int
    hooray: int
    eyes: int
    rocket: int


class StateReason(Enum):
    completed = "completed"
    reopened = "reopened"
    not_planned = "not_planned"
    NoneType_None = None


class Labels(BaseModel):
    id: Optional[int] = None
    node_id: Optional[str] = None
    url: Optional[AnyUrl] = None
    name: Optional[str] = None
    description: Optional[str] = None
    color: Optional[str] = None
    default: Optional[bool] = None


class PullRequest(BaseModel):
    merged_at: Optional[AwareDatetime] = None
    diff_url: Optional[AnyUrl] = None
    html_url: Optional[AnyUrl] = None
    patch_url: Optional[AnyUrl] = None
    url: Optional[AnyUrl] = None


class Issue(BaseModel):
    id: int
    node_id: str
    url: AnyUrl = Field(
        ...,
        description="URL for the issue",
        examples=["https://api.github.com/repositories/42/issues/1"],
    )
    repository_url: AnyUrl
    labels_url: str
    comments_url: AnyUrl
    events_url: AnyUrl
    html_url: AnyUrl
    number: int = Field(
        ...,
        description="Number uniquely identifying the issue within its repository",
        examples=[42],
    )
    state: str = Field(
        ..., description="State of the issue; either 'open' or 'closed'", examples=["open"]
    )
    state_reason: Optional[StateReason] = Field(
        None, description="The reason for the current state", examples=["not_planned"]
    )
    title: str = Field(
        ...,
        description="Title of the issue",
        examples=["Widget creation fails in Safari on OS X 10.8"],
    )
    body: Optional[str] = Field(
        None,
        description="Contents of the issue",
        examples=[
            "It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?"
        ],
    )
    user: Optional[SimpleUser] = None
    labels: List[Union[str, Labels]] = Field(
        ...,
        description="Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository",
        examples=["bug", "registration"],
    )
    assignee: Optional[SimpleUser] = None
    assignees: Optional[List[SimpleUser]] = None
    milestone: Optional[Milestone] = None
    locked: bool
    active_lock_reason: Optional[str] = None
    comments: int
    pull_request: Optional[PullRequest] = None
    closed_at: Optional[AwareDatetime] = None
    created_at: AwareDatetime
    updated_at: AwareDatetime
    draft: Optional[bool] = None
    closed_by: Optional[SimpleUser] = None
    body_html: Optional[str] = None
    body_text: Optional[str] = None
    timeline_url: Optional[AnyUrl] = None
    repository: Optional[Repository] = None
    performed_via_github_app: Optional[Integration] = None
    author_association: AuthorAssociation
    reactions: Optional[ReactionRollup] = None


class IssueComment(BaseModel):
    id: int = Field(..., description="Unique identifier of the issue comment", examples=[42])
    node_id: str
    url: AnyUrl = Field(
        ...,
        description="URL for the issue comment",
        examples=["https://api.github.com/repositories/42/issues/comments/1"],
    )
    body: Optional[str] = Field(
        None,
        description="Contents of the issue comment",
        examples=["What version of Safari were you using when you observed this bug?"],
    )
    body_text: Optional[str] = None
    body_html: Optional[str] = None
    html_url: AnyUrl
    user: Optional[SimpleUser] = None
    created_at: AwareDatetime = Field(..., examples=["2011-04-14T16:00:49Z"])
    updated_at: AwareDatetime = Field(..., examples=["2011-04-14T16:00:49Z"])
    issue_url: AnyUrl
    author_association: AuthorAssociation
    performed_via_github_app: Optional[Integration] = None
    reactions: Optional[ReactionRollup] = None


class Repo(BaseModel):
    id: int
    name: str
    url: AnyUrl


class Page(BaseModel):
    page_name: Optional[str] = None
    title: Optional[str] = None
    summary: Optional[str] = None
    action: Optional[str] = None
    sha: Optional[str] = None
    html_url: Optional[str] = None


class Payload(BaseModel):
    action: Optional[str] = None
    issue: Optional[Issue] = None
    comment: Optional[IssueComment] = None
    pages: Optional[List[Page]] = None


class Event(BaseModel):
    id: str
    type: Optional[str] = None
    actor: Actor
    repo: Repo
    org: Optional[Actor] = None
    payload: Payload
    public: bool
    created_at: Optional[AwareDatetime] = None


class LinkWithType(BaseModel):
    href: str
    type: str


class FieldLinks(BaseModel):
    timeline: LinkWithType
    user: LinkWithType
    security_advisories: Optional[LinkWithType] = None
    current_user: Optional[LinkWithType] = None
    current_user_public: Optional[LinkWithType] = None
    current_user_actor: Optional[LinkWithType] = None
    current_user_organization: Optional[LinkWithType] = None
    current_user_organizations: Optional[List[LinkWithType]] = None
    repository_discussions: Optional[LinkWithType] = None
    repository_discussions_category: Optional[LinkWithType] = None


class Feed(BaseModel):
    timeline_url: str = Field(..., examples=["https://github.com/timeline"])
    user_url: str = Field(..., examples=["https://github.com/{user}"])
    current_user_public_url: Optional[str] = Field(None, examples=["https://github.com/octocat"])
    current_user_url: Optional[str] = Field(
        None, examples=["https://github.com/octocat.private?token=abc123"]
    )
    current_user_actor_url: Optional[str] = Field(
        None, examples=["https://github.com/octocat.private.actor?token=abc123"]
    )
    current_user_organization_url: Optional[str] = Field(
        None, examples=["https://github.com/octocat-org"]
    )
    current_user_organization_urls: Optional[List[AnyUrl]] = Field(
        None, examples=["https://github.com/organizations/github/octocat.private.atom?token=abc123"]
    )
    security_advisories_url: Optional[str] = Field(
        None, examples=["https://github.com/security-advisories"]
    )
    repository_discussions_url: Optional[str] = Field(
        None,
        description="A feed of discussions for a given repository.",
        examples=["https://github.com/{user}/{repo}/discussions"],
    )
    repository_discussions_category_url: Optional[str] = Field(
        None,
        description="A feed of discussions for a given repository and category.",
        examples=["https://github.com/{user}/{repo}/discussions/categories/{category}"],
    )
    field_links: FieldLinks = Field(..., alias="_links")


class Files(BaseModel):
    filename: Optional[str] = None
    type: Optional[str] = None
    language: Optional[str] = None
    raw_url: Optional[str] = None
    size: Optional[int] = None


class BaseGist(BaseModel):
    url: AnyUrl
    forks_url: AnyUrl
    commits_url: AnyUrl
    id: str
    node_id: str
    git_pull_url: AnyUrl
    git_push_url: AnyUrl
    html_url: AnyUrl
    files: Dict[str, Files]
    public: bool
    created_at: AwareDatetime
    updated_at: AwareDatetime
    description: Optional[str] = None
    comments: int
    user: Optional[SimpleUser] = None
    comments_url: AnyUrl
    owner: Optional[SimpleUser] = None
    truncated: Optional[bool] = None
    forks: Optional[List] = None
    history: Optional[List] = None


class Plan(BaseModel):
    collaborators: int
    name: str
    space: int
    private_repos: int


class PublicUser(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    login: str
    id: int
    node_id: str
    avatar_url: AnyUrl
    gravatar_id: Optional[str] = None
    url: AnyUrl
    html_url: AnyUrl
    followers_url: AnyUrl
    following_url: str
    gists_url: str
    starred_url: str
    subscriptions_url: AnyUrl
    organizations_url: AnyUrl
    repos_url: AnyUrl
    events_url: str
    received_events_url: AnyUrl
    type: str
    site_admin: bool
    name: Optional[str] = None
    company: Optional[str] = None
    blog: Optional[str] = None
    location: Optional[str] = None
    email: Optional[EmailStr] = None
    hireable: Optional[bool] = None
    bio: Optional[str] = None
    twitter_username: Optional[str] = None
    public_repos: int
    public_gists: int
    followers: int
    following: int
    created_at: AwareDatetime
    updated_at: AwareDatetime
    plan: Optional[Plan] = None
    suspended_at: Optional[AwareDatetime] = None
    private_gists: Optional[int] = Field(None, examples=[1])
    total_private_repos: Optional[int] = Field(None, examples=[2])
    owned_private_repos: Optional[int] = Field(None, examples=[2])
    disk_usage: Optional[int] = Field(None, examples=[1])
    collaborators: Optional[int] = Field(None, examples=[3])


class ChangeStatus(BaseModel):
    total: Optional[int] = None
    additions: Optional[int] = None
    deletions: Optional[int] = None


class GistHistory(BaseModel):
    user: Optional[SimpleUser] = None
    version: Optional[str] = None
    committed_at: Optional[AwareDatetime] = None
    change_status: Optional[ChangeStatus] = None
    url: Optional[AnyUrl] = None


class Fork(BaseModel):
    id: Optional[str] = None
    url: Optional[AnyUrl] = None
    user: Optional[PublicUser] = None
    created_at: Optional[AwareDatetime] = None
    updated_at: Optional[AwareDatetime] = None


class ForkOf(BaseModel):
    url: AnyUrl
    forks_url: AnyUrl
    commits_url: AnyUrl
    id: str
    node_id: str
    git_pull_url: AnyUrl
    git_push_url: AnyUrl
    html_url: AnyUrl
    files: Dict[str, Files]
    public: bool
    created_at: AwareDatetime
    updated_at: AwareDatetime
    description: Optional[str] = None
    comments: int
    user: Optional[SimpleUser] = None
    comments_url: AnyUrl
    owner: Optional[SimpleUser] = None
    truncated: Optional[bool] = None
    forks: Optional[List] = None
    history: Optional[List] = None


class Files2(BaseModel):
    filename: Optional[str] = None
    type: Optional[str] = None
    language: Optional[str] = None
    raw_url: Optional[str] = None
    size: Optional[int] = None
    truncated: Optional[bool] = None
    content: Optional[str] = None


class GistSimple(BaseModel):
    forks: Optional[List[Fork]] = None
    history: Optional[List[GistHistory]] = None
    fork_of: Optional[ForkOf] = Field(None, description="Gist", title="Gist")
    url: Optional[str] = None
    forks_url: Optional[str] = None
    commits_url: Optional[str] = None
    id: Optional[str] = None
    node_id: Optional[str] = None
    git_pull_url: Optional[str] = None
    git_push_url: Optional[str] = None
    html_url: Optional[str] = None
    files: Optional[Dict[str, Optional[Files2]]] = None
    public: Optional[bool] = None
    created_at: Optional[str] = None
    updated_at: Optional[str] = None
    description: Optional[str] = None
    comments: Optional[int] = None
    user: Optional[str] = None
    comments_url: Optional[str] = None
    owner: Optional[SimpleUser] = None
    truncated: Optional[bool] = None


class GistComment(BaseModel):
    id: int = Field(..., examples=[1])
    node_id: str = Field(..., examples=["MDExOkdpc3RDb21tZW50MQ=="])
    url: AnyUrl = Field(
        ..., examples=["https://api.github.com/gists/a6db0bec360bb87e9418/comments/1"]
    )
    body: constr(max_length=65535) = Field(
        ..., description="The comment text.", examples=["Body of the attachment"]
    )
    user: Optional[SimpleUser] = None
    created_at: AwareDatetime = Field(..., examples=["2011-04-18T23:23:56Z"])
    updated_at: AwareDatetime = Field(..., examples=["2011-04-18T23:23:56Z"])
    author_association: AuthorAssociation


class GistCommit(BaseModel):
    url: AnyUrl = Field(
        ...,
        examples=[
            "https://api.github.com/gists/aa5a315d61ae9438b18d/57a7f021a713b1c5a6a199b54cc514735d2d462f"
        ],
    )
    version: str = Field(..., examples=["57a7f021a713b1c5a6a199b54cc514735d2d462f"])
    user: Optional[SimpleUser] = None
    change_status: ChangeStatus
    committed_at: AwareDatetime = Field(..., examples=["2010-04-14T02:15:15Z"])


class GitignoreTemplate(BaseModel):
    name: str = Field(..., examples=["C"])
    source: str = Field(
        ...,
        examples=[
            "# Object files\n*.o\n\n# Libraries\n*.lib\n*.a\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n"
        ],
    )


class License(BaseModel):
    key: str = Field(..., examples=["mit"])
    name: str = Field(..., examples=["MIT License"])
    spdx_id: Optional[str] = Field(..., examples=["MIT"])
    url: Optional[AnyUrl] = Field(..., examples=["https://api.github.com/licenses/mit"])
    node_id: str = Field(..., examples=["MDc6TGljZW5zZW1pdA=="])
    html_url: AnyUrl = Field(..., examples=["http://choosealicense.com/licenses/mit/"])
    description: str = Field(
        ...,
        examples=[
            "A permissive license that is short and to the point. It lets people do anything with your code with proper attribution and without warranty."
        ],
    )
    implementation: str = Field(
        ...,
        examples=[
            "Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file. Replace [year] with the current year and [fullname] with the name (or names) of the copyright holders."
        ],
    )
    permissions: List[str] = Field(
        ...,
        examples=["commercial-use", "modifications", "distribution", "sublicense", "private-use"],
    )
    conditions: List[str] = Field(..., examples=["include-copyright"])
    limitations: List[str] = Field(..., examples=["no-liability"])
    body: str = Field(
        ...,
        examples=[
            '\n\nThe MIT License (MIT)\n\nCopyright (c) [year] [fullname]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n'
        ],
    )
    featured: bool = Field(..., examples=[True])


class PriceModel(Enum):
    FREE = "FREE"
    FLAT_RATE = "FLAT_RATE"
    PER_UNIT = "PER_UNIT"


class MarketplaceListingPlan(BaseModel):
    url: AnyUrl = Field(..., examples=["https://api.github.com/marketplace_listing/plans/1313"])
    accounts_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/marketplace_listing/plans/1313/accounts"]
    )
    id: int = Field(..., examples=[1313])
    number: int = Field(..., examples=[3])
    name: str = Field(..., examples=["Pro"])
    description: str = Field(..., examples=["A professional-grade CI solution"])
    monthly_price_in_cents: int = Field(..., examples=[1099])
    yearly_price_in_cents: int = Field(..., examples=[11870])
    price_model: PriceModel = Field(..., examples=["FLAT_RATE"])
    has_free_trial: bool = Field(..., examples=[True])
    unit_name: Optional[str] = None
    state: str = Field(..., examples=["published"])
    bullets: List[str] = Field(
        ..., examples=["Up to 25 private repositories", "11 concurrent builds"]
    )


class MarketplacePendingChange(BaseModel):
    is_installed: Optional[bool] = None
    effective_date: Optional[str] = None
    unit_count: Optional[int] = None
    id: Optional[int] = None
    plan: Optional[MarketplaceListingPlan] = None


class MarketplacePurchase1(BaseModel):
    billing_cycle: Optional[str] = None
    next_billing_date: Optional[str] = None
    is_installed: Optional[bool] = None
    unit_count: Optional[int] = None
    on_free_trial: Optional[bool] = None
    free_trial_ends_on: Optional[str] = None
    updated_at: Optional[str] = None
    plan: Optional[MarketplaceListingPlan] = None


class MarketplacePurchase(BaseModel):
    url: str
    type: str
    id: int
    login: str
    organization_billing_email: Optional[str] = None
    email: Optional[str] = None
    marketplace_pending_change: Optional[MarketplacePendingChange] = None
    marketplace_purchase: MarketplacePurchase1


class SshKeyFingerprints(BaseModel):
    SHA256_RSA: Optional[str] = None
    SHA256_DSA: Optional[str] = None
    SHA256_ECDSA: Optional[str] = None
    SHA256_ED25519: Optional[str] = None


class Domains(BaseModel):
    website: Optional[List[str]] = None
    codespaces: Optional[List[str]] = None
    copilot: Optional[List[str]] = None
    packages: Optional[List[str]] = None
    actions: Optional[List[str]] = None


class ApiOverview(BaseModel):
    verifiable_password_authentication: bool = Field(..., examples=[True])
    ssh_key_fingerprints: Optional[SshKeyFingerprints] = None
    ssh_keys: Optional[List[str]] = Field(None, examples=["ssh-ed25519 ABCDEFGHIJKLMNOPQRSTUVWXYZ"])
    hooks: Optional[List[str]] = Field(None, examples=["192.0.2.1"])
    github_enterprise_importer: Optional[List[str]] = Field(None, examples=["192.0.2.1"])
    web: Optional[List[str]] = Field(None, examples=["192.0.2.1"])
    api: Optional[List[str]] = Field(None, examples=["192.0.2.1"])
    git: Optional[List[str]] = Field(None, examples=["192.0.2.1"])
    packages: Optional[List[str]] = Field(None, examples=["192.0.2.1"])
    pages: Optional[List[str]] = Field(None, examples=["192.0.2.1"])
    importer: Optional[List[str]] = Field(None, examples=["192.0.2.1"])
    actions: Optional[List[str]] = Field(None, examples=["192.0.2.1"])
    dependabot: Optional[List[str]] = Field(None, examples=["192.0.2.1"])
    domains: Optional[Domains] = None


class Status(Enum):
    enabled = "enabled"
    disabled = "disabled"


class AdvancedSecurity(BaseModel):
    status: Optional[Status] = None


class DependabotSecurityUpdates(BaseModel):
    status: Optional[Status] = Field(
        None, description="The enablement status of Dependabot security updates for the repository."
    )


class SecretScanning(AdvancedSecurity):
    pass


class SecretScanningPushProtection(AdvancedSecurity):
    pass


class SecurityAndAnalysis(BaseModel):
    advanced_security: Optional[AdvancedSecurity] = None
    dependabot_security_updates: Optional[DependabotSecurityUpdates] = Field(
        None, description="Enable or disable Dependabot security updates for the repository."
    )
    secret_scanning: Optional[SecretScanning] = None
    secret_scanning_push_protection: Optional[SecretScanningPushProtection] = None


class License1(BaseModel):
    key: Optional[str] = None
    name: Optional[str] = None
    spdx_id: Optional[str] = None
    url: Optional[str] = None
    node_id: Optional[str] = None


class MinimalRepository(BaseModel):
    id: int = Field(..., examples=[1296269])
    node_id: str = Field(..., examples=["MDEwOlJlcG9zaXRvcnkxMjk2MjY5"])
    name: str = Field(..., examples=["Hello-World"])
    full_name: str = Field(..., examples=["octocat/Hello-World"])
    owner: SimpleUser
    private: bool
    html_url: AnyUrl = Field(..., examples=["https://github.com/octocat/Hello-World"])
    description: Optional[str] = Field(..., examples=["This your first repo!"])
    fork: bool
    url: AnyUrl = Field(..., examples=["https://api.github.com/repos/octocat/Hello-World"])
    archive_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"]
    )
    assignees_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/assignees{/user}"]
    )
    blobs_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"]
    )
    branches_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/branches{/branch}"]
    )
    collaborators_url: str = Field(
        ...,
        examples=["http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"],
    )
    comments_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/comments{/number}"]
    )
    commits_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/commits{/sha}"]
    )
    compare_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"]
    )
    contents_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/contents/{+path}"]
    )
    contributors_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/contributors"]
    )
    deployments_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/deployments"]
    )
    downloads_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/downloads"]
    )
    events_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/events"]
    )
    forks_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/forks"]
    )
    git_commits_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"]
    )
    git_refs_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"]
    )
    git_tags_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"]
    )
    git_url: Optional[str] = None
    issue_comment_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"]
    )
    issue_events_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"]
    )
    issues_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/issues{/number}"]
    )
    keys_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"]
    )
    labels_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/labels{/name}"]
    )
    languages_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/languages"]
    )
    merges_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/merges"]
    )
    milestones_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/milestones{/number}"]
    )
    notifications_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
        ],
    )
    pulls_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/pulls{/number}"]
    )
    releases_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/releases{/id}"]
    )
    ssh_url: Optional[str] = None
    stargazers_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/stargazers"]
    )
    statuses_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"]
    )
    subscribers_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/subscribers"]
    )
    subscription_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/subscription"]
    )
    tags_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/tags"])
    teams_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/teams"]
    )
    trees_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"]
    )
    clone_url: Optional[str] = None
    mirror_url: Optional[str] = None
    hooks_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/hooks"]
    )
    svn_url: Optional[str] = None
    homepage: Optional[str] = None
    language: Optional[str] = None
    forks_count: Optional[int] = None
    stargazers_count: Optional[int] = None
    watchers_count: Optional[int] = None
    size: Optional[int] = Field(
        None,
        description="The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.",
    )
    default_branch: Optional[str] = None
    open_issues_count: Optional[int] = None
    is_template: Optional[bool] = None
    topics: Optional[List[str]] = None
    has_issues: Optional[bool] = None
    has_projects: Optional[bool] = None
    has_wiki: Optional[bool] = None
    has_pages: Optional[bool] = None
    has_downloads: Optional[bool] = None
    has_discussions: Optional[bool] = None
    archived: Optional[bool] = None
    disabled: Optional[bool] = None
    visibility: Optional[str] = None
    pushed_at: Optional[AwareDatetime] = Field(None, examples=["2011-01-26T19:06:43Z"])
    created_at: Optional[AwareDatetime] = Field(None, examples=["2011-01-26T19:01:12Z"])
    updated_at: Optional[AwareDatetime] = Field(None, examples=["2011-01-26T19:14:43Z"])
    permissions: Optional[Permissions2] = None
    role_name: Optional[str] = Field(None, examples=["admin"])
    temp_clone_token: Optional[str] = None
    delete_branch_on_merge: Optional[bool] = None
    subscribers_count: Optional[int] = None
    network_count: Optional[int] = None
    code_of_conduct: Optional[CodeOfConduct] = None
    license: Optional[License1] = None
    forks: Optional[int] = Field(None, examples=[0])
    open_issues: Optional[int] = Field(None, examples=[0])
    watchers: Optional[int] = Field(None, examples=[0])
    allow_forking: Optional[bool] = None
    web_commit_signoff_required: Optional[bool] = Field(None, examples=[False])
    security_and_analysis: Optional[SecurityAndAnalysis] = None


class Subject(BaseModel):
    title: str
    url: str
    latest_comment_url: str
    type: str


class Thread(BaseModel):
    id: str
    repository: MinimalRepository
    subject: Subject
    reason: str
    unread: bool
    updated_at: str
    last_read_at: Optional[str] = None
    url: str
    subscription_url: str = Field(
        ..., examples=["https://api.github.com/notifications/threads/2/subscription"]
    )


class ThreadSubscription(BaseModel):
    subscribed: bool = Field(..., examples=[True])
    ignored: bool
    reason: Optional[str] = None
    created_at: Optional[AwareDatetime] = Field(..., examples=["2012-10-06T21:34:12Z"])
    url: AnyUrl = Field(
        ..., examples=["https://api.github.com/notifications/threads/1/subscription"]
    )
    thread_url: Optional[AnyUrl] = Field(
        None, examples=["https://api.github.com/notifications/threads/1"]
    )
    repository_url: Optional[AnyUrl] = Field(None, examples=["https://api.github.com/repos/1"])


class OrganizationSimple(BaseModel):
    login: str = Field(..., examples=["github"])
    id: int = Field(..., examples=[1])
    node_id: str = Field(..., examples=["MDEyOk9yZ2FuaXphdGlvbjE="])
    url: AnyUrl = Field(..., examples=["https://api.github.com/orgs/github"])
    repos_url: AnyUrl = Field(..., examples=["https://api.github.com/orgs/github/repos"])
    events_url: AnyUrl = Field(..., examples=["https://api.github.com/orgs/github/events"])
    hooks_url: str = Field(..., examples=["https://api.github.com/orgs/github/hooks"])
    issues_url: str = Field(..., examples=["https://api.github.com/orgs/github/issues"])
    members_url: str = Field(..., examples=["https://api.github.com/orgs/github/members{/member}"])
    public_members_url: str = Field(
        ..., examples=["https://api.github.com/orgs/github/public_members{/member}"]
    )
    avatar_url: str = Field(..., examples=["https://github.com/images/error/octocat_happy.gif"])
    description: Optional[str] = Field(..., examples=["A great organization"])


class Plan1(BaseModel):
    name: str
    space: int
    private_repos: int
    filled_seats: Optional[int] = None
    seats: Optional[int] = None


class OrganizationFull(BaseModel):
    login: str = Field(..., examples=["github"])
    id: int = Field(..., examples=[1])
    node_id: str = Field(..., examples=["MDEyOk9yZ2FuaXphdGlvbjE="])
    url: AnyUrl = Field(..., examples=["https://api.github.com/orgs/github"])
    repos_url: AnyUrl = Field(..., examples=["https://api.github.com/orgs/github/repos"])
    events_url: AnyUrl = Field(..., examples=["https://api.github.com/orgs/github/events"])
    hooks_url: str = Field(..., examples=["https://api.github.com/orgs/github/hooks"])
    issues_url: str = Field(..., examples=["https://api.github.com/orgs/github/issues"])
    members_url: str = Field(..., examples=["https://api.github.com/orgs/github/members{/member}"])
    public_members_url: str = Field(
        ..., examples=["https://api.github.com/orgs/github/public_members{/member}"]
    )
    avatar_url: str = Field(..., examples=["https://github.com/images/error/octocat_happy.gif"])
    description: Optional[str] = Field(..., examples=["A great organization"])
    name: Optional[str] = Field(None, examples=["github"])
    company: Optional[str] = Field(None, examples=["GitHub"])
    blog: Optional[AnyUrl] = Field(None, examples=["https://github.com/blog"])
    location: Optional[str] = Field(None, examples=["San Francisco"])
    email: Optional[EmailStr] = Field(None, examples=["octocat@github.com"])
    twitter_username: Optional[str] = Field(None, examples=["github"])
    is_verified: Optional[bool] = Field(None, examples=[True])
    has_organization_projects: bool = Field(..., examples=[True])
    has_repository_projects: bool = Field(..., examples=[True])
    public_repos: int = Field(..., examples=[2])
    public_gists: int = Field(..., examples=[1])
    followers: int = Field(..., examples=[20])
    following: int = Field(..., examples=[0])
    html_url: AnyUrl = Field(..., examples=["https://github.com/octocat"])
    type: str = Field(..., examples=["Organization"])
    total_private_repos: Optional[int] = Field(None, examples=[100])
    owned_private_repos: Optional[int] = Field(None, examples=[100])
    private_gists: Optional[int] = Field(None, examples=[81])
    disk_usage: Optional[int] = Field(None, examples=[10000])
    collaborators: Optional[int] = Field(None, examples=[8])
    billing_email: Optional[EmailStr] = Field(None, examples=["org@example.com"])
    plan: Optional[Plan1] = None
    default_repository_permission: Optional[str] = None
    members_can_create_repositories: Optional[bool] = Field(None, examples=[True])
    two_factor_requirement_enabled: Optional[bool] = Field(None, examples=[True])
    members_allowed_repository_creation_type: Optional[str] = Field(None, examples=["all"])
    members_can_create_public_repositories: Optional[bool] = Field(None, examples=[True])
    members_can_create_private_repositories: Optional[bool] = Field(None, examples=[True])
    members_can_create_internal_repositories: Optional[bool] = Field(None, examples=[True])
    members_can_create_pages: Optional[bool] = Field(None, examples=[True])
    members_can_create_public_pages: Optional[bool] = Field(None, examples=[True])
    members_can_create_private_pages: Optional[bool] = Field(None, examples=[True])
    members_can_fork_private_repositories: Optional[bool] = Field(None, examples=[False])
    web_commit_signoff_required: Optional[bool] = Field(None, examples=[False])
    advanced_security_enabled_for_new_repositories: Optional[bool] = Field(
        None,
        description="Whether GitHub Advanced Security is enabled for new repositories and repositories transferred to this organization.\n\nThis field is only visible to organization owners or members of a team with the security manager role.",
        examples=[False],
    )
    dependabot_alerts_enabled_for_new_repositories: Optional[bool] = Field(
        None,
        description="Whether GitHub Advanced Security is automatically enabled for new repositories and repositories transferred to\nthis organization.\n\nThis field is only visible to organization owners or members of a team with the security manager role.",
        examples=[False],
    )
    dependabot_security_updates_enabled_for_new_repositories: Optional[bool] = Field(
        None,
        description="Whether dependabot security updates are automatically enabled for new repositories and repositories transferred\nto this organization.\n\nThis field is only visible to organization owners or members of a team with the security manager role.",
        examples=[False],
    )
    dependency_graph_enabled_for_new_repositories: Optional[bool] = Field(
        None,
        description="Whether dependency graph is automatically enabled for new repositories and repositories transferred to this\norganization.\n\nThis field is only visible to organization owners or members of a team with the security manager role.",
        examples=[False],
    )
    secret_scanning_enabled_for_new_repositories: Optional[bool] = Field(
        None,
        description="Whether secret scanning is automatically enabled for new repositories and repositories transferred to this\norganization.\n\nThis field is only visible to organization owners or members of a team with the security manager role.",
        examples=[False],
    )
    secret_scanning_push_protection_enabled_for_new_repositories: Optional[bool] = Field(
        None,
        description="Whether secret scanning push protection is automatically enabled for new repositories and repositories\ntransferred to this organization.\n\nThis field is only visible to organization owners or members of a team with the security manager role.",
        examples=[False],
    )
    secret_scanning_push_protection_custom_link_enabled: Optional[bool] = Field(
        None,
        description="Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.",
        examples=[False],
    )
    secret_scanning_push_protection_custom_link: Optional[str] = Field(
        None,
        description="An optional URL string to display to contributors who are blocked from pushing a secret.",
        examples=["https://github.com/test-org/test-repo/blob/main/README.md"],
    )
    created_at: AwareDatetime = Field(..., examples=["2008-01-14T04:33:35Z"])
    updated_at: AwareDatetime
    archived_at: Optional[AwareDatetime] = None


class ActionsCacheUsageOrgEnterprise(BaseModel):
    total_active_caches_count: int = Field(
        ...,
        description="The count of active caches across all repositories of an enterprise or an organization.",
    )
    total_active_caches_size_in_bytes: int = Field(
        ...,
        description="The total size in bytes of all active cache items across all repositories of an enterprise or an organization.",
    )


class ActionsCacheUsageByRepository(BaseModel):
    full_name: str = Field(
        ...,
        description="The repository owner and name for the cache usage being shown.",
        examples=["octo-org/Hello-World"],
    )
    active_caches_size_in_bytes: int = Field(
        ...,
        description="The sum of the size in bytes of all the active cache items in the repository.",
        examples=[2322142],
    )
    active_caches_count: int = Field(
        ..., description="The number of active caches in the repository.", examples=[3]
    )


class OidcCustomSub(BaseModel):
    include_claim_keys: List[str] = Field(
        ...,
        description="Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.",
    )


class EmptyObject(BaseModel):
    pass
    model_config = ConfigDict(
        extra="forbid",
    )


class EnabledRepositories(Enum):
    all = "all"
    none = "none"
    selected = "selected"


class AllowedActions(Enum):
    all = "all"
    local_only = "local_only"
    selected = "selected"


class SelectedActionsUrl(RootModel[str]):
    root: str = Field(
        ...,
        description="The API URL to use to get or set the actions and reusable workflows that are allowed to run, when `allowed_actions` is set to `selected`.",
    )


class ActionsOrganizationPermissions(BaseModel):
    enabled_repositories: EnabledRepositories
    selected_repositories_url: Optional[str] = Field(
        None,
        description="The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`.",
    )
    allowed_actions: Optional[AllowedActions] = None
    selected_actions_url: Optional[SelectedActionsUrl] = None


class SelectedActions(BaseModel):
    github_owned_allowed: Optional[bool] = Field(
        None,
        description="Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.",
    )
    verified_allowed: Optional[bool] = Field(
        None,
        description="Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators.",
    )
    patterns_allowed: Optional[List[str]] = Field(
        None,
        description="Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.\n\n**Note**: The `patterns_allowed` setting only applies to public repositories.",
    )


class ActionsCanApprovePullRequestReviews(RootModel[bool]):
    root: bool = Field(
        ...,
        description="Whether GitHub Actions can approve pull requests. Enabling this can be a security risk.",
    )


class ActionsGetDefaultWorkflowPermissions(BaseModel):
    default_workflow_permissions: Actions
    can_approve_pull_request_reviews: ActionsCanApprovePullRequestReviews


class ActionsSetDefaultWorkflowPermissions(BaseModel):
    default_workflow_permissions: Optional[Actions] = None
    can_approve_pull_request_reviews: Optional[ActionsCanApprovePullRequestReviews] = None


class Type5(Enum):
    read_only = "read-only"
    custom = "custom"


class RunnerLabel(BaseModel):
    id: Optional[int] = Field(None, description="Unique identifier of the label.")
    name: str = Field(..., description="Name of the label.")
    type: Optional[Type5] = Field(
        None,
        description="The type of label. Read-only labels are applied automatically when the runner is configured.",
    )


class Runner(BaseModel):
    id: int = Field(..., description="The id of the runner.", examples=[5])
    runner_group_id: Optional[int] = Field(
        None, description="The id of the runner group.", examples=[1]
    )
    name: str = Field(..., description="The name of the runner.", examples=["iMac"])
    os: str = Field(..., description="The Operating System of the runner.", examples=["macos"])
    status: str = Field(..., description="The status of the runner.", examples=["online"])
    busy: bool
    labels: List[RunnerLabel]


class RunnerApplication(BaseModel):
    os: str
    architecture: str
    download_url: str
    filename: str
    temp_download_token: Optional[str] = Field(
        None, description="A short lived bearer token used to download the runner, if needed."
    )
    sha256_checksum: Optional[str] = None


class AuthenticationToken(BaseModel):
    token: str = Field(
        ..., description="The token used for authentication", examples=["v1.1f699f1069f60xxx"]
    )
    expires_at: AwareDatetime = Field(
        ..., description="The time this token expires", examples=["2016-07-11T22:14:10Z"]
    )
    permissions: Optional[Dict[str, Any]] = Field(
        None, examples=[{"issues": "read", "deployments": "write"}]
    )
    repositories: Optional[List[Repository]] = Field(
        None, description="The repositories this token has access to"
    )
    single_file: Optional[str] = Field(None, examples=["config.yaml"])
    repository_selection: Optional[RepositorySelection] = Field(
        None,
        description="Describe whether all repositories have been selected or there's a selection involved",
    )


class Visibility(Enum):
    all = "all"
    private = "private"
    selected = "selected"


class OrganizationActionsSecret(BaseModel):
    name: str = Field(..., description="The name of the secret.", examples=["SECRET_TOKEN"])
    created_at: AwareDatetime
    updated_at: AwareDatetime
    visibility: Visibility = Field(..., description="Visibility of a secret")
    selected_repositories_url: Optional[AnyUrl] = Field(
        None, examples=["https://api.github.com/organizations/org/secrets/my_secret/repositories"]
    )


class ActionsPublicKey(BaseModel):
    key_id: str = Field(..., description="The identifier for the key.", examples=["1234567"])
    key: str = Field(
        ...,
        description="The Base64 encoded public key.",
        examples=["hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs="],
    )
    id: Optional[int] = Field(None, examples=[2])
    url: Optional[str] = Field(None, examples=["https://api.github.com/user/keys/2"])
    title: Optional[str] = Field(None, examples=["ssh-rsa AAAAB3NzaC1yc2EAAA"])
    created_at: Optional[str] = Field(None, examples=["2011-01-26T19:01:12Z"])


class OrganizationActionsVariable(BaseModel):
    name: str = Field(..., description="The name of the variable.", examples=["USERNAME"])
    value: str = Field(..., description="The value of the variable.", examples=["octocat"])
    created_at: AwareDatetime = Field(
        ...,
        description="The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.",
        examples=["2019-01-24T22:45:36.000Z"],
    )
    updated_at: AwareDatetime = Field(
        ...,
        description="The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.",
        examples=["2019-01-24T22:45:36.000Z"],
    )
    visibility: Visibility = Field(..., description="Visibility of a variable")
    selected_repositories_url: Optional[AnyUrl] = Field(
        None, examples=["https://api.github.com/organizations/org/variables/USERNAME/repositories"]
    )


class CodeScanningAnalysisToolName(RootModel[str]):
    root: str = Field(
        ..., description="The name of the tool used to generate the code scanning analysis."
    )


class CodeScanningAnalysisToolGuid(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        ...,
        description="The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.",
    )


class CodeScanningAlertStateQuery(Enum):
    open = "open"
    closed = "closed"
    dismissed = "dismissed"
    fixed = "fixed"


class CodeScanningAlertSeverity(Enum):
    critical = "critical"
    high = "high"
    medium = "medium"
    low = "low"
    warning = "warning"
    note = "note"
    error = "error"


class AlertInstancesUrl(RootModel[AnyUrl]):
    root: AnyUrl = Field(
        ..., description="The REST API URL for fetching the list of instances for an alert."
    )


class CodeScanningAlertState(Enum):
    open = "open"
    dismissed = "dismissed"
    fixed = "fixed"


class CodeScanningAlertDismissedReason(Enum):
    NoneType_None = None
    false_positive = "false positive"
    won_t_fix = "won't fix"
    used_in_tests = "used in tests"


class CodeScanningAlertDismissedComment(RootModel[Optional[constr(max_length=280)]]):
    root: Optional[constr(max_length=280)] = Field(
        ..., description="The dismissal comment associated with the dismissal of the alert."
    )


class Severity3(Enum):
    none = "none"
    note = "note"
    warning = "warning"
    error = "error"
    NoneType_None = None


class SecuritySeverityLevel(Enum):
    low = "low"
    medium = "medium"
    high = "high"
    critical = "critical"
    NoneType_None = None


class CodeScanningAlertRuleSummary(BaseModel):
    id: Optional[str] = Field(
        None, description="A unique identifier for the rule used to detect the alert."
    )
    name: Optional[str] = Field(None, description="The name of the rule used to detect the alert.")
    tags: Optional[List[str]] = Field(None, description="A set of tags applicable for the rule.")
    severity: Optional[Severity3] = Field(None, description="The severity of the alert.")
    security_severity_level: Optional[SecuritySeverityLevel] = Field(
        None, description="The security severity of the alert."
    )
    description: Optional[str] = Field(
        None, description="A short description of the rule used to detect the alert."
    )


class CodeScanningAnalysisToolVersion(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        ..., description="The version of the tool used to generate the code scanning analysis."
    )


class CodeScanningAnalysisTool(BaseModel):
    name: Optional[CodeScanningAnalysisToolName] = None
    version: Optional[CodeScanningAnalysisToolVersion] = None
    guid: Optional[CodeScanningAnalysisToolGuid] = None


class CodeScanningRef(RootModel[str]):
    root: str = Field(
        ...,
        description="The Git reference, formatted as `refs/pull/<number>/merge`, `refs/pull/<number>/head`,\n`refs/heads/<branch name>` or simply `<branch name>`.",
    )


class CodeScanningAnalysisAnalysisKey(RootModel[str]):
    root: str = Field(
        ...,
        description="Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.",
    )


class CodeScanningAlertEnvironment(RootModel[str]):
    root: str = Field(
        ...,
        description="Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.",
    )


class CodeScanningAnalysisCategory(RootModel[str]):
    root: str = Field(
        ...,
        description="Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.",
    )


class CodeScanningAlertLocation(BaseModel):
    path: Optional[str] = None
    start_line: Optional[int] = None
    end_line: Optional[int] = None
    start_column: Optional[int] = None
    end_column: Optional[int] = None


class CodeScanningAlertClassification(Enum):
    source = "source"
    generated = "generated"
    test = "test"
    library = "library"
    NoneType_None = None


class Message(BaseModel):
    text: Optional[str] = None


class CodeScanningAlertInstance(BaseModel):
    ref: Optional[CodeScanningRef] = None
    analysis_key: Optional[CodeScanningAnalysisAnalysisKey] = None
    environment: Optional[CodeScanningAlertEnvironment] = None
    category: Optional[CodeScanningAnalysisCategory] = None
    state: Optional[CodeScanningAlertState] = None
    commit_sha: Optional[str] = None
    message: Optional[Message] = None
    location: Optional[CodeScanningAlertLocation] = None
    html_url: Optional[str] = None
    classifications: Optional[List[CodeScanningAlertClassification]] = Field(
        None,
        description="Classifications that have been applied to the file that triggered the alert.\nFor example identifying it as documentation, or a generated file.",
    )


class CodeScanningOrganizationAlertItems(BaseModel):
    number: AlertNumber
    created_at: AlertCreatedAt
    updated_at: Optional[AlertUpdatedAt] = None
    url: AlertUrl
    html_url: AlertHtmlUrl
    instances_url: AlertInstancesUrl
    state: CodeScanningAlertState
    fixed_at: Optional[AlertFixedAt] = None
    dismissed_by: Optional[SimpleUser] = None
    dismissed_at: Optional[AlertDismissedAt] = None
    dismissed_reason: CodeScanningAlertDismissedReason
    dismissed_comment: Optional[CodeScanningAlertDismissedComment] = None
    rule: CodeScanningAlertRuleSummary
    tool: CodeScanningAnalysisTool
    most_recent_instance: CodeScanningAlertInstance
    repository: SimpleRepository


class PrebuildAvailability(Enum):
    none = "none"
    ready = "ready"
    in_progress = "in_progress"
    NoneType_None = None


class CodespaceMachine(BaseModel):
    name: str = Field(..., description="The name of the machine.", examples=["standardLinux"])
    display_name: str = Field(
        ...,
        description="The display name of the machine includes cores, memory, and storage.",
        examples=["4 cores, 16 GB RAM, 64 GB storage"],
    )
    operating_system: str = Field(
        ..., description="The operating system of the machine.", examples=["linux"]
    )
    storage_in_bytes: int = Field(
        ..., description="How much storage is available to the codespace.", examples=[68719476736]
    )
    memory_in_bytes: int = Field(
        ..., description="How much memory is available to the codespace.", examples=[17179869184]
    )
    cpus: int = Field(
        ..., description="How many cores are available to the codespace.", examples=[4]
    )
    prebuild_availability: PrebuildAvailability = Field(
        ...,
        description='Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.',
        examples=["ready"],
    )


class State2(Enum):
    Unknown = "Unknown"
    Created = "Created"
    Queued = "Queued"
    Provisioning = "Provisioning"
    Available = "Available"
    Awaiting = "Awaiting"
    Unavailable = "Unavailable"
    Deleted = "Deleted"
    Moved = "Moved"
    Shutdown = "Shutdown"
    Archived = "Archived"
    Starting = "Starting"
    ShuttingDown = "ShuttingDown"
    Failed = "Failed"
    Exporting = "Exporting"
    Updating = "Updating"
    Rebuilding = "Rebuilding"


class GitStatus(BaseModel):
    ahead: Optional[int] = Field(
        None,
        description="The number of commits the local repository is ahead of the remote.",
        examples=[0],
    )
    behind: Optional[int] = Field(
        None,
        description="The number of commits the local repository is behind the remote.",
        examples=[0],
    )
    has_unpushed_changes: Optional[bool] = Field(
        None, description="Whether the local repository has unpushed changes."
    )
    has_uncommitted_changes: Optional[bool] = Field(
        None, description="Whether the local repository has uncommitted changes."
    )
    ref: Optional[str] = Field(
        None,
        description="The current branch (or SHA if in detached HEAD state) of the local repository.",
        examples=["main"],
    )


class Location(Enum):
    EastUs = "EastUs"
    SouthEastAsia = "SouthEastAsia"
    WestEurope = "WestEurope"
    WestUs2 = "WestUs2"


class RuntimeConstraints(BaseModel):
    allowed_port_privacy_settings: Optional[List[str]] = Field(
        None, description="The privacy settings a user can select from when forwarding a port."
    )


class Codespace(BaseModel):
    id: int = Field(..., examples=[1])
    name: str = Field(
        ...,
        description="Automatically generated name of this codespace.",
        examples=["monalisa-octocat-hello-world-g4wpq6h95q"],
    )
    display_name: Optional[str] = Field(
        None, description="Display name for this codespace.", examples=["bookish space pancake"]
    )
    environment_id: Optional[str] = Field(
        ...,
        description="UUID identifying this codespace's environment.",
        examples=["26a7c758-7299-4a73-b978-5a92a7ae98a0"],
    )
    owner: SimpleUser
    billable_owner: SimpleUser
    repository: MinimalRepository
    machine: Optional[CodespaceMachine] = None
    devcontainer_path: Optional[str] = Field(
        None,
        description="Path to devcontainer.json from repo root used to create Codespace.",
        examples=[".devcontainer/example/devcontainer.json"],
    )
    prebuild: Optional[bool] = Field(
        ..., description="Whether the codespace was created from a prebuild.", examples=[False]
    )
    created_at: AwareDatetime = Field(..., examples=["2011-01-26T19:01:12Z"])
    updated_at: AwareDatetime = Field(..., examples=["2011-01-26T19:01:12Z"])
    last_used_at: AwareDatetime = Field(
        ...,
        description="Last known time this codespace was started.",
        examples=["2011-01-26T19:01:12Z"],
    )
    state: State2 = Field(..., description="State of this codespace.", examples=["Available"])
    url: AnyUrl = Field(..., description="API URL for this codespace.")
    git_status: GitStatus = Field(..., description="Details about the codespace's git repository.")
    location: Location = Field(
        ..., description="The initially assigned location of a new codespace.", examples=["WestUs2"]
    )
    idle_timeout_minutes: Optional[int] = Field(
        ...,
        description="The number of minutes of inactivity after which this codespace will be automatically stopped.",
        examples=[60],
    )
    web_url: AnyUrl = Field(..., description="URL to access this codespace on the web.")
    machines_url: AnyUrl = Field(
        ..., description="API URL to access available alternate machine types for this codespace."
    )
    start_url: AnyUrl = Field(..., description="API URL to start this codespace.")
    stop_url: AnyUrl = Field(..., description="API URL to stop this codespace.")
    publish_url: Optional[AnyUrl] = Field(
        None, description="API URL to publish this codespace to a new repository."
    )
    pulls_url: Optional[AnyUrl] = Field(
        ..., description="API URL for the Pull Request associated with this codespace, if any."
    )
    recent_folders: List[str]
    runtime_constraints: Optional[RuntimeConstraints] = None
    pending_operation: Optional[bool] = Field(
        None,
        description="Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.",
    )
    pending_operation_disabled_reason: Optional[str] = Field(
        None, description="Text to show user when codespace is disabled by a pending operation"
    )
    idle_timeout_notice: Optional[str] = Field(
        None,
        description="Text to show user when codespace idle timeout minutes has been overridden by an organization policy",
    )
    retention_period_minutes: Optional[int] = Field(
        None,
        description="Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).",
        examples=[60],
    )
    retention_expires_at: Optional[AwareDatetime] = Field(
        None,
        description='When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"',
        examples=["2011-01-26T20:01:12Z"],
    )
    last_known_stop_notice: Optional[str] = Field(
        None,
        description="The text to display to a user when a codespace has been stopped for a potentially actionable reason.",
        examples=["you've used 100% of your spending limit for Codespaces"],
    )


class CodespacesOrgSecret(BaseModel):
    name: str = Field(..., description="The name of the secret", examples=["SECRET_NAME"])
    created_at: AwareDatetime = Field(
        ...,
        description="The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.",
    )
    updated_at: AwareDatetime = Field(
        ...,
        description="The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.",
    )
    visibility: Visibility = Field(
        ...,
        description="The type of repositories in the organization that the secret is visible to",
    )
    selected_repositories_url: Optional[AnyUrl] = Field(
        None,
        description="The API URL at which the list of repositories this secret is visible to can be retrieved",
        examples=[
            "https://api.github.com/orgs/ORGANIZATION/codespaces/secrets/SECRET_NAME/repositories"
        ],
    )


class CodespacesPublicKey(ActionsPublicKey):
    pass


class CopilotSeatBreakdown(BaseModel):
    total: Optional[int] = Field(
        None,
        description="The total number of seats being billed for the organization as of the current billing cycle.",
    )
    added_this_cycle: Optional[int] = Field(
        None, description="Seats added during the current billing cycle."
    )
    pending_cancellation: Optional[int] = Field(
        None,
        description="The number of seats that are pending cancellation at the end of the current billing cycle.",
    )
    pending_invitation: Optional[int] = Field(
        None,
        description="The number of seats that have been assigned to users that have not yet accepted an invitation to this organization.",
    )
    active_this_cycle: Optional[int] = Field(
        None,
        description="The number of seats that have used Copilot during the current billing cycle.",
    )
    inactive_this_cycle: Optional[int] = Field(
        None,
        description="The number of seats that have not used Copilot during the current billing cycle.",
    )


class PublicCodeSuggestions(Enum):
    allow = "allow"
    block = "block"
    unconfigured = "unconfigured"
    unknown = "unknown"


class CopilotChat(Enum):
    enabled = "enabled"
    disabled = "disabled"
    unconfigured = "unconfigured"


class SeatManagementSetting(Enum):
    assign_all = "assign_all"
    assign_selected = "assign_selected"
    disabled = "disabled"
    unconfigured = "unconfigured"


class CopilotOrganizationDetails(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    seat_breakdown: CopilotSeatBreakdown
    public_code_suggestions: PublicCodeSuggestions = Field(
        ...,
        description="The organization policy for allowing or disallowing Copilot to make suggestions that match public code.",
    )
    copilot_chat: Optional[CopilotChat] = Field(
        None,
        description="The organization policy for allowing or disallowing organization members to use Copilot Chat within their editor.",
    )
    seat_management_setting: SeatManagementSetting = Field(
        ..., description="The mode of assigning new seats."
    )


class TeamSimple(BaseModel):
    id: int = Field(..., description="Unique identifier of the team", examples=[1])
    node_id: str = Field(..., examples=["MDQ6VGVhbTE="])
    url: AnyUrl = Field(
        ...,
        description="URL for the team",
        examples=["https://api.github.com/organizations/1/team/1"],
    )
    members_url: str = Field(
        ..., examples=["https://api.github.com/organizations/1/team/1/members{/member}"]
    )
    name: str = Field(..., description="Name of the team", examples=["Justice League"])
    description: Optional[str] = Field(
        ..., description="Description of the team", examples=["A great team."]
    )
    permission: str = Field(
        ...,
        description="Permission that the team will have for its repositories",
        examples=["admin"],
    )
    privacy: Optional[str] = Field(
        None, description="The level of privacy this team should have", examples=["closed"]
    )
    notification_setting: Optional[str] = Field(
        None,
        description="The notification setting the team has set",
        examples=["notifications_enabled"],
    )
    html_url: AnyUrl = Field(..., examples=["https://github.com/orgs/rails/teams/core"])
    repositories_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/organizations/1/team/1/repos"]
    )
    slug: str = Field(..., examples=["justice-league"])
    ldap_dn: Optional[str] = Field(
        None,
        description="Distinguished Name (DN) that team maps to within LDAP environment",
        examples=["uid=example,ou=users,dc=github,dc=com"],
    )


class Permissions4(BaseModel):
    pull: bool
    triage: bool
    push: bool
    maintain: bool
    admin: bool


class Team(BaseModel):
    id: int
    node_id: str
    name: str
    slug: str
    description: Optional[str] = None
    privacy: Optional[str] = None
    notification_setting: Optional[str] = None
    permission: str
    permissions: Optional[Permissions4] = None
    url: AnyUrl
    html_url: AnyUrl = Field(..., examples=["https://github.com/orgs/rails/teams/core"])
    members_url: str
    repositories_url: AnyUrl
    parent: Optional[TeamSimple] = None


class Plan2(BaseModel):
    name: Optional[str] = None
    space: Optional[int] = None
    private_repos: Optional[int] = None
    filled_seats: Optional[int] = None
    seats: Optional[int] = None


class Organization(BaseModel):
    login: str = Field(
        ..., description="Unique login name of the organization", examples=["new-org"]
    )
    url: AnyUrl = Field(
        ..., description="URL for the organization", examples=["https://api.github.com/orgs/github"]
    )
    id: int
    node_id: str
    repos_url: AnyUrl
    events_url: AnyUrl
    hooks_url: str
    issues_url: str
    members_url: str
    public_members_url: str
    avatar_url: str
    description: Optional[str] = None
    blog: Optional[AnyUrl] = Field(
        None, description="Display blog url for the organization", examples=["blog.example-org.com"]
    )
    html_url: AnyUrl
    name: Optional[str] = Field(
        None, description="Display name for the organization", examples=["New Org"]
    )
    company: Optional[str] = Field(
        None, description="Display company name for the organization", examples=["Acme corporation"]
    )
    location: Optional[str] = Field(
        None, description="Display location for the organization", examples=["Berlin, Germany"]
    )
    email: Optional[EmailStr] = Field(
        None, description="Display email for the organization", examples=["org@example.com"]
    )
    has_organization_projects: bool = Field(
        ..., description="Specifies if organization projects are enabled for this org"
    )
    has_repository_projects: bool = Field(
        ...,
        description="Specifies if repository projects are enabled for repositories that belong to this org",
    )
    is_verified: Optional[bool] = None
    public_repos: int
    public_gists: int
    followers: int
    following: int
    type: str
    created_at: AwareDatetime
    updated_at: AwareDatetime
    plan: Optional[Plan2] = None


class CopilotSeatDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    assignee: Union[SimpleUser, Team, Organization] = Field(
        ..., description="The assignee that has been granted access to GitHub Copilot."
    )
    assigning_team: Optional[Team] = Field(
        None,
        description="The team that granted access to GitHub Copilot to the assignee. This will be null if the user was assigned a seat individually.",
    )
    pending_cancellation_date: Optional[date] = Field(
        None,
        description="The pending cancellation date for the seat, in `YYYY-MM-DD` format. This will be null unless the assignee's Copilot access has been canceled during the current billing cycle. If the seat has been cancelled, this corresponds to the start of the organization's next billing cycle.",
    )
    last_activity_at: Optional[AwareDatetime] = Field(
        None, description="Timestamp of user's last GitHub Copilot activity, in ISO 8601 format."
    )
    last_activity_editor: Optional[str] = Field(
        None, description="Last editor that was used by the user for a GitHub Copilot completion."
    )
    created_at: AwareDatetime = Field(
        ...,
        description="Timestamp of when the assignee was last granted access to GitHub Copilot, in ISO 8601 format.",
    )
    updated_at: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp of when the assignee's GitHub Copilot access was last updated, in ISO 8601 format.",
    )


class OrganizationDependabotSecret(BaseModel):
    name: str = Field(..., description="The name of the secret.", examples=["SECRET_TOKEN"])
    created_at: AwareDatetime
    updated_at: AwareDatetime
    visibility: Visibility = Field(..., description="Visibility of a secret")
    selected_repositories_url: Optional[AnyUrl] = Field(
        None,
        examples=[
            "https://api.github.com/organizations/org/dependabot/secrets/my_secret/repositories"
        ],
    )


class DependabotPublicKey(BaseModel):
    key_id: str = Field(..., description="The identifier for the key.", examples=["1234567"])
    key: str = Field(
        ...,
        description="The Base64 encoded public key.",
        examples=["hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs="],
    )


class PackageType(Enum):
    npm = "npm"
    maven = "maven"
    rubygems = "rubygems"
    docker = "docker"
    nuget = "nuget"
    container = "container"


class Visibility4(Enum):
    private = "private"
    public = "public"


class Package1(BaseModel):
    id: int = Field(..., description="Unique identifier of the package.", examples=[1])
    name: str = Field(..., description="The name of the package.", examples=["super-linter"])
    package_type: PackageType = Field(..., examples=["docker"])
    url: str = Field(
        ..., examples=["https://api.github.com/orgs/github/packages/container/super-linter"]
    )
    html_url: str = Field(
        ..., examples=["https://github.com/orgs/github/packages/container/package/super-linter"]
    )
    version_count: int = Field(
        ..., description="The number of versions of the package.", examples=[1]
    )
    visibility: Visibility4 = Field(..., examples=["private"])
    owner: Optional[SimpleUser] = None
    repository: Optional[MinimalRepository] = None
    created_at: AwareDatetime
    updated_at: AwareDatetime


class OrganizationInvitation(BaseModel):
    id: int
    login: Optional[str] = None
    email: Optional[str] = None
    role: str
    created_at: str
    failed_at: Optional[str] = None
    failed_reason: Optional[str] = None
    inviter: SimpleUser
    team_count: int
    node_id: str = Field(..., examples=['"MDIyOk9yZ2FuaXphdGlvbkludml0YXRpb24x"'])
    invitation_teams_url: str = Field(
        ..., examples=['"https://api.github.com/organizations/16/invitations/1/teams"']
    )
    invitation_source: Optional[str] = Field(None, examples=['"member"'])


class Config(BaseModel):
    url: Optional[str] = Field(None, examples=['"http://example.com/2"'])
    insecure_ssl: Optional[str] = Field(None, examples=['"0"'])
    content_type: Optional[str] = Field(None, examples=['"form"'])
    secret: Optional[str] = Field(None, examples=['"********"'])


class OrgHook(BaseModel):
    id: int = Field(..., examples=[1])
    url: AnyUrl = Field(..., examples=["https://api.github.com/orgs/octocat/hooks/1"])
    ping_url: AnyUrl = Field(..., examples=["https://api.github.com/orgs/octocat/hooks/1/pings"])
    deliveries_url: Optional[AnyUrl] = Field(
        None, examples=["https://api.github.com/orgs/octocat/hooks/1/deliveries"]
    )
    name: str = Field(..., examples=["web"])
    events: List[str] = Field(..., examples=["push", "pull_request"])
    active: bool = Field(..., examples=[True])
    config: Config
    updated_at: AwareDatetime = Field(..., examples=["2011-09-06T20:39:23Z"])
    created_at: AwareDatetime = Field(..., examples=["2011-09-06T17:26:27Z"])
    type: str


class InteractionGroup(Enum):
    existing_users = "existing_users"
    contributors_only = "contributors_only"
    collaborators_only = "collaborators_only"


class InteractionLimitResponse(BaseModel):
    limit: InteractionGroup
    origin: str = Field(..., examples=["repository"])
    expires_at: AwareDatetime = Field(..., examples=["2018-08-17T04:18:39Z"])


class InteractionExpiry(Enum):
    one_day = "one_day"
    three_days = "three_days"
    one_week = "one_week"
    one_month = "one_month"
    six_months = "six_months"


class InteractionLimit(BaseModel):
    limit: InteractionGroup
    expiry: Optional[InteractionExpiry] = None


class State3(Enum):
    active = "active"
    pending = "pending"


class Role(Enum):
    admin = "admin"
    member = "member"
    billing_manager = "billing_manager"


class Permissions5(BaseModel):
    can_create_repository: bool


class OrgMembership(BaseModel):
    url: AnyUrl = Field(..., examples=["https://api.github.com/orgs/octocat/memberships/defunkt"])
    state: State3 = Field(
        ...,
        description="The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.",
        examples=["active"],
    )
    role: Role = Field(
        ..., description="The user's membership type in the organization.", examples=["admin"]
    )
    organization_url: AnyUrl = Field(..., examples=["https://api.github.com/orgs/octocat"])
    organization: OrganizationSimple
    user: Optional[SimpleUser] = None
    permissions: Optional[Permissions5] = None


class Migration(BaseModel):
    id: int = Field(..., examples=[79])
    owner: Optional[SimpleUser] = None
    guid: str = Field(..., examples=["0b989ba4-242f-11e5-81e1-c7b6966d2516"])
    state: str = Field(..., examples=["pending"])
    lock_repositories: bool = Field(..., examples=[True])
    exclude_metadata: bool
    exclude_git_data: bool
    exclude_attachments: bool
    exclude_releases: bool
    exclude_owner_projects: bool
    org_metadata_only: bool
    repositories: List[Repository] = Field(
        ...,
        description="The repositories included in the migration. Only returned for export migrations.",
    )
    url: AnyUrl = Field(..., examples=["https://api.github.com/orgs/octo-org/migrations/79"])
    created_at: AwareDatetime = Field(..., examples=["2015-07-06T15:33:38-07:00"])
    updated_at: AwareDatetime = Field(..., examples=["2015-07-06T15:33:38-07:00"])
    node_id: str
    archive_url: Optional[AnyUrl] = None
    exclude: Optional[List[str]] = Field(
        None,
        description='Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `"repositories"`.',
    )


class OrganizationFineGrainedPermission(BaseModel):
    name: str
    description: str


class OrganizationRole(BaseModel):
    id: int = Field(..., description="The unique identifier of the role.")
    name: str = Field(..., description="The name of the role.")
    description: Optional[str] = Field(
        None,
        description="A short description about who this role is for or what permissions it grants.",
    )
    permissions: List[str] = Field(..., description="A list of permissions included in this role.")
    organization: Optional[SimpleUser] = None
    created_at: AwareDatetime = Field(..., description="The date and time the role was created.")
    updated_at: AwareDatetime = Field(
        ..., description="The date and time the role was last updated."
    )


class Container(BaseModel):
    tags: List[str]


class Docker(BaseModel):
    tag: Optional[List[str]] = None


class Metadata1(BaseModel):
    package_type: PackageType = Field(..., examples=["docker"])
    container: Optional[Container] = Field(None, title="Container Metadata")
    docker: Optional[Docker] = Field(None, title="Docker Metadata")


class PackageVersion(BaseModel):
    id: int = Field(..., description="Unique identifier of the package version.", examples=[1])
    name: str = Field(..., description="The name of the package version.", examples=["latest"])
    url: str = Field(
        ...,
        examples=[
            "https://api.github.com/orgs/github/packages/container/super-linter/versions/786068"
        ],
    )
    package_html_url: str = Field(
        ..., examples=["https://github.com/orgs/github/packages/container/package/super-linter"]
    )
    html_url: Optional[str] = Field(
        None, examples=["https://github.com/orgs/github/packages/container/super-linter/786068"]
    )
    license: Optional[str] = Field(None, examples=["MIT"])
    description: Optional[str] = None
    created_at: AwareDatetime = Field(..., examples=["2011-04-10T20:09:31Z"])
    updated_at: AwareDatetime = Field(..., examples=["2014-03-03T18:58:10Z"])
    deleted_at: Optional[AwareDatetime] = Field(None, examples=["2014-03-03T18:58:10Z"])
    metadata: Optional[Metadata1] = Field(None, title="Package Version Metadata")


class RepositorySelection4(Enum):
    none = "none"
    all = "all"
    subset = "subset"


class Permissions6(BaseModel):
    organization: Optional[Dict[str, str]] = None
    repository: Optional[Dict[str, str]] = None
    other: Optional[Dict[str, str]] = None


class OrganizationProgrammaticAccessGrantRequest(BaseModel):
    id: int = Field(
        ...,
        description="Unique identifier of the request for access via fine-grained personal access token. The `pat_request_id` used to review PAT requests.",
    )
    reason: Optional[str] = Field(..., description="Reason for requesting access.")
    owner: SimpleUser
    repository_selection: RepositorySelection4 = Field(
        ..., description="Type of repository selection requested."
    )
    repositories_url: str = Field(
        ...,
        description="URL to the list of repositories requested to be accessed via fine-grained personal access token. Should only be followed when `repository_selection` is `subset`.",
    )
    permissions: Permissions6 = Field(
        ..., description="Permissions requested, categorized by type of permission."
    )
    created_at: str = Field(
        ..., description="Date and time when the request for access was created."
    )
    token_expired: bool = Field(
        ..., description="Whether the associated fine-grained personal access token has expired."
    )
    token_expires_at: Optional[str] = Field(
        ...,
        description="Date and time when the associated fine-grained personal access token expires.",
    )
    token_last_used_at: Optional[str] = Field(
        ...,
        description="Date and time when the associated fine-grained personal access token was last used for authentication.",
    )


class OrganizationProgrammaticAccessGrant(BaseModel):
    id: int = Field(
        ...,
        description="Unique identifier of the fine-grained personal access token. The `pat_id` used to get details about an approved fine-grained personal access token.",
    )
    owner: SimpleUser
    repository_selection: RepositorySelection4 = Field(
        ..., description="Type of repository selection requested."
    )
    repositories_url: str = Field(
        ...,
        description="URL to the list of repositories the fine-grained personal access token can access. Only follow when `repository_selection` is `subset`.",
    )
    permissions: Permissions6 = Field(
        ..., description="Permissions requested, categorized by type of permission."
    )
    access_granted_at: str = Field(
        ...,
        description="Date and time when the fine-grained personal access token was approved to access the organization.",
    )
    token_expired: bool = Field(
        ..., description="Whether the associated fine-grained personal access token has expired."
    )
    token_expires_at: Optional[str] = Field(
        ...,
        description="Date and time when the associated fine-grained personal access token expires.",
    )
    token_last_used_at: Optional[str] = Field(
        ...,
        description="Date and time when the associated fine-grained personal access token was last used for authentication.",
    )


class OrganizationPermission(Enum):
    read = "read"
    write = "write"
    admin = "admin"
    none = "none"


class Project(BaseModel):
    owner_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/api-playground/projects-test"]
    )
    url: AnyUrl = Field(..., examples=["https://api.github.com/projects/1002604"])
    html_url: AnyUrl = Field(
        ..., examples=["https://github.com/api-playground/projects-test/projects/12"]
    )
    columns_url: AnyUrl = Field(..., examples=["https://api.github.com/projects/1002604/columns"])
    id: int = Field(..., examples=[1002604])
    node_id: str = Field(..., examples=["MDc6UHJvamVjdDEwMDI2MDQ="])
    name: str = Field(..., description="Name of the project", examples=["Week One Sprint"])
    body: Optional[str] = Field(
        ...,
        description="Body of the project",
        examples=["This project represents the sprint of the first week in January"],
    )
    number: int = Field(..., examples=[1])
    state: str = Field(
        ..., description="State of the project; either 'open' or 'closed'", examples=["open"]
    )
    creator: Optional[SimpleUser] = None
    created_at: AwareDatetime = Field(..., examples=["2011-04-10T20:09:31Z"])
    updated_at: AwareDatetime = Field(..., examples=["2014-03-03T18:58:10Z"])
    organization_permission: Optional[OrganizationPermission] = Field(
        None,
        description="The baseline permission that all organization members have on this project. Only present if owner is an organization.",
    )
    private: Optional[bool] = Field(
        None,
        description="Whether or not this project can be seen by everyone. Only present if owner is an organization.",
    )


class ValueType(Enum):
    string = "string"
    single_select = "single_select"


class AllowedValue(RootModel[constr(max_length=75)]):
    root: constr(max_length=75)


class ValuesEditableBy(Enum):
    org_actors = "org_actors"
    org_and_repo_actors = "org_and_repo_actors"
    NoneType_None = None


class OrgCustomProperty(BaseModel):
    property_name: str = Field(..., description="The name of the property")
    value_type: ValueType = Field(
        ..., description="The type of the value for the property", examples=["single_select"]
    )
    required: Optional[bool] = Field(None, description="Whether the property is required.")
    default_value: Optional[str] = Field(None, description="Default value of the property")
    description: Optional[str] = Field(None, description="Short description of the property")
    allowed_values: Optional[List[AllowedValue]] = Field(
        None,
        description="An ordered list of the allowed values of the property.\nThe property can have up to 200 allowed values.",
        max_length=200,
    )
    values_editable_by: Optional[ValuesEditableBy] = Field(
        None, description="Who can edit the values of the property", examples=["org_actors"]
    )


class CustomPropertyValue(BaseModel):
    property_name: str = Field(..., description="The name of the property")
    value: Union[str, List[str]] = Field(..., description="The value assigned to the property")


class OrgRepoCustomPropertyValues(BaseModel):
    repository_id: int = Field(..., examples=[1296269])
    repository_name: str = Field(..., examples=["Hello-World"])
    repository_full_name: str = Field(..., examples=["octocat/Hello-World"])
    properties: List[CustomPropertyValue] = Field(
        ..., description="List of custom property names and associated values"
    )


class CodeOfConductSimple(BaseModel):
    url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/github/docs/community/code_of_conduct"]
    )
    key: str = Field(..., examples=["citizen_code_of_conduct"])
    name: str = Field(..., examples=["Citizen Code of Conduct"])
    html_url: Optional[AnyUrl] = Field(
        ..., examples=["https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md"]
    )


class Permissions8(BaseModel):
    admin: bool
    maintain: Optional[bool] = None
    push: bool
    triage: Optional[bool] = None
    pull: bool


class FullRepository(BaseModel):
    id: int = Field(..., examples=[1296269])
    node_id: str = Field(..., examples=["MDEwOlJlcG9zaXRvcnkxMjk2MjY5"])
    name: str = Field(..., examples=["Hello-World"])
    full_name: str = Field(..., examples=["octocat/Hello-World"])
    owner: SimpleUser
    private: bool
    html_url: AnyUrl = Field(..., examples=["https://github.com/octocat/Hello-World"])
    description: Optional[str] = Field(..., examples=["This your first repo!"])
    fork: bool
    url: AnyUrl = Field(..., examples=["https://api.github.com/repos/octocat/Hello-World"])
    archive_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"]
    )
    assignees_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/assignees{/user}"]
    )
    blobs_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"]
    )
    branches_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/branches{/branch}"]
    )
    collaborators_url: str = Field(
        ...,
        examples=["http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"],
    )
    comments_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/comments{/number}"]
    )
    commits_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/commits{/sha}"]
    )
    compare_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"]
    )
    contents_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/contents/{+path}"]
    )
    contributors_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/contributors"]
    )
    deployments_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/deployments"]
    )
    downloads_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/downloads"]
    )
    events_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/events"]
    )
    forks_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/forks"]
    )
    git_commits_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"]
    )
    git_refs_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"]
    )
    git_tags_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"]
    )
    git_url: str = Field(..., examples=["git:github.com/octocat/Hello-World.git"])
    issue_comment_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"]
    )
    issue_events_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"]
    )
    issues_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/issues{/number}"]
    )
    keys_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"]
    )
    labels_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/labels{/name}"]
    )
    languages_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/languages"]
    )
    merges_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/merges"]
    )
    milestones_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/milestones{/number}"]
    )
    notifications_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
        ],
    )
    pulls_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/pulls{/number}"]
    )
    releases_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/releases{/id}"]
    )
    ssh_url: str = Field(..., examples=["git@github.com:octocat/Hello-World.git"])
    stargazers_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/stargazers"]
    )
    statuses_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"]
    )
    subscribers_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/subscribers"]
    )
    subscription_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/subscription"]
    )
    tags_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/tags"])
    teams_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/teams"]
    )
    trees_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"]
    )
    clone_url: str = Field(..., examples=["https://github.com/octocat/Hello-World.git"])
    mirror_url: Optional[AnyUrl] = Field(..., examples=["git:git.example.com/octocat/Hello-World"])
    hooks_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/hooks"]
    )
    svn_url: AnyUrl = Field(..., examples=["https://svn.github.com/octocat/Hello-World"])
    homepage: Optional[AnyUrl] = Field(..., examples=["https://github.com"])
    language: Optional[str] = None
    forks_count: int = Field(..., examples=[9])
    stargazers_count: int = Field(..., examples=[80])
    watchers_count: int = Field(..., examples=[80])
    size: int = Field(
        ...,
        description="The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.",
        examples=[108],
    )
    default_branch: str = Field(..., examples=["master"])
    open_issues_count: int = Field(..., examples=[0])
    is_template: Optional[bool] = Field(None, examples=[True])
    topics: Optional[List[str]] = Field(None, examples=["octocat", "atom", "electron", "API"])
    has_issues: bool = Field(..., examples=[True])
    has_projects: bool = Field(..., examples=[True])
    has_wiki: bool = Field(..., examples=[True])
    has_pages: bool
    has_downloads: Optional[bool] = Field(None, examples=[True])
    has_discussions: bool = Field(..., examples=[True])
    archived: bool
    disabled: bool = Field(..., description="Returns whether or not this repository disabled.")
    visibility: Optional[str] = Field(
        None,
        description="The repository visibility: public, private, or internal.",
        examples=["public"],
    )
    pushed_at: AwareDatetime = Field(..., examples=["2011-01-26T19:06:43Z"])
    created_at: AwareDatetime = Field(..., examples=["2011-01-26T19:01:12Z"])
    updated_at: AwareDatetime = Field(..., examples=["2011-01-26T19:14:43Z"])
    permissions: Optional[Permissions8] = None
    allow_rebase_merge: Optional[bool] = Field(None, examples=[True])
    template_repository: Optional[Repository] = None
    temp_clone_token: Optional[str] = None
    allow_squash_merge: Optional[bool] = Field(None, examples=[True])
    allow_auto_merge: Optional[bool] = Field(None, examples=[False])
    delete_branch_on_merge: Optional[bool] = Field(None, examples=[False])
    allow_merge_commit: Optional[bool] = Field(None, examples=[True])
    allow_update_branch: Optional[bool] = Field(None, examples=[True])
    use_squash_pr_title_as_default: Optional[bool] = Field(None, examples=[False])
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
        examples=["PR_TITLE"],
    )
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
        examples=["PR_BODY"],
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n  - `PR_TITLE` - default to the pull request's title.\n  - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
        examples=["PR_TITLE"],
    )
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
        examples=["PR_BODY"],
    )
    allow_forking: Optional[bool] = Field(None, examples=[True])
    web_commit_signoff_required: Optional[bool] = Field(None, examples=[False])
    subscribers_count: int = Field(..., examples=[42])
    network_count: int = Field(..., examples=[0])
    license: Optional[LicenseSimple] = None
    organization: Optional[SimpleUser] = None
    parent: Optional[Repository] = None
    source: Optional[Repository] = None
    forks: int
    master_branch: Optional[str] = None
    open_issues: int
    watchers: int
    anonymous_access_enabled: Optional[bool] = Field(
        True, description="Whether anonymous git access is allowed."
    )
    code_of_conduct: Optional[CodeOfConductSimple] = None
    security_and_analysis: Optional[SecurityAndAnalysis] = None
    custom_properties: Optional[Dict[str, Any]] = Field(
        None,
        description="The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.",
    )


class RepositoryRuleEnforcement(Enum):
    disabled = "disabled"
    active = "active"
    evaluate = "evaluate"


class ActorType(Enum):
    RepositoryRole = "RepositoryRole"
    Team = "Team"
    Integration = "Integration"
    OrganizationAdmin = "OrganizationAdmin"


class BypassMode(Enum):
    always = "always"
    pull_request = "pull_request"


class RepositoryRulesetBypassActor(BaseModel):
    actor_id: int = Field(
        ...,
        description="The ID of the actor that can bypass a ruleset. If `actor_type` is `OrganizationAdmin`, this should be `1`.",
    )
    actor_type: ActorType = Field(..., description="The type of actor that can bypass a ruleset")
    bypass_mode: BypassMode = Field(
        ...,
        description="When the specified actor can bypass the ruleset. `pull_request` means that an actor can only bypass rules on pull requests.",
    )


class RefName(BaseModel):
    include: Optional[List[str]] = Field(
        None,
        description="Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.",
    )
    exclude: Optional[List[str]] = Field(
        None,
        description="Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.",
    )


class RepositoryRulesetConditions(BaseModel):
    ref_name: Optional[RefName] = None


class RepositoryName(BaseModel):
    include: Optional[List[str]] = Field(
        None,
        description="Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.",
    )
    exclude: Optional[List[str]] = Field(
        None,
        description="Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.",
    )
    protected: Optional[bool] = Field(
        None, description="Whether renaming of target repositories is prevented."
    )


class RepositoryRulesetConditionsRepositoryNameTarget(BaseModel):
    repository_name: RepositoryName


class RepositoryId(BaseModel):
    repository_ids: Optional[List[int]] = Field(
        None,
        description="The repository IDs that the ruleset applies to. One of these IDs must match for the condition to pass.",
    )


class RepositoryRulesetConditionsRepositoryIdTarget(BaseModel):
    repository_id: RepositoryId


class OrgRulesetConditions1(
    RepositoryRulesetConditions, RepositoryRulesetConditionsRepositoryNameTarget
):
    pass


class OrgRulesetConditions2(
    RepositoryRulesetConditions, RepositoryRulesetConditionsRepositoryIdTarget
):
    pass


class OrgRulesetConditions(RootModel[Union[OrgRulesetConditions1, OrgRulesetConditions2]]):
    root: Union[OrgRulesetConditions1, OrgRulesetConditions2] = Field(
        ...,
        description="Conditions for an organization ruleset. The conditions object should contain both `repository_name` and `ref_name` properties or both `repository_id` and `ref_name` properties.\n",
        title="Organization ruleset conditions",
    )


class Type6(Enum):
    creation = "creation"


class RepositoryRuleCreation(BaseModel):
    type: Type6


class Type7(Enum):
    update = "update"


class Parameters(BaseModel):
    update_allows_fetch_and_merge: bool = Field(
        ..., description="Branch can pull changes from its upstream repository"
    )


class RepositoryRuleUpdate(BaseModel):
    type: Type7
    parameters: Optional[Parameters] = None


class Type8(Enum):
    deletion = "deletion"


class RepositoryRuleDeletion(BaseModel):
    type: Type8


class Type9(Enum):
    required_linear_history = "required_linear_history"


class RepositoryRuleRequiredLinearHistory(BaseModel):
    type: Type9


class Type10(Enum):
    required_deployments = "required_deployments"


class Parameters1(BaseModel):
    required_deployment_environments: List[str] = Field(
        ...,
        description="The environments that must be successfully deployed to before branches can be merged.",
    )


class RepositoryRuleRequiredDeployments(BaseModel):
    type: Type10
    parameters: Optional[Parameters1] = None


class Type11(Enum):
    required_signatures = "required_signatures"


class RepositoryRuleRequiredSignatures(BaseModel):
    type: Type11


class Type12(Enum):
    pull_request = "pull_request"


class Parameters2(BaseModel):
    dismiss_stale_reviews_on_push: bool = Field(
        ...,
        description="New, reviewable commits pushed will dismiss previous pull request review approvals.",
    )
    require_code_owner_review: bool = Field(
        ...,
        description="Require an approving review in pull requests that modify files that have a designated code owner.",
    )
    require_last_push_approval: bool = Field(
        ...,
        description="Whether the most recent reviewable push must be approved by someone other than the person who pushed it.",
    )
    required_approving_review_count: conint(ge=0, le=10) = Field(
        ...,
        description="The number of approving reviews that are required before a pull request can be merged.",
    )
    required_review_thread_resolution: bool = Field(
        ...,
        description="All conversations on code must be resolved before a pull request can be merged.",
    )


class RepositoryRulePullRequest(BaseModel):
    type: Type12
    parameters: Optional[Parameters2] = None


class RepositoryRuleParamsStatusCheckConfiguration(BaseModel):
    context: str = Field(
        ..., description="The status check context name that must be present on the commit."
    )
    integration_id: Optional[int] = Field(
        None, description="The optional integration ID that this status check must originate from."
    )


class Type13(Enum):
    required_status_checks = "required_status_checks"


class Parameters3(BaseModel):
    required_status_checks: List[RepositoryRuleParamsStatusCheckConfiguration] = Field(
        ..., description="Status checks that are required."
    )
    strict_required_status_checks_policy: bool = Field(
        ...,
        description="Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled.",
    )


class RepositoryRuleRequiredStatusChecks(BaseModel):
    type: Type13
    parameters: Optional[Parameters3] = None


class Type14(Enum):
    non_fast_forward = "non_fast_forward"


class RepositoryRuleNonFastForward(BaseModel):
    type: Type14


class Type15(Enum):
    commit_message_pattern = "commit_message_pattern"


class Operator(Enum):
    starts_with = "starts_with"
    ends_with = "ends_with"
    contains = "contains"
    regex = "regex"


class Parameters4(BaseModel):
    name: Optional[str] = Field(None, description="How this rule will appear to users.")
    negate: Optional[bool] = Field(
        None, description="If true, the rule will fail if the pattern matches."
    )
    operator: Operator = Field(..., description="The operator to use for matching.")
    pattern: str = Field(..., description="The pattern to match with.")


class RepositoryRuleCommitMessagePattern(BaseModel):
    type: Type15
    parameters: Optional[Parameters4] = None


class Type16(Enum):
    commit_author_email_pattern = "commit_author_email_pattern"


class Parameters5(Parameters4):
    pass


class RepositoryRuleCommitAuthorEmailPattern(BaseModel):
    type: Type16
    parameters: Optional[Parameters5] = None


class Type17(Enum):
    committer_email_pattern = "committer_email_pattern"


class Parameters6(Parameters4):
    pass


class RepositoryRuleCommitterEmailPattern(BaseModel):
    type: Type17
    parameters: Optional[Parameters6] = None


class Type18(Enum):
    branch_name_pattern = "branch_name_pattern"


class Parameters7(Parameters4):
    pass


class RepositoryRuleBranchNamePattern(BaseModel):
    type: Type18
    parameters: Optional[Parameters7] = None


class Type19(Enum):
    tag_name_pattern = "tag_name_pattern"


class Parameters8(Parameters4):
    pass


class RepositoryRuleTagNamePattern(BaseModel):
    type: Type19
    parameters: Optional[Parameters8] = None


class RepositoryRuleParamsWorkflowFileReference(BaseModel):
    path: str = Field(..., description="The path to the workflow file")
    ref: Optional[str] = Field(
        None, description="The ref (branch or tag) of the workflow file to use"
    )
    repository_id: int = Field(
        ..., description="The ID of the repository where the workflow is defined"
    )
    sha: Optional[str] = Field(None, description="The commit SHA of the workflow file to use")


class Type20(Enum):
    workflows = "workflows"


class Parameters9(BaseModel):
    workflows: List[RepositoryRuleParamsWorkflowFileReference] = Field(
        ..., description="Workflows that must pass for this rule to pass."
    )


class RepositoryRuleWorkflows(BaseModel):
    type: Type20
    parameters: Optional[Parameters9] = None


class RepositoryRule(
    RootModel[
        Union[
            RepositoryRuleCreation,
            RepositoryRuleUpdate,
            RepositoryRuleDeletion,
            RepositoryRuleRequiredLinearHistory,
            RepositoryRuleRequiredDeployments,
            RepositoryRuleRequiredSignatures,
            RepositoryRulePullRequest,
            RepositoryRuleRequiredStatusChecks,
            RepositoryRuleNonFastForward,
            RepositoryRuleCommitMessagePattern,
            RepositoryRuleCommitAuthorEmailPattern,
            RepositoryRuleCommitterEmailPattern,
            RepositoryRuleBranchNamePattern,
            RepositoryRuleTagNamePattern,
            RepositoryRuleWorkflows,
        ]
    ]
):
    root: Union[
        RepositoryRuleCreation,
        RepositoryRuleUpdate,
        RepositoryRuleDeletion,
        RepositoryRuleRequiredLinearHistory,
        RepositoryRuleRequiredDeployments,
        RepositoryRuleRequiredSignatures,
        RepositoryRulePullRequest,
        RepositoryRuleRequiredStatusChecks,
        RepositoryRuleNonFastForward,
        RepositoryRuleCommitMessagePattern,
        RepositoryRuleCommitAuthorEmailPattern,
        RepositoryRuleCommitterEmailPattern,
        RepositoryRuleBranchNamePattern,
        RepositoryRuleTagNamePattern,
        RepositoryRuleWorkflows,
    ] = Field(..., description="A repository rule.", title="Repository Rule")


class Target(Enum):
    branch = "branch"
    tag = "tag"


class SourceType(Enum):
    Repository = "Repository"
    Organization = "Organization"


class CurrentUserCanBypass(Enum):
    always = "always"
    pull_requests_only = "pull_requests_only"
    never = "never"


class Self(BaseModel):
    href: Optional[str] = Field(None, description="The URL of the ruleset")


class Html(BaseModel):
    href: Optional[str] = Field(None, description="The html URL of the ruleset")


class FieldLinks1(BaseModel):
    self: Optional[Self] = None
    html: Optional[Html] = None


class RepositoryRuleset(BaseModel):
    id: int = Field(..., description="The ID of the ruleset")
    name: str = Field(..., description="The name of the ruleset")
    target: Optional[Target] = Field(None, description="The target of the ruleset")
    source_type: Optional[SourceType] = Field(
        None, description="The type of the source of the ruleset"
    )
    source: str = Field(..., description="The name of the source")
    enforcement: RepositoryRuleEnforcement
    bypass_actors: Optional[List[RepositoryRulesetBypassActor]] = Field(
        None, description="The actors that can bypass the rules in this ruleset"
    )
    current_user_can_bypass: Optional[CurrentUserCanBypass] = Field(
        None,
        description="The bypass type of the user making the API request for this ruleset. This field is only returned when\nquerying the repository-level endpoint.",
    )
    node_id: Optional[str] = None
    field_links: Optional[FieldLinks1] = Field(None, alias="_links")
    conditions: Optional[Union[RepositoryRulesetConditions, OrgRulesetConditions]] = None
    rules: Optional[List[RepositoryRule]] = None
    created_at: Optional[AwareDatetime] = None
    updated_at: Optional[AwareDatetime] = None


class Result(Enum):
    pass_ = "pass"
    fail = "fail"
    bypass = "bypass"


class EvaluationResult(Enum):
    pass_ = "pass"
    fail = "fail"


class RuleSuite(BaseModel):
    id: Optional[int] = Field(None, description="The unique identifier of the rule insight.")
    actor_id: Optional[int] = Field(None, description="The number that identifies the user.")
    actor_name: Optional[str] = Field(None, description="The handle for the GitHub user account.")
    before_sha: Optional[str] = Field(
        None, description="The first commit sha before the push evaluation."
    )
    after_sha: Optional[str] = Field(
        None, description="The last commit sha in the push evaluation."
    )
    ref: Optional[str] = Field(None, description="The ref name that the evaluation ran on.")
    repository_id: Optional[int] = Field(
        None, description="The ID of the repository associated with the rule evaluation."
    )
    repository_name: Optional[str] = Field(
        None, description="The name of the repository without the `.git` extension."
    )
    pushed_at: Optional[AwareDatetime] = Field(None, examples=["2011-01-26T19:06:43Z"])
    result: Optional[Result] = Field(
        None,
        description="The result of the rule evaluations for rules with the `active` enforcement status.",
    )
    evaluation_result: Optional[EvaluationResult] = Field(
        None,
        description="The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`.",
    )


class RuleSuites(RootModel[List[RuleSuite]]):
    root: List[RuleSuite] = Field(..., description="Response", title="Rule Suites")


class RuleSource(BaseModel):
    type: Optional[str] = Field(None, description="The type of rule source.")
    id: Optional[int] = Field(None, description="The ID of the rule source.")
    name: Optional[str] = Field(None, description="The name of the rule source.")


class Enforcement(Enum):
    active = "active"
    evaluate = "evaluate"
    deleted_ruleset = "deleted ruleset"


class RuleEvaluation(BaseModel):
    rule_source: Optional[RuleSource] = None
    enforcement: Optional[Enforcement] = Field(
        None, description="The enforcement level of this rule source."
    )
    result: Optional[EvaluationResult] = Field(
        None, description="The result of the evaluation of the individual rule."
    )
    rule_type: Optional[str] = Field(None, description="The type of rule.")
    details: Optional[str] = Field(
        None, description="Any associated details with the rule evaluation."
    )


class RuleSuite1(BaseModel):
    id: Optional[int] = Field(None, description="The unique identifier of the rule insight.")
    actor_id: Optional[int] = Field(None, description="The number that identifies the user.")
    actor_name: Optional[str] = Field(None, description="The handle for the GitHub user account.")
    before_sha: Optional[str] = Field(
        None, description="The first commit sha before the push evaluation."
    )
    after_sha: Optional[str] = Field(
        None, description="The last commit sha in the push evaluation."
    )
    ref: Optional[str] = Field(None, description="The ref name that the evaluation ran on.")
    repository_id: Optional[int] = Field(
        None, description="The ID of the repository associated with the rule evaluation."
    )
    repository_name: Optional[str] = Field(
        None, description="The name of the repository without the `.git` extension."
    )
    pushed_at: Optional[AwareDatetime] = Field(None, examples=["2011-01-26T19:06:43Z"])
    result: Optional[Result] = Field(
        None,
        description="The result of the rule evaluations for rules with the `active` enforcement status.",
    )
    evaluation_result: Optional[EvaluationResult] = Field(
        None,
        description="The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`.",
    )
    rule_evaluations: Optional[List[RuleEvaluation]] = Field(
        None, description="Details on the evaluated rules."
    )


class Package2(Optional[Package]):
    pass


class RepositoryAdvisoryVulnerability(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    package: Optional[Package2] = Field(
        ..., description="The name of the package affected by the vulnerability."
    )
    vulnerable_version_range: Optional[str] = Field(
        ..., description="The range of the package versions affected by the vulnerability."
    )
    patched_versions: Optional[str] = Field(
        ..., description="The package version(s) that resolve the vulnerability."
    )
    vulnerable_functions: List[str] = Field(
        ..., description="The functions in the package that are affected."
    )


class State4(Enum):
    accepted = "accepted"
    declined = "declined"
    pending = "pending"


class RepositoryAdvisoryCredit(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    user: SimpleUser
    type: SecurityAdvisoryCreditTypes
    state: State4 = Field(..., description="The state of the user's acceptance of the credit.")


class Severity4(Enum):
    critical = "critical"
    high = "high"
    medium = "medium"
    low = "low"
    NoneType_None = None


class Identifier2(Identifier):
    pass


class State5(Enum):
    published = "published"
    closed = "closed"
    withdrawn = "withdrawn"
    draft = "draft"
    triage = "triage"


class Submission(BaseModel):
    accepted: bool = Field(
        ...,
        description="Whether a private vulnerability report was accepted by the repository's administrators.",
    )


class Cvss2(Optional[Cvss]):
    pass


class Cwe2(Cwe):
    pass


class Credit1(BaseModel):
    login: Optional[str] = Field(None, description="The username of the user credited.")
    type: Optional[SecurityAdvisoryCreditTypes] = None


class RepositoryAdvisory(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    ghsa_id: str = Field(..., description="The GitHub Security Advisory ID.")
    cve_id: Optional[str] = Field(
        ..., description="The Common Vulnerabilities and Exposures (CVE) ID."
    )
    url: AnyUrl = Field(..., description="The API URL for the advisory.")
    html_url: AnyUrl = Field(..., description="The URL for the advisory.")
    summary: constr(max_length=1024) = Field(..., description="A short summary of the advisory.")
    description: Optional[constr(max_length=65535)] = Field(
        ..., description="A detailed description of what the advisory entails."
    )
    severity: Severity4 = Field(..., description="The severity of the advisory.")
    author: SimpleUser = Field(..., description="The author of the advisory.")
    publisher: SimpleUser = Field(..., description="The publisher of the advisory.")
    identifiers: List[Identifier2]
    state: State5 = Field(..., description="The state of the advisory.")
    created_at: Optional[AwareDatetime] = Field(
        ..., description="The date and time of when the advisory was created, in ISO 8601 format."
    )
    updated_at: Optional[AwareDatetime] = Field(
        ...,
        description="The date and time of when the advisory was last updated, in ISO 8601 format.",
    )
    published_at: Optional[AwareDatetime] = Field(
        ..., description="The date and time of when the advisory was published, in ISO 8601 format."
    )
    closed_at: Optional[AwareDatetime] = Field(
        ..., description="The date and time of when the advisory was closed, in ISO 8601 format."
    )
    withdrawn_at: Optional[AwareDatetime] = Field(
        ..., description="The date and time of when the advisory was withdrawn, in ISO 8601 format."
    )
    submission: Optional[Submission] = None
    vulnerabilities: List[RepositoryAdvisoryVulnerability]
    cvss: Optional[Cvss2] = None
    cwes: List[Cwe2]
    cwe_ids: List[str] = Field(..., description="A list of only the CWE IDs.")
    credits: List[Credit1]
    credits_detailed: List[RepositoryAdvisoryCredit]
    collaborating_users: List[SimpleUser] = Field(
        ..., description="A list of users that collaborate on the advisory."
    )
    collaborating_teams: List[Team] = Field(
        ..., description="A list of teams that collaborate on the advisory."
    )
    private_fork: SimpleRepository = Field(
        ...,
        description="A temporary private fork of the advisory's repository for collaborating on a fix.",
    )


class MinutesUsedBreakdown(BaseModel):
    UBUNTU: Optional[int] = Field(None, description="Total minutes used on Ubuntu runner machines.")
    MACOS: Optional[int] = Field(None, description="Total minutes used on macOS runner machines.")
    WINDOWS: Optional[int] = Field(
        None, description="Total minutes used on Windows runner machines."
    )
    ubuntu_4_core: Optional[int] = Field(
        None, description="Total minutes used on Ubuntu 4 core runner machines."
    )
    ubuntu_8_core: Optional[int] = Field(
        None, description="Total minutes used on Ubuntu 8 core runner machines."
    )
    ubuntu_16_core: Optional[int] = Field(
        None, description="Total minutes used on Ubuntu 16 core runner machines."
    )
    ubuntu_32_core: Optional[int] = Field(
        None, description="Total minutes used on Ubuntu 32 core runner machines."
    )
    ubuntu_64_core: Optional[int] = Field(
        None, description="Total minutes used on Ubuntu 64 core runner machines."
    )
    windows_4_core: Optional[int] = Field(
        None, description="Total minutes used on Windows 4 core runner machines."
    )
    windows_8_core: Optional[int] = Field(
        None, description="Total minutes used on Windows 8 core runner machines."
    )
    windows_16_core: Optional[int] = Field(
        None, description="Total minutes used on Windows 16 core runner machines."
    )
    windows_32_core: Optional[int] = Field(
        None, description="Total minutes used on Windows 32 core runner machines."
    )
    windows_64_core: Optional[int] = Field(
        None, description="Total minutes used on Windows 64 core runner machines."
    )
    macos_12_core: Optional[int] = Field(
        None, description="Total minutes used on macOS 12 core runner machines."
    )
    total: Optional[int] = Field(None, description="Total minutes used on all runner machines.")


class ActionsBillingUsage(BaseModel):
    total_minutes_used: int = Field(
        ..., description="The sum of the free and paid GitHub Actions minutes used."
    )
    total_paid_minutes_used: int = Field(
        ..., description="The total paid GitHub Actions minutes used."
    )
    included_minutes: int = Field(
        ..., description="The amount of free GitHub Actions minutes available."
    )
    minutes_used_breakdown: MinutesUsedBreakdown


class PackagesBillingUsage(BaseModel):
    total_gigabytes_bandwidth_used: int = Field(
        ..., description="Sum of the free and paid storage space (GB) for GitHuub Packages."
    )
    total_paid_gigabytes_bandwidth_used: int = Field(
        ..., description="Total paid storage space (GB) for GitHuub Packages."
    )
    included_gigabytes_bandwidth: int = Field(
        ..., description="Free storage space (GB) for GitHub Packages."
    )


class CombinedBillingUsage(BaseModel):
    days_left_in_billing_cycle: int = Field(
        ..., description="Numbers of days left in billing cycle."
    )
    estimated_paid_storage_for_month: int = Field(
        ..., description="Estimated storage space (GB) used in billing cycle."
    )
    estimated_storage_for_month: int = Field(
        ..., description="Estimated sum of free and paid storage space (GB) used in billing cycle."
    )


class Plan3(Plan1):
    pass


class TeamOrganization(BaseModel):
    login: str = Field(..., examples=["github"])
    id: int = Field(..., examples=[1])
    node_id: str = Field(..., examples=["MDEyOk9yZ2FuaXphdGlvbjE="])
    url: AnyUrl = Field(..., examples=["https://api.github.com/orgs/github"])
    repos_url: AnyUrl = Field(..., examples=["https://api.github.com/orgs/github/repos"])
    events_url: AnyUrl = Field(..., examples=["https://api.github.com/orgs/github/events"])
    hooks_url: str = Field(..., examples=["https://api.github.com/orgs/github/hooks"])
    issues_url: str = Field(..., examples=["https://api.github.com/orgs/github/issues"])
    members_url: str = Field(..., examples=["https://api.github.com/orgs/github/members{/member}"])
    public_members_url: str = Field(
        ..., examples=["https://api.github.com/orgs/github/public_members{/member}"]
    )
    avatar_url: str = Field(..., examples=["https://github.com/images/error/octocat_happy.gif"])
    description: Optional[str] = Field(..., examples=["A great organization"])
    name: Optional[str] = Field(None, examples=["github"])
    company: Optional[str] = Field(None, examples=["GitHub"])
    blog: Optional[AnyUrl] = Field(None, examples=["https://github.com/blog"])
    location: Optional[str] = Field(None, examples=["San Francisco"])
    email: Optional[EmailStr] = Field(None, examples=["octocat@github.com"])
    twitter_username: Optional[str] = Field(None, examples=["github"])
    is_verified: Optional[bool] = Field(None, examples=[True])
    has_organization_projects: bool = Field(..., examples=[True])
    has_repository_projects: bool = Field(..., examples=[True])
    public_repos: int = Field(..., examples=[2])
    public_gists: int = Field(..., examples=[1])
    followers: int = Field(..., examples=[20])
    following: int = Field(..., examples=[0])
    html_url: AnyUrl = Field(..., examples=["https://github.com/octocat"])
    created_at: AwareDatetime = Field(..., examples=["2008-01-14T04:33:35Z"])
    type: str = Field(..., examples=["Organization"])
    total_private_repos: Optional[int] = Field(None, examples=[100])
    owned_private_repos: Optional[int] = Field(None, examples=[100])
    private_gists: Optional[int] = Field(None, examples=[81])
    disk_usage: Optional[int] = Field(None, examples=[10000])
    collaborators: Optional[int] = Field(None, examples=[8])
    billing_email: Optional[EmailStr] = Field(None, examples=["org@example.com"])
    plan: Optional[Plan3] = None
    default_repository_permission: Optional[str] = None
    members_can_create_repositories: Optional[bool] = Field(None, examples=[True])
    two_factor_requirement_enabled: Optional[bool] = Field(None, examples=[True])
    members_allowed_repository_creation_type: Optional[str] = Field(None, examples=["all"])
    members_can_create_public_repositories: Optional[bool] = Field(None, examples=[True])
    members_can_create_private_repositories: Optional[bool] = Field(None, examples=[True])
    members_can_create_internal_repositories: Optional[bool] = Field(None, examples=[True])
    members_can_create_pages: Optional[bool] = Field(None, examples=[True])
    members_can_create_public_pages: Optional[bool] = Field(None, examples=[True])
    members_can_create_private_pages: Optional[bool] = Field(None, examples=[True])
    members_can_fork_private_repositories: Optional[bool] = Field(None, examples=[False])
    web_commit_signoff_required: Optional[bool] = Field(None, examples=[False])
    updated_at: AwareDatetime
    archived_at: Optional[AwareDatetime] = None


class Privacy(Enum):
    closed = "closed"
    secret = "secret"


class NotificationSetting(Enum):
    notifications_enabled = "notifications_enabled"
    notifications_disabled = "notifications_disabled"


class TeamFull(BaseModel):
    id: int = Field(..., description="Unique identifier of the team", examples=[42])
    node_id: str = Field(..., examples=["MDQ6VGVhbTE="])
    url: AnyUrl = Field(
        ...,
        description="URL for the team",
        examples=["https://api.github.com/organizations/1/team/1"],
    )
    html_url: AnyUrl = Field(..., examples=["https://github.com/orgs/rails/teams/core"])
    name: str = Field(..., description="Name of the team", examples=["Developers"])
    slug: str = Field(..., examples=["justice-league"])
    description: Optional[str] = Field(..., examples=["A great team."])
    privacy: Optional[Privacy] = Field(
        None, description="The level of privacy this team should have", examples=["closed"]
    )
    notification_setting: Optional[NotificationSetting] = Field(
        None,
        description="The notification setting the team has set",
        examples=["notifications_enabled"],
    )
    permission: str = Field(
        ...,
        description="Permission that the team will have for its repositories",
        examples=["push"],
    )
    members_url: str = Field(
        ..., examples=["https://api.github.com/organizations/1/team/1/members{/member}"]
    )
    repositories_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/organizations/1/team/1/repos"]
    )
    parent: Optional[TeamSimple] = None
    members_count: int = Field(..., examples=[3])
    repos_count: int = Field(..., examples=[10])
    created_at: AwareDatetime = Field(..., examples=["2017-07-14T16:53:42Z"])
    updated_at: AwareDatetime = Field(..., examples=["2017-08-17T12:37:15Z"])
    organization: TeamOrganization
    ldap_dn: Optional[str] = Field(
        None,
        description="Distinguished Name (DN) that team maps to within LDAP environment",
        examples=["uid=example,ou=users,dc=github,dc=com"],
    )


class TeamDiscussion(BaseModel):
    author: Optional[SimpleUser] = None
    body: str = Field(
        ...,
        description="The main text of the discussion.",
        examples=["Please suggest improvements to our workflow in comments."],
    )
    body_html: str = Field(
        ..., examples=["<p>Hi! This is an area for us to collaborate as a team</p>"]
    )
    body_version: str = Field(
        ...,
        description="The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.",
        examples=["0307116bbf7ced493b8d8a346c650b71"],
    )
    comments_count: int = Field(..., examples=[0])
    comments_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/organizations/1/team/2343027/discussions/1/comments"]
    )
    created_at: AwareDatetime = Field(..., examples=["2018-01-25T18:56:31Z"])
    last_edited_at: Optional[AwareDatetime] = None
    html_url: AnyUrl = Field(
        ..., examples=["https://github.com/orgs/github/teams/justice-league/discussions/1"]
    )
    node_id: str = Field(..., examples=["MDE0OlRlYW1EaXNjdXNzaW9uMQ=="])
    number: int = Field(
        ..., description="The unique sequence number of a team discussion.", examples=[42]
    )
    pinned: bool = Field(
        ...,
        description="Whether or not this discussion should be pinned for easy retrieval.",
        examples=[True],
    )
    private: bool = Field(
        ...,
        description="Whether or not this discussion should be restricted to team members and organization owners.",
        examples=[True],
    )
    team_url: AnyUrl = Field(..., examples=["https://api.github.com/organizations/1/team/2343027"])
    title: str = Field(
        ...,
        description="The title of the discussion.",
        examples=["How can we improve our workflow?"],
    )
    updated_at: AwareDatetime = Field(..., examples=["2018-01-25T18:56:31Z"])
    url: AnyUrl = Field(
        ..., examples=["https://api.github.com/organizations/1/team/2343027/discussions/1"]
    )
    reactions: Optional[ReactionRollup] = None


class TeamDiscussionComment(BaseModel):
    author: Optional[SimpleUser] = None
    body: str = Field(
        ..., description="The main text of the comment.", examples=["I agree with this suggestion."]
    )
    body_html: str = Field(..., examples=["<p>Do you like apples?</p>"])
    body_version: str = Field(
        ...,
        description="The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.",
        examples=["0307116bbf7ced493b8d8a346c650b71"],
    )
    created_at: AwareDatetime = Field(..., examples=["2018-01-15T23:53:58Z"])
    last_edited_at: Optional[AwareDatetime] = None
    discussion_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/organizations/1/team/2403582/discussions/1"]
    )
    html_url: AnyUrl = Field(
        ...,
        examples=["https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1"],
    )
    node_id: str = Field(..., examples=["MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE="])
    number: int = Field(
        ..., description="The unique sequence number of a team discussion comment.", examples=[42]
    )
    updated_at: AwareDatetime = Field(..., examples=["2018-01-15T23:53:58Z"])
    url: AnyUrl = Field(
        ...,
        examples=["https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1"],
    )
    reactions: Optional[ReactionRollup] = None


class Content(Enum):
    field_1 = "+1"
    field_1_1 = "-1"
    laugh = "laugh"
    confused = "confused"
    heart = "heart"
    hooray = "hooray"
    rocket = "rocket"
    eyes = "eyes"


class Reaction(BaseModel):
    id: int = Field(..., examples=[1])
    node_id: str = Field(..., examples=["MDg6UmVhY3Rpb24x"])
    user: Optional[SimpleUser] = None
    content: Content = Field(..., description="The reaction to use", examples=["heart"])
    created_at: AwareDatetime = Field(..., examples=["2016-05-20T20:09:31Z"])


class Role1(Enum):
    member = "member"
    maintainer = "maintainer"


class TeamMembership(BaseModel):
    url: AnyUrl
    role: Role1 = Field(..., description="The role of the user in the team.", examples=["member"])
    state: State3 = Field(..., description="The state of the user's membership in the team.")


class Permissions9(BaseModel):
    read: bool
    write: bool
    admin: bool


class TeamProject(BaseModel):
    owner_url: str
    url: str
    html_url: str
    columns_url: str
    id: int
    node_id: str
    name: str
    body: Optional[str] = None
    number: int
    state: str
    creator: SimpleUser
    created_at: str
    updated_at: str
    organization_permission: Optional[str] = Field(
        None,
        description="The organization permission for this project. Only present when owner is an organization.",
    )
    private: Optional[bool] = Field(
        None,
        description="Whether the project is private or not. Only present when owner is an organization.",
    )
    permissions: Permissions9


class Permissions10(Permissions1):
    pass


class TeamRepository(BaseModel):
    id: int = Field(..., description="Unique identifier of the repository", examples=[42])
    node_id: str = Field(..., examples=["MDEwOlJlcG9zaXRvcnkxMjk2MjY5"])
    name: str = Field(..., description="The name of the repository.", examples=["Team Environment"])
    full_name: str = Field(..., examples=["octocat/Hello-World"])
    license: Optional[LicenseSimple] = None
    forks: int
    permissions: Optional[Permissions10] = None
    role_name: Optional[str] = Field(None, examples=["admin"])
    owner: Optional[SimpleUser] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    html_url: AnyUrl = Field(..., examples=["https://github.com/octocat/Hello-World"])
    description: Optional[str] = Field(..., examples=["This your first repo!"])
    fork: bool
    url: AnyUrl = Field(..., examples=["https://api.github.com/repos/octocat/Hello-World"])
    archive_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"]
    )
    assignees_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/assignees{/user}"]
    )
    blobs_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"]
    )
    branches_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/branches{/branch}"]
    )
    collaborators_url: str = Field(
        ...,
        examples=["http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"],
    )
    comments_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/comments{/number}"]
    )
    commits_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/commits{/sha}"]
    )
    compare_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"]
    )
    contents_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/contents/{+path}"]
    )
    contributors_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/contributors"]
    )
    deployments_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/deployments"]
    )
    downloads_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/downloads"]
    )
    events_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/events"]
    )
    forks_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/forks"]
    )
    git_commits_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"]
    )
    git_refs_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"]
    )
    git_tags_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"]
    )
    git_url: str = Field(..., examples=["git:github.com/octocat/Hello-World.git"])
    issue_comment_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"]
    )
    issue_events_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"]
    )
    issues_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/issues{/number}"]
    )
    keys_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"]
    )
    labels_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/labels{/name}"]
    )
    languages_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/languages"]
    )
    merges_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/merges"]
    )
    milestones_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/milestones{/number}"]
    )
    notifications_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
        ],
    )
    pulls_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/pulls{/number}"]
    )
    releases_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/releases{/id}"]
    )
    ssh_url: str = Field(..., examples=["git@github.com:octocat/Hello-World.git"])
    stargazers_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/stargazers"]
    )
    statuses_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"]
    )
    subscribers_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/subscribers"]
    )
    subscription_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/subscription"]
    )
    tags_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/tags"])
    teams_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/teams"]
    )
    trees_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"]
    )
    clone_url: str = Field(..., examples=["https://github.com/octocat/Hello-World.git"])
    mirror_url: Optional[AnyUrl] = Field(..., examples=["git:git.example.com/octocat/Hello-World"])
    hooks_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/hooks"]
    )
    svn_url: AnyUrl = Field(..., examples=["https://svn.github.com/octocat/Hello-World"])
    homepage: Optional[AnyUrl] = Field(..., examples=["https://github.com"])
    language: Optional[str] = None
    forks_count: int = Field(..., examples=[9])
    stargazers_count: int = Field(..., examples=[80])
    watchers_count: int = Field(..., examples=[80])
    size: int = Field(..., examples=[108])
    default_branch: str = Field(
        ..., description="The default branch of the repository.", examples=["master"]
    )
    open_issues_count: int = Field(..., examples=[0])
    is_template: Optional[bool] = Field(
        False,
        description="Whether this repository acts as a template that can be used to generate new repositories.",
        examples=[True],
    )
    topics: Optional[List[str]] = None
    has_issues: bool = Field(..., description="Whether issues are enabled.", examples=[True])
    has_projects: bool = Field(..., description="Whether projects are enabled.", examples=[True])
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.", examples=[True])
    has_pages: bool
    has_downloads: bool = Field(..., description="Whether downloads are enabled.", examples=[True])
    archived: bool = Field(..., description="Whether the repository is archived.")
    disabled: bool = Field(..., description="Returns whether or not this repository disabled.")
    visibility: Optional[str] = Field(
        "public", description="The repository visibility: public, private, or internal."
    )
    pushed_at: Optional[AwareDatetime] = Field(..., examples=["2011-01-26T19:06:43Z"])
    created_at: Optional[AwareDatetime] = Field(..., examples=["2011-01-26T19:01:12Z"])
    updated_at: Optional[AwareDatetime] = Field(..., examples=["2011-01-26T19:14:43Z"])
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests.", examples=[True]
    )
    temp_clone_token: Optional[str] = None
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests.", examples=[True]
    )
    allow_auto_merge: Optional[bool] = Field(
        False,
        description="Whether to allow Auto-merge to be used on pull requests.",
        examples=[False],
    )
    delete_branch_on_merge: Optional[bool] = Field(
        False,
        description="Whether to delete head branches when pull requests are merged",
        examples=[False],
    )
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests.", examples=[True]
    )
    allow_forking: Optional[bool] = Field(
        False, description="Whether to allow forking this repo", examples=[False]
    )
    web_commit_signoff_required: Optional[bool] = Field(
        False,
        description="Whether to require contributors to sign off on web-based commits",
        examples=[False],
    )
    subscribers_count: Optional[int] = None
    network_count: Optional[int] = None
    open_issues: int
    watchers: int
    master_branch: Optional[str] = None


class ProjectCard(BaseModel):
    url: AnyUrl = Field(..., examples=["https://api.github.com/projects/columns/cards/1478"])
    id: int = Field(..., description="The project card's ID", examples=[42])
    node_id: str = Field(..., examples=["MDExOlByb2plY3RDYXJkMTQ3OA=="])
    note: Optional[str] = Field(..., examples=["Add payload for delete Project column"])
    creator: Optional[SimpleUser] = None
    created_at: AwareDatetime = Field(..., examples=["2016-09-05T14:21:06Z"])
    updated_at: AwareDatetime = Field(..., examples=["2016-09-05T14:20:22Z"])
    archived: Optional[bool] = Field(
        None, description="Whether or not the card is archived", examples=[False]
    )
    column_name: Optional[str] = None
    project_id: Optional[str] = None
    column_url: AnyUrl = Field(..., examples=["https://api.github.com/projects/columns/367"])
    content_url: Optional[AnyUrl] = Field(
        None, examples=["https://api.github.com/repos/api-playground/projects-test/issues/3"]
    )
    project_url: AnyUrl = Field(..., examples=["https://api.github.com/projects/120"])


class ProjectColumn(BaseModel):
    url: AnyUrl = Field(..., examples=["https://api.github.com/projects/columns/367"])
    project_url: AnyUrl = Field(..., examples=["https://api.github.com/projects/120"])
    cards_url: AnyUrl = Field(..., examples=["https://api.github.com/projects/columns/367/cards"])
    id: int = Field(..., description="The unique identifier of the project column", examples=[42])
    node_id: str = Field(..., examples=["MDEzOlByb2plY3RDb2x1bW4zNjc="])
    name: str = Field(..., description="Name of the project column", examples=["Remaining tasks"])
    created_at: AwareDatetime = Field(..., examples=["2016-09-05T14:18:44Z"])
    updated_at: AwareDatetime = Field(..., examples=["2016-09-05T14:22:28Z"])


class ProjectCollaboratorPermission(BaseModel):
    permission: str
    user: Optional[SimpleUser] = None


class RateLimit(BaseModel):
    limit: int
    remaining: int
    reset: int
    used: int


class Resources(BaseModel):
    core: RateLimit
    graphql: Optional[RateLimit] = None
    search: RateLimit
    code_search: Optional[RateLimit] = None
    source_import: Optional[RateLimit] = None
    integration_manifest: Optional[RateLimit] = None
    code_scanning_upload: Optional[RateLimit] = None
    actions_runner_registration: Optional[RateLimit] = None
    scim: Optional[RateLimit] = None
    dependency_snapshots: Optional[RateLimit] = None


class RateLimitOverview(BaseModel):
    resources: Resources
    rate: RateLimit


class WorkflowRun(BaseModel):
    id: Optional[int] = Field(None, examples=[10])
    repository_id: Optional[int] = Field(None, examples=[42])
    head_repository_id: Optional[int] = Field(None, examples=[42])
    head_branch: Optional[str] = Field(None, examples=["main"])
    head_sha: Optional[str] = Field(None, examples=["009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"])


class Artifact(BaseModel):
    id: int = Field(..., examples=[5])
    node_id: str = Field(..., examples=["MDEwOkNoZWNrU3VpdGU1"])
    name: str = Field(
        ..., description="The name of the artifact.", examples=["AdventureWorks.Framework"]
    )
    size_in_bytes: int = Field(
        ..., description="The size in bytes of the artifact.", examples=[12345]
    )
    url: str = Field(
        ..., examples=["https://api.github.com/repos/github/hello-world/actions/artifacts/5"]
    )
    archive_download_url: str = Field(
        ..., examples=["https://api.github.com/repos/github/hello-world/actions/artifacts/5/zip"]
    )
    expired: bool = Field(..., description="Whether or not the artifact has expired.")
    created_at: Optional[AwareDatetime] = None
    expires_at: Optional[AwareDatetime] = None
    updated_at: Optional[AwareDatetime] = None
    workflow_run: Optional[WorkflowRun] = None


class ActionsCach(BaseModel):
    id: Optional[int] = Field(None, examples=[2])
    ref: Optional[str] = Field(None, examples=["refs/heads/main"])
    key: Optional[str] = Field(
        None, examples=["Linux-node-958aff96db2d75d67787d1e634ae70b659de937b"]
    )
    version: Optional[str] = Field(
        None, examples=["73885106f58cc52a7df9ec4d4a5622a5614813162cb516c759a30af6bf56e6f0"]
    )
    last_accessed_at: Optional[AwareDatetime] = Field(None, examples=["2019-01-24T22:45:36.000Z"])
    created_at: Optional[AwareDatetime] = Field(None, examples=["2019-01-24T22:45:36.000Z"])
    size_in_bytes: Optional[int] = Field(None, examples=[1024])


class ActionsCacheList(BaseModel):
    total_count: int = Field(..., description="Total number of caches", examples=[2])
    actions_caches: List[ActionsCach] = Field(..., description="Array of caches")


class Status4(Enum):
    queued = "queued"
    in_progress = "in_progress"
    completed = "completed"
    waiting = "waiting"


class Conclusion(Enum):
    success = "success"
    failure = "failure"
    neutral = "neutral"
    cancelled = "cancelled"
    skipped = "skipped"
    timed_out = "timed_out"
    action_required = "action_required"
    NoneType_None = None


class Status5(Enum):
    queued = "queued"
    in_progress = "in_progress"
    completed = "completed"


class Step(BaseModel):
    status: Status5 = Field(
        ...,
        description="The phase of the lifecycle that the job is currently in.",
        examples=["queued"],
    )
    conclusion: Optional[str] = Field(
        ..., description="The outcome of the job.", examples=["success"]
    )
    name: str = Field(..., description="The name of the job.", examples=["test-coverage"])
    number: int = Field(..., examples=[1])
    started_at: Optional[AwareDatetime] = Field(
        None,
        description="The time that the step started, in ISO 8601 format.",
        examples=["2019-08-08T08:00:00-07:00"],
    )
    completed_at: Optional[AwareDatetime] = Field(
        None,
        description="The time that the job finished, in ISO 8601 format.",
        examples=["2019-08-08T08:00:00-07:00"],
    )


class Job(BaseModel):
    id: int = Field(..., description="The id of the job.", examples=[21])
    run_id: int = Field(..., description="The id of the associated workflow run.", examples=[5])
    run_url: str = Field(
        ..., examples=["https://api.github.com/repos/github/hello-world/actions/runs/5"]
    )
    run_attempt: Optional[int] = Field(
        None,
        description="Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run.",
        examples=[1],
    )
    node_id: str = Field(..., examples=["MDg6Q2hlY2tSdW40"])
    head_sha: str = Field(
        ...,
        description="The SHA of the commit that is being run.",
        examples=["009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"],
    )
    url: str = Field(
        ..., examples=["https://api.github.com/repos/github/hello-world/actions/jobs/21"]
    )
    html_url: Optional[str] = Field(..., examples=["https://github.com/github/hello-world/runs/4"])
    status: Status4 = Field(
        ...,
        description="The phase of the lifecycle that the job is currently in.",
        examples=["queued"],
    )
    conclusion: Conclusion = Field(..., description="The outcome of the job.", examples=["success"])
    created_at: AwareDatetime = Field(
        ...,
        description="The time that the job created, in ISO 8601 format.",
        examples=["2019-08-08T08:00:00-07:00"],
    )
    started_at: AwareDatetime = Field(
        ...,
        description="The time that the job started, in ISO 8601 format.",
        examples=["2019-08-08T08:00:00-07:00"],
    )
    completed_at: Optional[AwareDatetime] = Field(
        ...,
        description="The time that the job finished, in ISO 8601 format.",
        examples=["2019-08-08T08:00:00-07:00"],
    )
    name: str = Field(..., description="The name of the job.", examples=["test-coverage"])
    steps: Optional[List[Step]] = Field(None, description="Steps in this job.")
    check_run_url: str = Field(
        ..., examples=["https://api.github.com/repos/github/hello-world/check-runs/4"]
    )
    labels: List[str] = Field(
        ...,
        description='Labels for the workflow job. Specified by the "runs_on" attribute in the action\'s workflow file.',
        examples=["self-hosted", "foo", "bar"],
    )
    runner_id: Optional[int] = Field(
        ...,
        description="The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)",
        examples=[1],
    )
    runner_name: Optional[str] = Field(
        ...,
        description="The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)",
        examples=["my runner"],
    )
    runner_group_id: Optional[int] = Field(
        ...,
        description="The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)",
        examples=[2],
    )
    runner_group_name: Optional[str] = Field(
        ...,
        description="The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)",
        examples=["my runner group"],
    )
    workflow_name: Optional[str] = Field(
        ..., description="The name of the workflow.", examples=["Build"]
    )
    head_branch: Optional[str] = Field(
        ..., description="The name of the current branch.", examples=["main"]
    )


class OidcCustomSubRepo(BaseModel):
    use_default: bool = Field(
        ...,
        description="Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored.",
    )
    include_claim_keys: Optional[List[str]] = Field(
        None,
        description="Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.",
    )


class ActionsSecret(BaseModel):
    name: str = Field(..., description="The name of the secret.", examples=["SECRET_TOKEN"])
    created_at: AwareDatetime
    updated_at: AwareDatetime


class ActionsVariable(BaseModel):
    name: str = Field(..., description="The name of the variable.", examples=["USERNAME"])
    value: str = Field(..., description="The value of the variable.", examples=["octocat"])
    created_at: AwareDatetime = Field(
        ...,
        description="The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.",
        examples=["2019-01-24T22:45:36.000Z"],
    )
    updated_at: AwareDatetime = Field(
        ...,
        description="The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.",
        examples=["2019-01-24T22:45:36.000Z"],
    )


class ActionsEnabled(RootModel[bool]):
    root: bool = Field(..., description="Whether GitHub Actions is enabled on the repository.")


class ActionsRepositoryPermissions(BaseModel):
    enabled: ActionsEnabled
    allowed_actions: Optional[AllowedActions] = None
    selected_actions_url: Optional[SelectedActionsUrl] = None


class AccessLevel(Enum):
    none = "none"
    user = "user"
    organization = "organization"


class ActionsWorkflowAccessToRepository(BaseModel):
    access_level: AccessLevel = Field(
        ...,
        description="Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the\nrepository.\n\n`none` means the access is only possible from workflows in this repository. `user` level access allows sharing across user owned private repositories only. `organization` level access allows sharing across the organization.",
    )


class ReferencedWorkflow(BaseModel):
    path: str
    sha: str
    ref: Optional[str] = None


class Repo1(BaseModel):
    id: int
    url: str
    name: str


class Head(BaseModel):
    ref: str
    sha: str
    repo: Repo1


class Base(Head):
    pass


class PullRequestMinimal(BaseModel):
    id: int
    number: int
    url: str
    head: Head
    base: Base


class Author(BaseModel):
    name: str = Field(..., description="Name of the commit's author", examples=["Monalisa Octocat"])
    email: EmailStr = Field(
        ...,
        description="Git email address of the commit's author",
        examples=["monalisa.octocat@example.com"],
    )


class Committer(BaseModel):
    name: str = Field(
        ..., description="Name of the commit's committer", examples=["Monalisa Octocat"]
    )
    email: EmailStr = Field(
        ...,
        description="Git email address of the commit's committer",
        examples=["monalisa.octocat@example.com"],
    )


class SimpleCommit(BaseModel):
    id: str = Field(
        ..., description="SHA for the commit", examples=["7638417db6d59f3c431d3e1f261cc637155684cd"]
    )
    tree_id: str = Field(..., description="SHA for the commit's tree")
    message: str = Field(
        ..., description="Message describing the purpose of the commit", examples=["Fix #42"]
    )
    timestamp: AwareDatetime = Field(
        ..., description="Timestamp of the commit", examples=["2014-08-09T08:02:04+12:00"]
    )
    author: Optional[Author] = Field(..., description="Information about the Git author")
    committer: Optional[Committer] = Field(..., description="Information about the Git committer")


class WorkflowRun1(BaseModel):
    id: int = Field(..., description="The ID of the workflow run.", examples=[5])
    name: Optional[str] = Field(
        None, description="The name of the workflow run.", examples=["Build"]
    )
    node_id: str = Field(..., examples=["MDEwOkNoZWNrU3VpdGU1"])
    check_suite_id: Optional[int] = Field(
        None, description="The ID of the associated check suite.", examples=[42]
    )
    check_suite_node_id: Optional[str] = Field(
        None,
        description="The node ID of the associated check suite.",
        examples=["MDEwOkNoZWNrU3VpdGU0Mg=="],
    )
    head_branch: Optional[str] = Field(..., examples=["master"])
    head_sha: str = Field(
        ...,
        description="The SHA of the head commit that points to the version of the workflow being run.",
        examples=["009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"],
    )
    path: str = Field(
        ...,
        description="The full path of the workflow",
        examples=["octocat/octo-repo/.github/workflows/ci.yml@main"],
    )
    run_number: int = Field(
        ..., description="The auto incrementing run number for the workflow run.", examples=[106]
    )
    run_attempt: Optional[int] = Field(
        None,
        description="Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.",
        examples=[1],
    )
    referenced_workflows: Optional[List[ReferencedWorkflow]] = None
    event: str = Field(..., examples=["push"])
    status: Optional[str] = Field(..., examples=["completed"])
    conclusion: Optional[str] = Field(..., examples=["neutral"])
    workflow_id: int = Field(..., description="The ID of the parent workflow.", examples=[5])
    url: str = Field(
        ...,
        description="The URL to the workflow run.",
        examples=["https://api.github.com/repos/github/hello-world/actions/runs/5"],
    )
    html_url: str = Field(..., examples=["https://github.com/github/hello-world/suites/4"])
    pull_requests: List[PullRequestMinimal] = Field(
        ...,
        description="Pull requests that are open with a `head_sha` or `head_branch` that matches the workflow run. The returned pull requests do not necessarily indicate pull requests that triggered the run.",
    )
    created_at: AwareDatetime
    updated_at: AwareDatetime
    actor: Optional[SimpleUser] = None
    triggering_actor: Optional[SimpleUser] = None
    run_started_at: Optional[AwareDatetime] = Field(
        None, description="The start time of the latest run. Resets on re-run."
    )
    jobs_url: str = Field(
        ...,
        description="The URL to the jobs for the workflow run.",
        examples=["https://api.github.com/repos/github/hello-world/actions/runs/5/jobs"],
    )
    logs_url: str = Field(
        ...,
        description="The URL to download the logs for the workflow run.",
        examples=["https://api.github.com/repos/github/hello-world/actions/runs/5/logs"],
    )
    check_suite_url: str = Field(
        ...,
        description="The URL to the associated check suite.",
        examples=["https://api.github.com/repos/github/hello-world/check-suites/12"],
    )
    artifacts_url: str = Field(
        ...,
        description="The URL to the artifacts for the workflow run.",
        examples=["https://api.github.com/repos/github/hello-world/actions/runs/5/rerun/artifacts"],
    )
    cancel_url: str = Field(
        ...,
        description="The URL to cancel the workflow run.",
        examples=["https://api.github.com/repos/github/hello-world/actions/runs/5/cancel"],
    )
    rerun_url: str = Field(
        ...,
        description="The URL to rerun the workflow run.",
        examples=["https://api.github.com/repos/github/hello-world/actions/runs/5/rerun"],
    )
    previous_attempt_url: Optional[str] = Field(
        None,
        description="The URL to the previous attempted run of this workflow, if one exists.",
        examples=["https://api.github.com/repos/github/hello-world/actions/runs/5/attempts/3"],
    )
    workflow_url: str = Field(
        ...,
        description="The URL to the workflow.",
        examples=["https://api.github.com/repos/github/hello-world/actions/workflows/main.yaml"],
    )
    head_commit: Optional[SimpleCommit] = None
    repository: MinimalRepository
    head_repository: MinimalRepository
    head_repository_id: Optional[int] = Field(None, examples=[5])
    display_title: str = Field(
        ...,
        description="The event-specific title associated with the run or the run-name if set, or the value of `run-name` if it is set in the workflow.",
        examples=["Simple Workflow"],
    )


class Environment(BaseModel):
    id: Optional[int] = Field(None, description="The id of the environment.", examples=[56780428])
    node_id: Optional[str] = Field(None, examples=["MDExOkVudmlyb25tZW50NTY3ODA0Mjg="])
    name: Optional[str] = Field(
        None, description="The name of the environment.", examples=["staging"]
    )
    url: Optional[str] = Field(
        None, examples=["https://api.github.com/repos/github/hello-world/environments/staging"]
    )
    html_url: Optional[str] = Field(
        None,
        examples=[
            "https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging"
        ],
    )
    created_at: Optional[AwareDatetime] = Field(
        None,
        description="The time that the environment was created, in ISO 8601 format.",
        examples=["2020-11-23T22:00:40Z"],
    )
    updated_at: Optional[AwareDatetime] = Field(
        None,
        description="The time that the environment was last updated, in ISO 8601 format.",
        examples=["2020-11-23T22:00:40Z"],
    )


class State7(Enum):
    approved = "approved"
    rejected = "rejected"
    pending = "pending"


class EnvironmentApprovals(BaseModel):
    environments: List[Environment] = Field(
        ..., description="The list of environments that were approved or rejected"
    )
    state: State7 = Field(
        ...,
        description="Whether deployment to the environment(s) was approved or rejected or pending (with comments)",
        examples=["approved"],
    )
    user: SimpleUser
    comment: str = Field(
        ..., description="The comment submitted with the deployment review", examples=["Ship it!"]
    )


class ReviewCustomGatesCommentRequired(BaseModel):
    environment_name: str = Field(
        ..., description="The name of the environment to approve or reject."
    )
    comment: str = Field(
        ...,
        description="Comment associated with the pending deployment protection rule. **Required when state is not provided.**",
    )


class State8(Enum):
    approved = "approved"
    rejected = "rejected"


class ReviewCustomGatesStateRequired(BaseModel):
    environment_name: str = Field(
        ..., description="The name of the environment to approve or reject."
    )
    state: State8 = Field(
        ..., description="Whether to approve or reject deployment to the specified environments."
    )
    comment: Optional[str] = Field(None, description="Optional comment to include with the review.")


class DeploymentReviewerType(Enum):
    User = "User"
    Team = "Team"


class Environment1(BaseModel):
    id: Optional[int] = Field(None, description="The id of the environment.", examples=[56780428])
    node_id: Optional[str] = Field(None, examples=["MDExOkVudmlyb25tZW50NTY3ODA0Mjg="])
    name: Optional[str] = Field(
        None, description="The name of the environment.", examples=["staging"]
    )
    url: Optional[str] = Field(
        None, examples=["https://api.github.com/repos/github/hello-world/environments/staging"]
    )
    html_url: Optional[str] = Field(
        None,
        examples=[
            "https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging"
        ],
    )


class Reviewer(BaseModel):
    type: Optional[DeploymentReviewerType] = None
    reviewer: Optional[Union[SimpleUser, Team]] = None


class PendingDeployment(BaseModel):
    environment: Environment1
    wait_timer: int = Field(..., description="The set duration of the wait timer", examples=[30])
    wait_timer_started_at: Optional[AwareDatetime] = Field(
        ..., description="The time that the wait timer began.", examples=["2020-11-23T22:00:40Z"]
    )
    current_user_can_approve: bool = Field(
        ...,
        description="Whether the currently authenticated user can approve the deployment",
        examples=[True],
    )
    reviewers: List[Reviewer] = Field(
        ...,
        description="The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.",
    )


class Deployment(BaseModel):
    url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/example/deployments/1"]
    )
    id: int = Field(..., description="Unique identifier of the deployment", examples=[42])
    node_id: str = Field(..., examples=["MDEwOkRlcGxveW1lbnQx"])
    sha: str = Field(..., examples=["a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d"])
    ref: str = Field(
        ...,
        description="The ref to deploy. This can be a branch, tag, or sha.",
        examples=["topic-branch"],
    )
    task: str = Field(
        ..., description="Parameter to specify a task to execute", examples=["deploy"]
    )
    payload: Union[Dict[str, Any], str]
    original_environment: Optional[str] = Field(None, examples=["staging"])
    environment: str = Field(
        ..., description="Name for the target deployment environment.", examples=["production"]
    )
    description: Optional[str] = Field(..., examples=["Deploy request from hubot"])
    creator: Optional[SimpleUser] = None
    created_at: AwareDatetime = Field(..., examples=["2012-07-20T01:19:13Z"])
    updated_at: AwareDatetime = Field(..., examples=["2012-07-20T01:19:13Z"])
    statuses_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/example/deployments/1/statuses"]
    )
    repository_url: AnyUrl = Field(..., examples=["https://api.github.com/repos/octocat/example"])
    transient_environment: Optional[bool] = Field(
        None,
        description="Specifies if the given environment is will no longer exist at some point in the future. Default: false.",
        examples=[True],
    )
    production_environment: Optional[bool] = Field(
        None,
        description="Specifies if the given environment is one that end-users directly interact with. Default: false.",
        examples=[True],
    )
    performed_via_github_app: Optional[Integration] = None


class JobRun(BaseModel):
    job_id: int
    duration_ms: int


class UBUNTU(BaseModel):
    total_ms: int
    jobs: int
    job_runs: Optional[List[JobRun]] = None


class MACOS(UBUNTU):
    pass


class WINDOWS(UBUNTU):
    pass


class Billable(BaseModel):
    UBUNTU: Optional[UBUNTU] = None
    MACOS: Optional[MACOS] = None
    WINDOWS: Optional[WINDOWS] = None


class WorkflowRunUsage(BaseModel):
    billable: Billable
    run_duration_ms: Optional[int] = None


class State9(Enum):
    active = "active"
    deleted = "deleted"
    disabled_fork = "disabled_fork"
    disabled_inactivity = "disabled_inactivity"
    disabled_manually = "disabled_manually"


class Workflow(BaseModel):
    id: int = Field(..., examples=[5])
    node_id: str = Field(..., examples=["MDg6V29ya2Zsb3cxMg=="])
    name: str = Field(..., examples=["CI"])
    path: str = Field(..., examples=["ruby.yaml"])
    state: State9 = Field(..., examples=["active"])
    created_at: AwareDatetime = Field(..., examples=["2019-12-06T14:20:20.000Z"])
    updated_at: AwareDatetime = Field(..., examples=["2019-12-06T14:20:20.000Z"])
    url: str = Field(..., examples=["https://api.github.com/repos/actions/setup-ruby/workflows/5"])
    html_url: str = Field(
        ...,
        examples=["https://github.com/actions/setup-ruby/blob/master/.github/workflows/ruby.yaml"],
    )
    badge_url: str = Field(
        ..., examples=["https://github.com/actions/setup-ruby/workflows/CI/badge.svg"]
    )
    deleted_at: Optional[AwareDatetime] = Field(None, examples=["2019-12-06T14:20:20.000Z"])


class UBUNTU1(BaseModel):
    total_ms: Optional[int] = None


class MACOS1(UBUNTU1):
    pass


class WINDOWS1(UBUNTU1):
    pass


class Billable1(BaseModel):
    UBUNTU: Optional[UBUNTU1] = None
    MACOS: Optional[MACOS1] = None
    WINDOWS: Optional[WINDOWS1] = None


class WorkflowUsage(BaseModel):
    billable: Billable1


class ActivityType(Enum):
    push = "push"
    force_push = "force_push"
    branch_deletion = "branch_deletion"
    branch_creation = "branch_creation"
    pr_merge = "pr_merge"
    merge_queue_merge = "merge_queue_merge"


class Activity(BaseModel):
    id: int = Field(..., examples=[1296269])
    node_id: str = Field(..., examples=["MDEwOlJlcG9zaXRvcnkxMjk2MjY5"])
    before: str = Field(
        ...,
        description="The SHA of the commit before the activity.",
        examples=["6dcb09b5b57875f334f61aebed695e2e4193db5e"],
    )
    after: str = Field(
        ...,
        description="The SHA of the commit after the activity.",
        examples=["827efc6d56897b048c772eb4087f854f46256132"],
    )
    ref: str = Field(
        ...,
        description="The full Git reference, formatted as `refs/heads/<branch name>`.",
        examples=["refs/heads/main"],
    )
    timestamp: AwareDatetime = Field(
        ..., description="The time when the activity occurred.", examples=["2011-01-26T19:06:43Z"]
    )
    activity_type: ActivityType = Field(
        ..., description="The type of the activity that was performed.", examples=["force_push"]
    )
    actor: Optional[SimpleUser] = None


class Autolink(BaseModel):
    id: int = Field(..., examples=[3])
    key_prefix: str = Field(
        ..., description="The prefix of a key that is linkified.", examples=["TICKET-"]
    )
    url_template: str = Field(
        ...,
        description="A template for the target URL that is generated if a key was found.",
        examples=["https://example.com/TICKET?query=<num>"],
    )
    is_alphanumeric: bool = Field(
        ...,
        description="Whether this autolink reference matches alphanumeric characters. If false, this autolink reference only matches numeric characters.",
        examples=[True],
    )


class CheckAutomatedSecurityFixes(BaseModel):
    enabled: bool = Field(
        ...,
        description="Whether automated security fixes are enabled for the repository.",
        examples=[True],
    )
    paused: bool = Field(
        ...,
        description="Whether automated security fixes are paused for the repository.",
        examples=[False],
    )


class Check(BaseModel):
    context: str
    app_id: Optional[int] = None


class ProtectedBranchRequiredStatusCheck(BaseModel):
    url: Optional[str] = None
    enforcement_level: Optional[str] = None
    contexts: List[str]
    checks: List[Check]
    contexts_url: Optional[str] = None
    strict: Optional[bool] = None


class ProtectedBranchAdminEnforced(BaseModel):
    url: AnyUrl = Field(
        ...,
        examples=[
            "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins"
        ],
    )
    enabled: bool = Field(..., examples=[True])


class DismissalRestrictions(BaseModel):
    users: Optional[List[SimpleUser]] = Field(
        None, description="The list of users with review dismissal access."
    )
    teams: Optional[List[Team]] = Field(
        None, description="The list of teams with review dismissal access."
    )
    apps: Optional[List[Integration]] = Field(
        None, description="The list of apps with review dismissal access."
    )
    url: Optional[str] = Field(
        None,
        examples=[
            '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions"'
        ],
    )
    users_url: Optional[str] = Field(
        None,
        examples=[
            '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users"'
        ],
    )
    teams_url: Optional[str] = Field(
        None,
        examples=[
            '"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams"'
        ],
    )


class BypassPullRequestAllowances(BaseModel):
    users: Optional[List[SimpleUser]] = Field(
        None, description="The list of users allowed to bypass pull request requirements."
    )
    teams: Optional[List[Team]] = Field(
        None, description="The list of teams allowed to bypass pull request requirements."
    )
    apps: Optional[List[Integration]] = Field(
        None, description="The list of apps allowed to bypass pull request requirements."
    )


class ProtectedBranchPullRequestReview(BaseModel):
    url: Optional[AnyUrl] = Field(
        None,
        examples=[
            "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions"
        ],
    )
    dismissal_restrictions: Optional[DismissalRestrictions] = None
    bypass_pull_request_allowances: Optional[BypassPullRequestAllowances] = Field(
        None,
        description="Allow specific users, teams, or apps to bypass pull request requirements.",
    )
    dismiss_stale_reviews: bool = Field(..., examples=[True])
    require_code_owner_reviews: bool = Field(..., examples=[True])
    required_approving_review_count: Optional[conint(ge=0, le=6)] = Field(None, examples=[2])
    require_last_push_approval: Optional[bool] = Field(
        False,
        description="Whether the most recent push must be approved by someone other than the person who pushed it.",
        examples=[True],
    )


class User(Owner):
    pass


class Team1(BaseModel):
    id: Optional[int] = None
    node_id: Optional[str] = None
    url: Optional[str] = None
    html_url: Optional[str] = None
    name: Optional[str] = None
    slug: Optional[str] = None
    description: Optional[str] = None
    privacy: Optional[str] = None
    notification_setting: Optional[str] = None
    permission: Optional[str] = None
    members_url: Optional[str] = None
    repositories_url: Optional[str] = None
    parent: Optional[str] = None


class Owner1(BaseModel):
    login: Optional[str] = None
    id: Optional[int] = None
    node_id: Optional[str] = None
    url: Optional[str] = None
    repos_url: Optional[str] = None
    events_url: Optional[str] = None
    hooks_url: Optional[str] = None
    issues_url: Optional[str] = None
    members_url: Optional[str] = None
    public_members_url: Optional[str] = None
    avatar_url: Optional[str] = None
    description: Optional[str] = None
    gravatar_id: Optional[str] = Field(None, examples=['""'])
    html_url: Optional[str] = Field(
        None, examples=['"https://github.com/testorg-ea8ec76d71c3af4b"']
    )
    followers_url: Optional[str] = Field(
        None, examples=['"https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers"']
    )
    following_url: Optional[str] = Field(
        None,
        examples=['"https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}"'],
    )
    gists_url: Optional[str] = Field(
        None, examples=['"https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}"']
    )
    starred_url: Optional[str] = Field(
        None,
        examples=['"https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}"'],
    )
    subscriptions_url: Optional[str] = Field(
        None, examples=['"https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions"']
    )
    organizations_url: Optional[str] = Field(
        None, examples=['"https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs"']
    )
    received_events_url: Optional[str] = Field(
        None, examples=['"https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events"']
    )
    type: Optional[str] = Field(None, examples=['"Organization"'])
    site_admin: Optional[bool] = Field(None, examples=[False])


class Permissions11(BaseModel):
    metadata: Optional[str] = None
    contents: Optional[str] = None
    issues: Optional[str] = None
    single_file: Optional[str] = None


class App1(BaseModel):
    id: Optional[int] = None
    slug: Optional[str] = None
    node_id: Optional[str] = None
    owner: Optional[Owner1] = None
    name: Optional[str] = None
    description: Optional[str] = None
    external_url: Optional[str] = None
    html_url: Optional[str] = None
    created_at: Optional[str] = None
    updated_at: Optional[str] = None
    permissions: Optional[Permissions11] = None
    events: Optional[List[str]] = None


class BranchRestrictionPolicy(BaseModel):
    url: AnyUrl
    users_url: AnyUrl
    teams_url: AnyUrl
    apps_url: AnyUrl
    users: List[User]
    teams: List[Team1]
    apps: List[App1]


class RequiredLinearHistory(BaseModel):
    enabled: Optional[bool] = None


class AllowForcePushes(RequiredLinearHistory):
    pass


class AllowDeletions(RequiredLinearHistory):
    pass


class BlockCreations(RequiredLinearHistory):
    pass


class RequiredConversationResolution(RequiredLinearHistory):
    pass


class RequiredSignatures(BaseModel):
    url: AnyUrl = Field(
        ...,
        examples=[
            "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures"
        ],
    )
    enabled: bool = Field(..., examples=[True])


class LockBranch(BaseModel):
    enabled: Optional[bool] = False


class AllowForkSyncing(LockBranch):
    pass


class BranchProtection(BaseModel):
    url: Optional[str] = None
    enabled: Optional[bool] = None
    required_status_checks: Optional[ProtectedBranchRequiredStatusCheck] = None
    enforce_admins: Optional[ProtectedBranchAdminEnforced] = None
    required_pull_request_reviews: Optional[ProtectedBranchPullRequestReview] = None
    restrictions: Optional[BranchRestrictionPolicy] = None
    required_linear_history: Optional[RequiredLinearHistory] = None
    allow_force_pushes: Optional[AllowForcePushes] = None
    allow_deletions: Optional[AllowDeletions] = None
    block_creations: Optional[BlockCreations] = None
    required_conversation_resolution: Optional[RequiredConversationResolution] = None
    name: Optional[str] = Field(None, examples=['"branch/with/protection"'])
    protection_url: Optional[str] = Field(
        None,
        examples=[
            '"https://api.github.com/repos/owner-79e94e2d36b3fd06a32bb213/AAA_Public_Repo/branches/branch/with/protection/protection"'
        ],
    )
    required_signatures: Optional[RequiredSignatures] = None
    lock_branch: Optional[LockBranch] = Field(
        None,
        description="Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.",
    )
    allow_fork_syncing: Optional[AllowForkSyncing] = Field(
        None,
        description="Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.",
    )


class Commit(BaseModel):
    sha: str
    url: AnyUrl


class ShortBranch(BaseModel):
    name: str
    commit: Commit
    protected: bool
    protection: Optional[BranchProtection] = None
    protection_url: Optional[AnyUrl] = None


class GitUser(BaseModel):
    name: Optional[str] = Field(None, examples=['"Chris Wanstrath"'])
    email: Optional[str] = Field(None, examples=['"chris@ozmm.org"'])
    date: Optional[str] = Field(None, examples=['"2007-10-29T02:42:39.000-07:00"'])


class Verification(BaseModel):
    verified: bool
    reason: str
    payload: Optional[str] = None
    signature: Optional[str] = None


class Status6(Enum):
    added = "added"
    removed = "removed"
    modified = "modified"
    renamed = "renamed"
    copied = "copied"
    changed = "changed"
    unchanged = "unchanged"


class DiffEntry(BaseModel):
    sha: str = Field(..., examples=["bbcd538c8e72b8c175046e27cc8f907076331401"])
    filename: str = Field(..., examples=["file1.txt"])
    status: Status6 = Field(..., examples=["added"])
    additions: int = Field(..., examples=[103])
    deletions: int = Field(..., examples=[21])
    changes: int = Field(..., examples=[124])
    blob_url: AnyUrl = Field(
        ...,
        examples=[
            "https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt"
        ],
    )
    raw_url: AnyUrl = Field(
        ...,
        examples=[
            "https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt"
        ],
    )
    contents_url: AnyUrl = Field(
        ...,
        examples=[
            "https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e"
        ],
    )
    patch: Optional[str] = Field(
        None, examples=["@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test"]
    )
    previous_filename: Optional[str] = Field(None, examples=["file.txt"])


class Tree(BaseModel):
    sha: str = Field(..., examples=["827efc6d56897b048c772eb4087f854f46256132"])
    url: AnyUrl = Field(
        ...,
        examples=[
            "https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132"
        ],
    )


class Commit2(BaseModel):
    url: AnyUrl = Field(
        ...,
        examples=[
            "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
        ],
    )
    author: Optional[GitUser] = None
    committer: Optional[GitUser] = None
    message: str = Field(..., examples=["Fix all the bugs"])
    comment_count: int = Field(..., examples=[0])
    tree: Tree
    verification: Optional[Verification] = None


class Parent(BaseModel):
    sha: str = Field(..., examples=["7638417db6d59f3c431d3e1f261cc637155684cd"])
    url: AnyUrl = Field(
        ...,
        examples=[
            "https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd"
        ],
    )
    html_url: Optional[AnyUrl] = Field(
        None,
        examples=[
            "https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd"
        ],
    )


class Stats(BaseModel):
    additions: Optional[int] = None
    deletions: Optional[int] = None
    total: Optional[int] = None


class Commit1(BaseModel):
    url: AnyUrl = Field(
        ...,
        examples=[
            "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
        ],
    )
    sha: str = Field(..., examples=["6dcb09b5b57875f334f61aebed695e2e4193db5e"])
    node_id: str = Field(
        ..., examples=["MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ=="]
    )
    html_url: AnyUrl = Field(
        ...,
        examples=[
            "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e"
        ],
    )
    comments_url: AnyUrl = Field(
        ...,
        examples=[
            "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments"
        ],
    )
    commit: Commit2
    author: Optional[SimpleUser] = None
    committer: Optional[SimpleUser] = None
    parents: List[Parent]
    stats: Optional[Stats] = None
    files: Optional[List[DiffEntry]] = None


class FieldLinks2(BaseModel):
    html: str
    self: AnyUrl


class BranchWithProtection(BaseModel):
    name: str
    commit: Commit1
    field_links: FieldLinks2 = Field(..., alias="_links")
    protected: bool
    protection: BranchProtection
    protection_url: AnyUrl
    pattern: Optional[str] = Field(None, examples=['"mas*"'])
    required_approving_review_count: Optional[int] = Field(None, examples=[1])


class Check1(BaseModel):
    context: str = Field(..., examples=["continuous-integration/travis-ci"])
    app_id: Optional[int] = None


class StatusCheckPolicy(BaseModel):
    url: AnyUrl = Field(
        ...,
        examples=[
            "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks"
        ],
    )
    strict: bool = Field(..., examples=[True])
    contexts: List[str] = Field(..., examples=["continuous-integration/travis-ci"])
    checks: List[Check1]
    contexts_url: AnyUrl = Field(
        ...,
        examples=[
            "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts"
        ],
    )


class DismissalRestrictions1(BaseModel):
    url: AnyUrl
    users_url: AnyUrl
    teams_url: AnyUrl
    users: List[SimpleUser]
    teams: List[Team]
    apps: Optional[List[Integration]] = None


class BypassPullRequestAllowances1(BaseModel):
    users: List[SimpleUser]
    teams: List[Team]
    apps: Optional[List[Integration]] = None


class RequiredPullRequestReviews(BaseModel):
    url: AnyUrl
    dismiss_stale_reviews: Optional[bool] = None
    require_code_owner_reviews: Optional[bool] = None
    required_approving_review_count: Optional[int] = None
    require_last_push_approval: Optional[bool] = Field(
        False,
        description="Whether the most recent push must be approved by someone other than the person who pushed it.",
    )
    dismissal_restrictions: Optional[DismissalRestrictions1] = None
    bypass_pull_request_allowances: Optional[BypassPullRequestAllowances1] = None


class EnforceAdmins(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: AnyUrl
    enabled: bool


class RequiredLinearHistory1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    enabled: bool


class AllowForcePushes1(RequiredLinearHistory1):
    pass


class AllowDeletions1(RequiredLinearHistory1):
    pass


class RequiredConversationResolution1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    enabled: Optional[bool] = None


class BlockCreations1(RequiredLinearHistory1):
    pass


class LockBranch1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    enabled: Optional[bool] = False


class AllowForkSyncing1(LockBranch1):
    pass


class ProtectedBranch(BaseModel):
    url: AnyUrl
    required_status_checks: Optional[StatusCheckPolicy] = None
    required_pull_request_reviews: Optional[RequiredPullRequestReviews] = None
    required_signatures: Optional[RequiredSignatures] = None
    enforce_admins: Optional[EnforceAdmins] = None
    required_linear_history: Optional[RequiredLinearHistory1] = None
    allow_force_pushes: Optional[AllowForcePushes1] = None
    allow_deletions: Optional[AllowDeletions1] = None
    restrictions: Optional[BranchRestrictionPolicy] = None
    required_conversation_resolution: Optional[RequiredConversationResolution1] = None
    block_creations: Optional[BlockCreations1] = None
    lock_branch: Optional[LockBranch1] = Field(
        None,
        description="Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.",
    )
    allow_fork_syncing: Optional[AllowForkSyncing1] = Field(
        None,
        description="Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.",
    )


class DeploymentSimple(BaseModel):
    url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/example/deployments/1"]
    )
    id: int = Field(..., description="Unique identifier of the deployment", examples=[42])
    node_id: str = Field(..., examples=["MDEwOkRlcGxveW1lbnQx"])
    task: str = Field(
        ..., description="Parameter to specify a task to execute", examples=["deploy"]
    )
    original_environment: Optional[str] = Field(None, examples=["staging"])
    environment: str = Field(
        ..., description="Name for the target deployment environment.", examples=["production"]
    )
    description: Optional[str] = Field(..., examples=["Deploy request from hubot"])
    created_at: AwareDatetime = Field(..., examples=["2012-07-20T01:19:13Z"])
    updated_at: AwareDatetime = Field(..., examples=["2012-07-20T01:19:13Z"])
    statuses_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/example/deployments/1/statuses"]
    )
    repository_url: AnyUrl = Field(..., examples=["https://api.github.com/repos/octocat/example"])
    transient_environment: Optional[bool] = Field(
        None,
        description="Specifies if the given environment is will no longer exist at some point in the future. Default: false.",
        examples=[True],
    )
    production_environment: Optional[bool] = Field(
        None,
        description="Specifies if the given environment is one that end-users directly interact with. Default: false.",
        examples=[True],
    )
    performed_via_github_app: Optional[Integration] = None


class Output(BaseModel):
    title: Optional[str] = None
    summary: Optional[str] = None
    text: Optional[str] = None
    annotations_count: int
    annotations_url: AnyUrl


class CheckSuite(BaseModel):
    id: int


class CheckRun(BaseModel):
    id: int = Field(..., description="The id of the check.", examples=[21])
    head_sha: str = Field(
        ...,
        description="The SHA of the commit that is being checked.",
        examples=["009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"],
    )
    node_id: str = Field(..., examples=["MDg6Q2hlY2tSdW40"])
    external_id: Optional[str] = Field(..., examples=["42"])
    url: str = Field(..., examples=["https://api.github.com/repos/github/hello-world/check-runs/4"])
    html_url: Optional[str] = Field(..., examples=["https://github.com/github/hello-world/runs/4"])
    details_url: Optional[str] = Field(..., examples=["https://example.com"])
    status: Status5 = Field(
        ...,
        description="The phase of the lifecycle that the check is currently in.",
        examples=["queued"],
    )
    conclusion: Conclusion = Field(..., examples=["neutral"])
    started_at: Optional[AwareDatetime] = Field(..., examples=["2018-05-04T01:14:52Z"])
    completed_at: Optional[AwareDatetime] = Field(..., examples=["2018-05-04T01:14:52Z"])
    output: Output
    name: str = Field(..., description="The name of the check.", examples=["test-coverage"])
    check_suite: Optional[CheckSuite] = None
    app: Optional[Integration] = None
    pull_requests: List[PullRequestMinimal] = Field(
        ...,
        description="Pull requests that are open with a `head_sha` or `head_branch` that matches the check. The returned pull requests do not necessarily indicate pull requests that triggered the check.",
    )
    deployment: Optional[DeploymentSimple] = None


class CheckAnnotation(BaseModel):
    path: str = Field(..., examples=["README.md"])
    start_line: int = Field(..., examples=[2])
    end_line: int = Field(..., examples=[2])
    start_column: Optional[int] = Field(..., examples=[5])
    end_column: Optional[int] = Field(..., examples=[10])
    annotation_level: Optional[str] = Field(..., examples=["warning"])
    title: Optional[str] = Field(..., examples=["Spell Checker"])
    message: Optional[str] = Field(..., examples=["Check your spelling for 'banaas'."])
    raw_details: Optional[str] = Field(..., examples=["Do you mean 'bananas' or 'banana'?"])
    blob_href: str


class Status8(Enum):
    queued = "queued"
    in_progress = "in_progress"
    completed = "completed"
    NoneType_None = None


class Conclusion2(Enum):
    success = "success"
    failure = "failure"
    neutral = "neutral"
    cancelled = "cancelled"
    skipped = "skipped"
    timed_out = "timed_out"
    action_required = "action_required"
    startup_failure = "startup_failure"
    stale = "stale"
    NoneType_None = None


class CheckSuite1(BaseModel):
    id: int = Field(..., examples=[5])
    node_id: str = Field(..., examples=["MDEwOkNoZWNrU3VpdGU1"])
    head_branch: Optional[str] = Field(..., examples=["master"])
    head_sha: str = Field(
        ...,
        description="The SHA of the head commit that is being checked.",
        examples=["009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"],
    )
    status: Status8 = Field(..., examples=["completed"])
    conclusion: Conclusion2 = Field(..., examples=["neutral"])
    url: Optional[str] = Field(
        ..., examples=["https://api.github.com/repos/github/hello-world/check-suites/5"]
    )
    before: Optional[str] = Field(..., examples=["146e867f55c26428e5f9fade55a9bbf5e95a7912"])
    after: Optional[str] = Field(..., examples=["d6fde92930d4715a2b49857d24b940956b26d2d3"])
    pull_requests: List[PullRequestMinimal]
    app: Optional[Integration] = None
    repository: MinimalRepository
    created_at: Optional[AwareDatetime] = None
    updated_at: Optional[AwareDatetime] = None
    head_commit: SimpleCommit
    latest_check_runs_count: int
    check_runs_url: str
    rerequestable: Optional[bool] = None
    runs_rerequestable: Optional[bool] = None


class AutoTriggerCheck(BaseModel):
    app_id: int
    setting: bool


class Preferences(BaseModel):
    auto_trigger_checks: Optional[List[AutoTriggerCheck]] = None


class CheckSuitePreference(BaseModel):
    preferences: Preferences
    repository: MinimalRepository


class CodeScanningAlertItems(BaseModel):
    number: AlertNumber
    created_at: AlertCreatedAt
    updated_at: Optional[AlertUpdatedAt] = None
    url: AlertUrl
    html_url: AlertHtmlUrl
    instances_url: AlertInstancesUrl
    state: CodeScanningAlertState
    fixed_at: Optional[AlertFixedAt] = None
    dismissed_by: Optional[SimpleUser] = None
    dismissed_at: Optional[AlertDismissedAt] = None
    dismissed_reason: CodeScanningAlertDismissedReason
    dismissed_comment: Optional[CodeScanningAlertDismissedComment] = None
    rule: CodeScanningAlertRuleSummary
    tool: CodeScanningAnalysisTool
    most_recent_instance: CodeScanningAlertInstance


class CodeScanningAlertRule(BaseModel):
    id: Optional[str] = Field(
        None, description="A unique identifier for the rule used to detect the alert."
    )
    name: Optional[str] = Field(None, description="The name of the rule used to detect the alert.")
    severity: Optional[Severity3] = Field(None, description="The severity of the alert.")
    security_severity_level: Optional[SecuritySeverityLevel] = Field(
        None, description="The security severity of the alert."
    )
    description: Optional[str] = Field(
        None, description="A short description of the rule used to detect the alert."
    )
    full_description: Optional[str] = Field(
        None, description="description of the rule used to detect the alert."
    )
    tags: Optional[List[str]] = Field(None, description="A set of tags applicable for the rule.")
    help: Optional[str] = Field(
        None, description="Detailed documentation for the rule as GitHub Flavored Markdown."
    )
    help_uri: Optional[str] = Field(
        None, description="A link to the documentation for the rule used to detect the alert."
    )


class CodeScanningAlert(BaseModel):
    number: AlertNumber
    created_at: AlertCreatedAt
    updated_at: Optional[AlertUpdatedAt] = None
    url: AlertUrl
    html_url: AlertHtmlUrl
    instances_url: AlertInstancesUrl
    state: CodeScanningAlertState
    fixed_at: Optional[AlertFixedAt] = None
    dismissed_by: Optional[SimpleUser] = None
    dismissed_at: Optional[AlertDismissedAt] = None
    dismissed_reason: CodeScanningAlertDismissedReason
    dismissed_comment: Optional[CodeScanningAlertDismissedComment] = None
    rule: CodeScanningAlertRule
    tool: CodeScanningAnalysisTool
    most_recent_instance: CodeScanningAlertInstance


class CodeScanningAlertSetState(Enum):
    open = "open"
    dismissed = "dismissed"


class CodeScanningAnalysisSarifId(RootModel[str]):
    root: str = Field(
        ...,
        description="An identifier for the upload.",
        examples=["6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53"],
    )


class CodeScanningAnalysisCommitSha(
    RootModel[constr(pattern=r"^[0-9a-fA-F]+$", min_length=40, max_length=40)]
):
    root: constr(pattern=r"^[0-9a-fA-F]+$", min_length=40, max_length=40) = Field(
        ..., description="The SHA of the commit to which the analysis you are uploading relates."
    )


class CodeScanningAnalysisEnvironment(RootModel[str]):
    root: str = Field(
        ...,
        description="Identifies the variable values associated with the environment in which this analysis was performed.",
    )


class CodeScanningAnalysisCreatedAt(RootModel[AwareDatetime]):
    root: AwareDatetime = Field(
        ...,
        description="The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )


class CodeScanningAnalysisUrl(RootModel[AnyUrl]):
    root: AnyUrl = Field(..., description="The REST API URL of the analysis resource.")


class CodeScanningAnalysis(BaseModel):
    ref: CodeScanningRef
    commit_sha: CodeScanningAnalysisCommitSha
    analysis_key: CodeScanningAnalysisAnalysisKey
    environment: CodeScanningAnalysisEnvironment
    category: Optional[CodeScanningAnalysisCategory] = None
    error: str = Field(..., examples=["error reading field xyz"])
    created_at: CodeScanningAnalysisCreatedAt
    results_count: int = Field(..., description="The total number of results in the analysis.")
    rules_count: int = Field(..., description="The total number of rules used in the analysis.")
    id: int = Field(..., description="Unique identifier for this analysis.")
    url: CodeScanningAnalysisUrl
    sarif_id: CodeScanningAnalysisSarifId
    tool: CodeScanningAnalysisTool
    deletable: bool
    warning: str = Field(
        ...,
        description="Warning generated when processing the analysis",
        examples=["123 results were ignored"],
    )


class CodeScanningAnalysisDeletion(BaseModel):
    next_analysis_url: Optional[AnyUrl] = Field(
        ...,
        description="Next deletable analysis in chain, without last analysis deletion confirmation",
    )
    confirm_delete_url: Optional[AnyUrl] = Field(
        ...,
        description="Next deletable analysis in chain, with last analysis deletion confirmation",
    )


class CodeScanningCodeqlDatabase(BaseModel):
    id: int = Field(..., description="The ID of the CodeQL database.")
    name: str = Field(..., description="The name of the CodeQL database.")
    language: str = Field(..., description="The language of the CodeQL database.")
    uploader: SimpleUser
    content_type: str = Field(..., description="The MIME type of the CodeQL database file.")
    size: int = Field(..., description="The size of the CodeQL database file in bytes.")
    created_at: AwareDatetime = Field(
        ...,
        description="The date and time at which the CodeQL database was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.",
    )
    updated_at: AwareDatetime = Field(
        ...,
        description="The date and time at which the CodeQL database was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.",
    )
    url: AnyUrl = Field(
        ...,
        description="The URL at which to download the CodeQL database. The `Accept` header must be set to the value of the `content_type` property.",
    )
    commit_oid: Optional[str] = Field(
        None,
        description="The commit SHA of the repository at the time the CodeQL database was created.",
    )


class State10(Enum):
    configured = "configured"
    not_configured = "not-configured"


class Language(Enum):
    c_cpp = "c-cpp"
    csharp = "csharp"
    go = "go"
    java_kotlin = "java-kotlin"
    javascript_typescript = "javascript-typescript"
    javascript = "javascript"
    python = "python"
    ruby = "ruby"
    typescript = "typescript"
    swift = "swift"


class QuerySuite(Enum):
    default = "default"
    extended = "extended"


class Schedule(Enum):
    weekly = "weekly"
    NoneType_None = None


class CodeScanningDefaultSetup(BaseModel):
    state: Optional[State10] = Field(
        None, description="Code scanning default setup has been configured or not."
    )
    languages: Optional[List[Language]] = Field(None, description="Languages to be analyzed.")
    query_suite: Optional[QuerySuite] = Field(None, description="CodeQL query suite to be used.")
    updated_at: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp of latest configuration update.",
        examples=["2023-12-06T14:20:20.000Z"],
    )
    schedule: Optional[Schedule] = Field(
        None, description="The frequency of the periodic analysis."
    )


class Language1(Enum):
    c_cpp = "c-cpp"
    csharp = "csharp"
    go = "go"
    java_kotlin = "java-kotlin"
    javascript_typescript = "javascript-typescript"
    python = "python"
    ruby = "ruby"
    swift = "swift"


class CodeScanningDefaultSetupUpdate(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    state: Optional[State10] = Field(
        None, description="The desired state of code scanning default setup."
    )
    query_suite: Optional[QuerySuite] = Field(None, description="CodeQL query suite to be used.")
    languages: Optional[List[Language1]] = Field(
        None, description="CodeQL languages to be analyzed."
    )


class CodeScanningDefaultSetupUpdateResponse(BaseModel):
    run_id: Optional[int] = Field(None, description="ID of the corresponding run.")
    run_url: Optional[str] = Field(None, description="URL of the corresponding run.")


class CodeScanningRefFull(RootModel[constr(pattern=r"^refs/(heads|tags|pull)/.*$")]):
    root: constr(pattern=r"^refs/(heads|tags|pull)/.*$") = Field(
        ...,
        description="The full Git reference, formatted as `refs/heads/<branch name>`,\n`refs/tags/<tag>`, `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.",
        examples=["refs/heads/main"],
    )


class CodeScanningAnalysisSarifFile(RootModel[str]):
    root: str = Field(
        ...,
        description='A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning)."',
    )


class CodeScanningSarifsReceipt(BaseModel):
    id: Optional[CodeScanningAnalysisSarifId] = None
    url: Optional[AnyUrl] = Field(
        None, description="The REST API URL for checking the status of the upload."
    )


class ProcessingStatus(Enum):
    pending = "pending"
    complete = "complete"
    failed = "failed"


class CodeScanningSarifsStatus(BaseModel):
    processing_status: Optional[ProcessingStatus] = Field(
        None,
        description="`pending` files have not yet been processed, while `complete` means results from the SARIF have been stored. `failed` files have either not been processed at all, or could only be partially processed.",
    )
    analyses_url: Optional[AnyUrl] = Field(
        None, description="The REST API URL for getting the analyses associated with the upload."
    )
    errors: Optional[List[str]] = Field(
        None, description="Any errors that occurred during processing of the delivery."
    )


class Error1(BaseModel):
    line: int = Field(..., description="The line number where this errors occurs.", examples=[7])
    column: int = Field(
        ..., description="The column number where this errors occurs.", examples=[3]
    )
    source: Optional[str] = Field(
        None, description="The contents of the line where the error occurs.", examples=["* user"]
    )
    kind: str = Field(..., description="The type of error.", examples=["Invalid owner"])
    suggestion: Optional[str] = Field(
        None,
        description="Suggested action to fix the error. This will usually be `null`, but is provided for some common errors.",
        examples=["The pattern `/` will never match anything, did you mean `*` instead?"],
    )
    message: str = Field(
        ...,
        description="A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting).",
        examples=["Invalid owner on line 7:\n\n  * user\n    ^"],
    )
    path: str = Field(
        ...,
        description="The path of the file where the error occurred.",
        examples=[".github/CODEOWNERS"],
    )


class CodeownersErrors(BaseModel):
    errors: List[Error1]


class CodespacesPermissionsCheckForDevcontainer(BaseModel):
    accepted: bool = Field(
        ...,
        description="Whether the user has accepted the permissions defined by the devcontainer config",
        examples=[True],
    )


class RepoCodespacesSecret(ActionsSecret):
    pass


class Permissions12(BaseModel):
    pull: bool
    triage: Optional[bool] = None
    push: bool
    maintain: Optional[bool] = None
    admin: bool


class Collaborator(BaseModel):
    login: str = Field(..., examples=["octocat"])
    id: int = Field(..., examples=[1])
    email: Optional[str] = None
    name: Optional[str] = None
    node_id: str = Field(..., examples=["MDQ6VXNlcjE="])
    avatar_url: AnyUrl = Field(..., examples=["https://github.com/images/error/octocat_happy.gif"])
    gravatar_id: Optional[str] = Field(..., examples=["41d064eb2195891e12d0413f63227ea7"])
    url: AnyUrl = Field(..., examples=["https://api.github.com/users/octocat"])
    html_url: AnyUrl = Field(..., examples=["https://github.com/octocat"])
    followers_url: AnyUrl = Field(..., examples=["https://api.github.com/users/octocat/followers"])
    following_url: str = Field(
        ..., examples=["https://api.github.com/users/octocat/following{/other_user}"]
    )
    gists_url: str = Field(..., examples=["https://api.github.com/users/octocat/gists{/gist_id}"])
    starred_url: str = Field(
        ..., examples=["https://api.github.com/users/octocat/starred{/owner}{/repo}"]
    )
    subscriptions_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/subscriptions"]
    )
    organizations_url: AnyUrl = Field(..., examples=["https://api.github.com/users/octocat/orgs"])
    repos_url: AnyUrl = Field(..., examples=["https://api.github.com/users/octocat/repos"])
    events_url: str = Field(..., examples=["https://api.github.com/users/octocat/events{/privacy}"])
    received_events_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/received_events"]
    )
    type: str = Field(..., examples=["User"])
    site_admin: bool
    permissions: Optional[Permissions12] = None
    role_name: str = Field(..., examples=["admin"])


class Permissions13(Enum):
    read = "read"
    write = "write"
    admin = "admin"
    triage = "triage"
    maintain = "maintain"


class RepositoryInvitation(BaseModel):
    id: int = Field(
        ..., description="Unique identifier of the repository invitation.", examples=[42]
    )
    repository: MinimalRepository
    invitee: Optional[SimpleUser] = None
    inviter: Optional[SimpleUser] = None
    permissions: Permissions13 = Field(
        ..., description="The permission associated with the invitation.", examples=["read"]
    )
    created_at: AwareDatetime = Field(..., examples=["2016-06-13T14:52:50-05:00"])
    expired: Optional[bool] = Field(None, description="Whether or not the invitation has expired")
    url: str = Field(
        ...,
        description="URL for the repository invitation",
        examples=["https://api.github.com/user/repository-invitations/1"],
    )
    html_url: str = Field(..., examples=["https://github.com/octocat/Hello-World/invitations"])
    node_id: str


class RepositoryCollaboratorPermission(BaseModel):
    permission: str
    role_name: str = Field(..., examples=["admin"])
    user: Optional[Collaborator] = None


class CommitComment(BaseModel):
    html_url: AnyUrl
    url: AnyUrl
    id: int
    node_id: str
    body: str
    path: Optional[str] = None
    position: Optional[int] = None
    line: Optional[int] = None
    commit_id: str
    user: Optional[SimpleUser] = None
    created_at: AwareDatetime
    updated_at: AwareDatetime
    author_association: AuthorAssociation
    reactions: Optional[ReactionRollup] = None


class Commit3(BaseModel):
    sha: str
    url: str


class BranchShort(BaseModel):
    name: str
    commit: Commit3
    protected: bool


class Link(BaseModel):
    href: str


class MergeMethod(Enum):
    merge = "merge"
    squash = "squash"
    rebase = "rebase"


class AutoMerge(BaseModel):
    enabled_by: SimpleUser
    merge_method: MergeMethod = Field(..., description="The merge method to use.")
    commit_title: str = Field(..., description="Title for the merge commit message.")
    commit_message: str = Field(..., description="Commit message for the merge commit.")


class Label(BaseModel):
    id: int
    node_id: str
    url: str
    name: str
    description: str
    color: str
    default: bool


class Head1(BaseModel):
    label: str
    ref: str
    repo: Repository
    sha: str
    user: Optional[SimpleUser] = None


class Base1(Head1):
    pass


class FieldLinks3(BaseModel):
    comments: Link
    commits: Link
    statuses: Link
    html: Link
    issue: Link
    review_comments: Link
    review_comment: Link
    self: Link


class PullRequestSimple(BaseModel):
    url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/Hello-World/pulls/1347"]
    )
    id: int = Field(..., examples=[1])
    node_id: str = Field(..., examples=["MDExOlB1bGxSZXF1ZXN0MQ=="])
    html_url: AnyUrl = Field(..., examples=["https://github.com/octocat/Hello-World/pull/1347"])
    diff_url: AnyUrl = Field(
        ..., examples=["https://github.com/octocat/Hello-World/pull/1347.diff"]
    )
    patch_url: AnyUrl = Field(
        ..., examples=["https://github.com/octocat/Hello-World/pull/1347.patch"]
    )
    issue_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/Hello-World/issues/1347"]
    )
    commits_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"]
    )
    review_comments_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"]
    )
    review_comment_url: str = Field(
        ..., examples=["https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"]
    )
    comments_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"]
    )
    statuses_url: AnyUrl = Field(
        ...,
        examples=[
            "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
        ],
    )
    number: int = Field(..., examples=[1347])
    state: str = Field(..., examples=["open"])
    locked: bool = Field(..., examples=[True])
    title: str = Field(..., examples=["new-feature"])
    user: Optional[SimpleUser] = None
    body: Optional[str] = Field(..., examples=["Please pull these awesome changes"])
    labels: List[Label]
    milestone: Optional[Milestone] = None
    active_lock_reason: Optional[str] = Field(None, examples=["too heated"])
    created_at: AwareDatetime = Field(..., examples=["2011-01-26T19:01:12Z"])
    updated_at: AwareDatetime = Field(..., examples=["2011-01-26T19:01:12Z"])
    closed_at: Optional[AwareDatetime] = Field(..., examples=["2011-01-26T19:01:12Z"])
    merged_at: Optional[AwareDatetime] = Field(..., examples=["2011-01-26T19:01:12Z"])
    merge_commit_sha: Optional[str] = Field(
        ..., examples=["e5bd3914e2e596debea16f433f57875b5b90bcd6"]
    )
    assignee: Optional[SimpleUser] = None
    assignees: Optional[List[SimpleUser]] = None
    requested_reviewers: Optional[List[SimpleUser]] = None
    requested_teams: Optional[List[Team]] = None
    head: Head1
    base: Base1
    field_links: FieldLinks3 = Field(..., alias="_links")
    author_association: AuthorAssociation
    auto_merge: Optional[AutoMerge] = None
    draft: Optional[bool] = Field(
        None, description="Indicates whether or not the pull request is a draft.", examples=[False]
    )


class SimpleCommitStatus(BaseModel):
    description: Optional[str] = None
    id: int
    node_id: str
    state: str
    context: str
    target_url: Optional[AnyUrl] = None
    required: Optional[bool] = None
    avatar_url: Optional[AnyUrl] = None
    url: AnyUrl
    created_at: AwareDatetime
    updated_at: AwareDatetime


class CombinedCommitStatus(BaseModel):
    state: str
    statuses: List[SimpleCommitStatus]
    sha: str
    total_count: int
    repository: MinimalRepository
    commit_url: AnyUrl
    url: AnyUrl


class Status9(BaseModel):
    url: str
    avatar_url: Optional[str] = None
    id: int
    node_id: str
    state: str
    description: Optional[str] = None
    target_url: Optional[str] = None
    context: str
    created_at: str
    updated_at: str
    creator: Optional[SimpleUser] = None


class CommunityHealthFile(BaseModel):
    url: AnyUrl
    html_url: AnyUrl


class Files3(BaseModel):
    code_of_conduct: Optional[CodeOfConductSimple] = None
    code_of_conduct_file: Optional[CommunityHealthFile] = None
    license: Optional[LicenseSimple] = None
    contributing: Optional[CommunityHealthFile] = None
    readme: Optional[CommunityHealthFile] = None
    issue_template: Optional[CommunityHealthFile] = None
    pull_request_template: Optional[CommunityHealthFile] = None


class CommunityProfile(BaseModel):
    health_percentage: int = Field(..., examples=[100])
    description: Optional[str] = Field(..., examples=["My first repository on GitHub!"])
    documentation: Optional[str] = Field(..., examples=["example.com"])
    files: Files3
    updated_at: Optional[AwareDatetime] = Field(..., examples=["2017-02-28T19:09:29Z"])
    content_reports_enabled: Optional[bool] = Field(None, examples=[True])


class Status10(Enum):
    diverged = "diverged"
    ahead = "ahead"
    behind = "behind"
    identical = "identical"


class CommitComparison(BaseModel):
    url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/Hello-World/compare/master...topic"]
    )
    html_url: AnyUrl = Field(
        ..., examples=["https://github.com/octocat/Hello-World/compare/master...topic"]
    )
    permalink_url: AnyUrl = Field(
        ...,
        examples=[
            "https://github.com/octocat/Hello-World/compare/octocat:bbcd538c8e72b8c175046e27cc8f907076331401...octocat:0328041d1152db8ae77652d1618a02e57f745f17"
        ],
    )
    diff_url: AnyUrl = Field(
        ..., examples=["https://github.com/octocat/Hello-World/compare/master...topic.diff"]
    )
    patch_url: AnyUrl = Field(
        ..., examples=["https://github.com/octocat/Hello-World/compare/master...topic.patch"]
    )
    base_commit: Commit1
    merge_base_commit: Commit1
    status: Status10 = Field(..., examples=["ahead"])
    ahead_by: int = Field(..., examples=[4])
    behind_by: int = Field(..., examples=[5])
    total_commits: int = Field(..., examples=[6])
    commits: List[Commit1]
    files: Optional[List[DiffEntry]] = None


class FieldLinks4(BaseModel):
    git: Optional[AnyUrl] = None
    html: Optional[AnyUrl] = None
    self: AnyUrl


class Entry(BaseModel):
    type: str
    size: int
    name: str
    path: str
    content: Optional[str] = None
    sha: str
    url: AnyUrl
    git_url: Optional[AnyUrl] = None
    html_url: Optional[AnyUrl] = None
    download_url: Optional[AnyUrl] = None
    field_links: FieldLinks4 = Field(..., alias="_links")


class ContentTree(BaseModel):
    type: str
    size: int
    name: str
    path: str
    sha: str
    url: AnyUrl
    git_url: Optional[AnyUrl] = None
    html_url: Optional[AnyUrl] = None
    download_url: Optional[AnyUrl] = None
    entries: Optional[List[Entry]] = None
    field_links: FieldLinks4 = Field(..., alias="_links")


class Type22(Enum):
    dir = "dir"
    file = "file"
    submodule = "submodule"
    symlink = "symlink"


class ContentDirectoryItem(BaseModel):
    type: Type22
    size: int
    name: str
    path: str
    content: Optional[str] = None
    sha: str
    url: AnyUrl
    git_url: Optional[AnyUrl] = None
    html_url: Optional[AnyUrl] = None
    download_url: Optional[AnyUrl] = None
    field_links: FieldLinks4 = Field(..., alias="_links")


class ContentDirectory(RootModel[List[ContentDirectoryItem]]):
    root: List[ContentDirectoryItem] = Field(
        ..., description="A list of directory items", title="Content Directory"
    )


class Type23(Enum):
    file = "file"


class ContentFile(BaseModel):
    type: Type23
    encoding: str
    size: int
    name: str
    path: str
    content: str
    sha: str
    url: AnyUrl
    git_url: Optional[AnyUrl] = None
    html_url: Optional[AnyUrl] = None
    download_url: Optional[AnyUrl] = None
    field_links: FieldLinks4 = Field(..., alias="_links")
    target: Optional[str] = Field(None, examples=['"actual/actual.md"'])
    submodule_git_url: Optional[str] = Field(
        None, examples=['"git://example.com/defunkt/dotjs.git"']
    )


class Type24(Enum):
    symlink = "symlink"


class ContentSymlink(BaseModel):
    type: Type24
    target: str
    size: int
    name: str
    path: str
    sha: str
    url: AnyUrl
    git_url: Optional[AnyUrl] = None
    html_url: Optional[AnyUrl] = None
    download_url: Optional[AnyUrl] = None
    field_links: FieldLinks4 = Field(..., alias="_links")


class Type25(Enum):
    submodule = "submodule"


class ContentSubmodule(BaseModel):
    type: Type25
    submodule_git_url: AnyUrl
    size: int
    name: str
    path: str
    sha: str
    url: AnyUrl
    git_url: Optional[AnyUrl] = None
    html_url: Optional[AnyUrl] = None
    download_url: Optional[AnyUrl] = None
    field_links: FieldLinks4 = Field(..., alias="_links")


class FieldLinks10(BaseModel):
    self: Optional[str] = None
    git: Optional[str] = None
    html: Optional[str] = None


class Content1(BaseModel):
    name: Optional[str] = None
    path: Optional[str] = None
    sha: Optional[str] = None
    size: Optional[int] = None
    url: Optional[str] = None
    html_url: Optional[str] = None
    git_url: Optional[str] = None
    download_url: Optional[str] = None
    type: Optional[str] = None
    field_links: Optional[FieldLinks10] = Field(None, alias="_links")


class Author1(BaseModel):
    date: Optional[str] = None
    name: Optional[str] = None
    email: Optional[str] = None


class Committer1(Author1):
    pass


class Tree1(BaseModel):
    url: Optional[str] = None
    sha: Optional[str] = None


class Parent1(BaseModel):
    url: Optional[str] = None
    html_url: Optional[str] = None
    sha: Optional[str] = None


class Verification1(BaseModel):
    verified: Optional[bool] = None
    reason: Optional[str] = None
    signature: Optional[str] = None
    payload: Optional[str] = None


class Commit4(BaseModel):
    sha: Optional[str] = None
    node_id: Optional[str] = None
    url: Optional[str] = None
    html_url: Optional[str] = None
    author: Optional[Author1] = None
    committer: Optional[Committer1] = None
    message: Optional[str] = None
    tree: Optional[Tree1] = None
    parents: Optional[List[Parent1]] = None
    verification: Optional[Verification1] = None


class FileCommit(BaseModel):
    content: Optional[Content1] = None
    commit: Commit4


class Contributor(BaseModel):
    login: Optional[str] = None
    id: Optional[int] = None
    node_id: Optional[str] = None
    avatar_url: Optional[AnyUrl] = None
    gravatar_id: Optional[str] = None
    url: Optional[AnyUrl] = None
    html_url: Optional[AnyUrl] = None
    followers_url: Optional[AnyUrl] = None
    following_url: Optional[str] = None
    gists_url: Optional[str] = None
    starred_url: Optional[str] = None
    subscriptions_url: Optional[AnyUrl] = None
    organizations_url: Optional[AnyUrl] = None
    repos_url: Optional[AnyUrl] = None
    events_url: Optional[str] = None
    received_events_url: Optional[AnyUrl] = None
    type: str
    site_admin: Optional[bool] = None
    contributions: int
    email: Optional[str] = None
    name: Optional[str] = None


class Dependency1(Dependency):
    pass


class DependabotAlert(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    number: AlertNumber
    state: State = Field(..., description="The state of the Dependabot alert.")
    dependency: Dependency1 = Field(..., description="Details for the vulnerable dependency.")
    security_advisory: DependabotAlertSecurityAdvisory
    security_vulnerability: DependabotAlertSecurityVulnerability
    url: AlertUrl
    html_url: AlertHtmlUrl
    created_at: AlertCreatedAt
    updated_at: AlertUpdatedAt
    dismissed_at: Optional[AlertDismissedAt] = None
    dismissed_by: Optional[SimpleUser] = None
    dismissed_reason: DismissedReason = Field(
        ..., description="The reason that the alert was dismissed."
    )
    dismissed_comment: Optional[constr(max_length=280)] = Field(
        ..., description="An optional comment associated with the alert's dismissal."
    )
    fixed_at: Optional[AlertFixedAt] = None
    auto_dismissed_at: Optional[AlertAutoDismissedAt] = None


class DependabotSecret(BaseModel):
    name: str = Field(
        ..., description="The name of the secret.", examples=["MY_ARTIFACTORY_PASSWORD"]
    )
    created_at: AwareDatetime
    updated_at: AwareDatetime


class ChangeType(Enum):
    added = "added"
    removed = "removed"


class Vulnerability1(BaseModel):
    severity: str = Field(..., examples=["critical"])
    advisory_ghsa_id: str = Field(..., examples=["GHSA-rf4j-j272-fj86"])
    advisory_summary: str = Field(..., examples=["A summary of the advisory."])
    advisory_url: str = Field(..., examples=["https://github.com/advisories/GHSA-rf4j-j272-fj86"])


class Scope2(Enum):
    unknown = "unknown"
    runtime = "runtime"
    development = "development"


class DependencyGraphDiffItem(BaseModel):
    change_type: ChangeType
    manifest: str = Field(..., examples=["path/to/package-lock.json"])
    ecosystem: str = Field(..., examples=["npm"])
    name: str = Field(..., examples=["@actions/core"])
    version: str = Field(..., examples=["1.0.0"])
    package_url: Optional[str] = Field(..., examples=["pkg:/npm/%40actions/core@1.1.0"])
    license: Optional[str] = Field(..., examples=["MIT"])
    source_repository_url: Optional[str] = Field(
        ..., examples=["https://github.com/github/actions"]
    )
    vulnerabilities: List[Vulnerability1]
    scope: Scope2 = Field(
        ...,
        description="Where the dependency is utilized. `development` means that the dependency is only utilized in the development environment. `runtime` means that the dependency is utilized at runtime and in the development environment.",
    )


class DependencyGraphDiff(RootModel[List[DependencyGraphDiffItem]]):
    root: List[DependencyGraphDiffItem] = Field(
        ...,
        description="A diff of the dependencies between two commits.",
        title="Dependency Graph Diff",
    )


class CreationInfo(BaseModel):
    created: str = Field(
        ...,
        description="The date and time the SPDX document was created.",
        examples=["2021-11-03T00:00:00Z"],
    )
    creators: List[str] = Field(
        ..., description="The tools that were used to generate the SPDX document."
    )


class ExternalRef(BaseModel):
    referenceCategory: str = Field(
        ...,
        description="The category of reference to an external resource this reference refers to.",
        examples=["PACKAGE-MANAGER"],
    )
    referenceLocator: str = Field(
        ...,
        description="A locator for the particular external resource this reference refers to.",
        examples=["pkg:gem/rails@6.0.1"],
    )
    referenceType: str = Field(
        ...,
        description="The category of reference to an external resource this reference refers to.",
        examples=["purl"],
    )


class Package3(BaseModel):
    SPDXID: Optional[str] = Field(
        None, description="A unique SPDX identifier for the package.", examples=["SPDXRef-Package"]
    )
    name: Optional[str] = Field(
        None, description="The name of the package.", examples=["rubygems:github/github"]
    )
    versionInfo: Optional[str] = Field(
        None,
        description="The version of the package. If the package does not have an exact version specified,\na version range is given.",
        examples=["1.0.0"],
    )
    downloadLocation: Optional[str] = Field(
        None,
        description="The location where the package can be downloaded,\nor NOASSERTION if this has not been determined.",
        examples=["NOASSERTION"],
    )
    filesAnalyzed: Optional[bool] = Field(
        None,
        description="Whether the package's file content has been subjected to\nanalysis during the creation of the SPDX document.",
        examples=[False],
    )
    licenseConcluded: Optional[str] = Field(
        None,
        description="The license of the package as determined while creating the SPDX document.",
        examples=["MIT"],
    )
    licenseDeclared: Optional[str] = Field(
        None,
        description="The license of the package as declared by its author, or NOASSERTION if this information\nwas not available when the SPDX document was created.",
        examples=["NOASSERTION"],
    )
    supplier: Optional[str] = Field(
        None,
        description="The distribution source of this package, or NOASSERTION if this was not determined.",
        examples=["NOASSERTION"],
    )
    externalRefs: Optional[List[ExternalRef]] = None


class Sbom(BaseModel):
    SPDXID: str = Field(
        ..., description="The SPDX identifier for the SPDX document.", examples=["SPDXRef-DOCUMENT"]
    )
    spdxVersion: str = Field(
        ...,
        description="The version of the SPDX specification that this document conforms to.",
        examples=["SPDX-2.3"],
    )
    creationInfo: CreationInfo
    name: str = Field(..., description="The name of the SPDX document.", examples=["github/github"])
    dataLicense: str = Field(
        ...,
        description="The license under which the SPDX document is licensed.",
        examples=["CC0-1.0"],
    )
    documentDescribes: List[str] = Field(
        ..., description="The name of the repository that the SPDX document describes."
    )
    documentNamespace: str = Field(
        ...,
        description="The namespace for the SPDX document.",
        examples=["https://github.com/example/dependency_graph/sbom-123"],
    )
    packages: List[Package3]


class DependencyGraphSpdxSbom(BaseModel):
    sbom: Sbom


class Metadata2(RootModel[Optional[Dict[str, Union[str, float, bool]]]]):
    root: Optional[Dict[str, Union[str, float, bool]]] = None


class Relationship(Enum):
    direct = "direct"
    indirect = "indirect"


class Scope3(Enum):
    runtime = "runtime"
    development = "development"


class Dependency2(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    package_url: Optional[constr(pattern=r"^pkg")] = Field(
        None,
        description="Package-url (PURL) of dependency. See https://github.com/package-url/purl-spec for more details.",
        examples=["pkg:/npm/%40actions/http-client@1.0.11"],
    )
    metadata: Optional[Metadata2] = None
    relationship: Optional[Relationship] = Field(
        None,
        description="A notation of whether a dependency is requested directly by this manifest or is a dependency of another dependency.",
        examples=["direct"],
    )
    scope: Optional[Scope3] = Field(
        None,
        description="A notation of whether the dependency is required for the primary build artifact (runtime) or is only used for development. Future versions of this specification may allow for more granular scopes.",
        examples=["runtime"],
    )
    dependencies: Optional[List[str]] = Field(
        None,
        description="Array of package-url (PURLs) of direct child dependencies.",
        examples=["@actions/http-client"],
    )


class File(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    source_location: Optional[str] = Field(
        None,
        description="The path of the manifest file relative to the root of the Git repository.",
        examples=["/src/build/package-lock.json"],
    )


class Manifest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str = Field(..., description="The name of the manifest.", examples=["package-lock.json"])
    file: Optional[File] = None
    metadata: Optional[Metadata2] = None
    resolved: Optional[Dict[str, Dependency2]] = Field(
        None, description="A collection of resolved package dependencies."
    )


class Job1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    id: str = Field(
        ...,
        description="The external ID of the job.",
        examples=["5622a2b0-63f6-4732-8c34-a1ab27e102a11"],
    )
    correlator: str = Field(
        ...,
        description="Correlator provides a key that is used to group snapshots submitted over time. Only the \"latest\" submitted snapshot for a given combination of `job.correlator` and `detector.name` will be considered when calculating a repository's current dependencies. Correlator should be as unique as it takes to distinguish all detection runs for a given \"wave\" of CI workflow you run. If you're using GitHub Actions, a good default value for this could be the environment variables GITHUB_WORKFLOW and GITHUB_JOB concatenated together. If you're using a build matrix, then you'll also need to add additional key(s) to distinguish between each submission inside a matrix variation.",
        examples=["yourworkflowname_yourjobname"],
    )
    html_url: Optional[str] = Field(
        None, description="The url for the job.", examples=["http://example.com/build"]
    )


class Detector(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str = Field(
        ..., description="The name of the detector used.", examples=["docker buildtime detector"]
    )
    version: str = Field(..., description="The version of the detector used.", examples=["1.0.0"])
    url: str = Field(
        ...,
        description="The url of the detector used.",
        examples=["http://example.com/docker-buildtimer-detector"],
    )


class Snapshot(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    version: int = Field(..., description="The version of the repository snapshot submission.")
    job: Job1
    sha: constr(min_length=40, max_length=40) = Field(
        ...,
        description="The commit SHA associated with this dependency snapshot. Maximum length: 40 characters.",
        examples=["ddc951f4b1293222421f2c8df679786153acf689"],
    )
    ref: constr(pattern=r"^refs/") = Field(
        ...,
        description="The repository branch that triggered this snapshot.",
        examples=["refs/heads/main"],
    )
    detector: Detector = Field(..., description="A description of the detector used.")
    metadata: Optional[Metadata2] = None
    manifests: Optional[Dict[str, Manifest]] = Field(
        None,
        description="A collection of package manifests, which are a collection of related dependencies declared in a file or representing a logical group of dependencies.",
    )
    scanned: AwareDatetime = Field(
        ...,
        description="The time at which the snapshot was scanned.",
        examples=["2020-06-13T14:52:50-05:00"],
    )


class State13(Enum):
    error = "error"
    failure = "failure"
    inactive = "inactive"
    pending = "pending"
    success = "success"
    queued = "queued"
    in_progress = "in_progress"


class DeploymentStatus(BaseModel):
    url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/example/deployments/42/statuses/1"]
    )
    id: int = Field(..., examples=[1])
    node_id: str = Field(..., examples=["MDE2OkRlcGxveW1lbnRTdGF0dXMx"])
    state: State13 = Field(..., description="The state of the status.", examples=["success"])
    creator: Optional[SimpleUser] = None
    description: constr(max_length=140) = Field(
        ...,
        description="A short description of the status.",
        examples=["Deployment finished successfully."],
    )
    environment: Optional[str] = Field(
        "",
        description="The environment of the deployment that the status is for.",
        examples=["production"],
    )
    target_url: AnyUrl = Field(
        ...,
        description="Deprecated: the URL to associate with this status.",
        examples=["https://example.com/deployment/42/output"],
    )
    created_at: AwareDatetime = Field(..., examples=["2012-07-20T01:19:13Z"])
    updated_at: AwareDatetime = Field(..., examples=["2012-07-20T01:19:13Z"])
    deployment_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/example/deployments/42"]
    )
    repository_url: AnyUrl = Field(..., examples=["https://api.github.com/repos/octocat/example"])
    environment_url: Optional[AnyUrl] = Field(
        "",
        description="The URL for accessing your environment.",
        examples=["https://staging.example.com/"],
    )
    log_url: Optional[AnyUrl] = Field(
        "",
        description="The URL to associate with this status.",
        examples=["https://example.com/deployment/42/output"],
    )
    performed_via_github_app: Optional[Integration] = None


class WaitTimer(RootModel[int]):
    root: int = Field(
        ...,
        description="The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).",
        examples=[30],
    )


class DeploymentBranchPolicySettings(BaseModel):
    protected_branches: bool = Field(
        ...,
        description="Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`.",
    )
    custom_branch_policies: bool = Field(
        ...,
        description="Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`.",
    )


class ProtectionRules(BaseModel):
    id: int = Field(..., examples=[3515])
    node_id: str = Field(..., examples=["MDQ6R2F0ZTM1MTU="])
    type: str = Field(..., examples=["wait_timer"])
    wait_timer: Optional[WaitTimer] = None


class ProtectionRules1(BaseModel):
    id: int = Field(..., examples=[3755])
    node_id: str = Field(..., examples=["MDQ6R2F0ZTM3NTU="])
    prevent_self_review: Optional[bool] = Field(
        None,
        description="Whether deployments to this environment can be approved by the user who created the deployment.",
        examples=[False],
    )
    type: str = Field(..., examples=["required_reviewers"])
    reviewers: Optional[List[Reviewer]] = Field(
        None,
        description="The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.",
    )


class ProtectionRules2(BaseModel):
    id: int = Field(..., examples=[3515])
    node_id: str = Field(..., examples=["MDQ6R2F0ZTM1MTU="])
    type: str = Field(..., examples=["branch_policy"])


class Environment2(BaseModel):
    id: int = Field(..., description="The id of the environment.", examples=[56780428])
    node_id: str = Field(..., examples=["MDExOkVudmlyb25tZW50NTY3ODA0Mjg="])
    name: str = Field(..., description="The name of the environment.", examples=["staging"])
    url: str = Field(
        ..., examples=["https://api.github.com/repos/github/hello-world/environments/staging"]
    )
    html_url: str = Field(
        ...,
        examples=[
            "https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging"
        ],
    )
    created_at: AwareDatetime = Field(
        ...,
        description="The time that the environment was created, in ISO 8601 format.",
        examples=["2020-11-23T22:00:40Z"],
    )
    updated_at: AwareDatetime = Field(
        ...,
        description="The time that the environment was last updated, in ISO 8601 format.",
        examples=["2020-11-23T22:00:40Z"],
    )
    protection_rules: Optional[List[Union[ProtectionRules, ProtectionRules1, ProtectionRules2]]] = (
        Field(None, description="Built-in deployment protection rules for the environment.")
    )
    deployment_branch_policy: Optional[DeploymentBranchPolicySettings] = None


class PreventSelfReview(RootModel[bool]):
    root: bool = Field(
        ...,
        description="Whether or not a user who created the job is prevented from approving their own job.",
        examples=[False],
    )


class DeploymentBranchPolicy(BaseModel):
    id: Optional[int] = Field(
        None, description="The unique identifier of the branch or tag policy.", examples=[361471]
    )
    node_id: Optional[str] = Field(None, examples=["MDE2OkdhdGVCcmFuY2hQb2xpY3kzNjE0NzE="])
    name: Optional[str] = Field(
        None,
        description="The name pattern that branches or tags must match in order to deploy to the environment.",
        examples=["release/*"],
    )
    type: Optional[Target] = Field(
        None, description="Whether this rule targets a branch or tag.", examples=["branch"]
    )


class DeploymentBranchPolicyNamePatternWithType(BaseModel):
    name: str = Field(
        ...,
        description="The name pattern that branches or tags must match in order to deploy to the environment.\n\nWildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*/*`.\nFor more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).",
        examples=["release/*"],
    )
    type: Optional[Target] = Field(
        None, description="Whether this rule targets a branch or tag", examples=["branch"]
    )


class DeploymentBranchPolicyNamePattern(BaseModel):
    name: str = Field(
        ...,
        description="The name pattern that branches must match in order to deploy to the environment.\n\nWildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*/*`.\nFor more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).",
        examples=["release/*"],
    )


class CustomDeploymentRuleApp(BaseModel):
    id: int = Field(
        ...,
        description="The unique identifier of the deployment protection rule integration.",
        examples=[3515],
    )
    slug: str = Field(
        ...,
        description="The slugified name of the deployment protection rule integration.",
        examples=["my-custom-app"],
    )
    integration_url: str = Field(
        ...,
        description="The URL for the endpoint to get details about the app.",
        examples=["https://api.github.com/apps/custom-app-slug"],
    )
    node_id: str = Field(
        ...,
        description="The node ID for the deployment protection rule integration.",
        examples=["MDQ6R2F0ZTM1MTU="],
    )


class DeploymentProtectionRule(BaseModel):
    id: int = Field(
        ...,
        description="The unique identifier for the deployment protection rule.",
        examples=[3515],
    )
    node_id: str = Field(
        ...,
        description="The node ID for the deployment protection rule.",
        examples=["MDQ6R2F0ZTM1MTU="],
    )
    enabled: bool = Field(
        ...,
        description="Whether the deployment protection rule is enabled for the environment.",
        examples=[True],
    )
    app: CustomDeploymentRuleApp


class ShortBlob(BaseModel):
    url: str
    sha: str


class Blob(BaseModel):
    content: str
    encoding: str
    url: AnyUrl
    sha: str
    size: Optional[int] = None
    node_id: str
    highlighted_content: Optional[str] = None


class Author2(BaseModel):
    date: AwareDatetime = Field(
        ..., description="Timestamp of the commit", examples=["2014-08-09T08:02:04+12:00"]
    )
    email: str = Field(
        ..., description="Git email address of the user", examples=["monalisa.octocat@example.com"]
    )
    name: str = Field(..., description="Name of the git user", examples=["Monalisa Octocat"])


class Committer2(Author2):
    pass


class Tree2(BaseModel):
    sha: str = Field(
        ..., description="SHA for the commit", examples=["7638417db6d59f3c431d3e1f261cc637155684cd"]
    )
    url: AnyUrl


class Parent2(BaseModel):
    sha: str = Field(
        ..., description="SHA for the commit", examples=["7638417db6d59f3c431d3e1f261cc637155684cd"]
    )
    url: AnyUrl
    html_url: AnyUrl


class Verification2(BaseModel):
    verified: bool
    reason: str
    signature: Optional[str] = None
    payload: Optional[str] = None


class GitCommit(BaseModel):
    sha: str = Field(
        ..., description="SHA for the commit", examples=["7638417db6d59f3c431d3e1f261cc637155684cd"]
    )
    node_id: str
    url: AnyUrl
    author: Author2 = Field(..., description="Identifying information for the git-user")
    committer: Committer2 = Field(..., description="Identifying information for the git-user")
    message: str = Field(
        ..., description="Message describing the purpose of the commit", examples=["Fix #42"]
    )
    tree: Tree2
    parents: List[Parent2]
    verification: Verification2
    html_url: AnyUrl


class Object(BaseModel):
    type: str
    sha: constr(min_length=40, max_length=40) = Field(
        ...,
        description="SHA for the reference",
        examples=["7638417db6d59f3c431d3e1f261cc637155684cd"],
    )
    url: AnyUrl


class GitRef(BaseModel):
    ref: str
    node_id: str
    url: AnyUrl
    object: Object


class Tagger(BaseModel):
    date: str
    email: str
    name: str


class Object1(BaseModel):
    sha: str
    type: str
    url: AnyUrl


class GitTag(BaseModel):
    node_id: str = Field(
        ..., examples=["MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw=="]
    )
    tag: str = Field(..., description="Name of the tag", examples=["v0.0.1"])
    sha: str = Field(..., examples=["940bd336248efae0f9ee5bc7b2d5c985887b16ac"])
    url: AnyUrl = Field(
        ...,
        description="URL for the tag",
        examples=[
            "https://api.github.com/repositories/42/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac"
        ],
    )
    message: str = Field(
        ...,
        description="Message describing the purpose of the tag",
        examples=["Initial public release"],
    )
    tagger: Tagger
    object: Object1
    verification: Optional[Verification] = None


class TreeItem(BaseModel):
    path: Optional[str] = Field(None, examples=["test/file.rb"])
    mode: Optional[str] = Field(None, examples=["040000"])
    type: Optional[str] = Field(None, examples=["tree"])
    sha: Optional[str] = Field(None, examples=["23f6827669e43831def8a7ad935069c8bd418261"])
    size: Optional[int] = Field(None, examples=[12])
    url: Optional[str] = Field(
        None,
        examples=[
            "https://api.github.com/repos/owner-482f3203ecf01f67e9deb18e/BBB_Private_Repo/git/blobs/23f6827669e43831def8a7ad935069c8bd418261"
        ],
    )


class GitTree(BaseModel):
    sha: str
    url: AnyUrl
    truncated: bool
    tree: List[TreeItem] = Field(
        ...,
        description="Objects specifying a tree structure",
        examples=[
            {
                "path": "file.rb",
                "mode": "100644",
                "type": "blob",
                "size": 30,
                "sha": "44b4fc6d56897b048c772eb4087f854f46256132",
                "url": "https://api.github.com/repos/octocat/Hello-World/git/blobs/44b4fc6d56897b048c772eb4087f854f46256132",
                "properties": {
                    "path": {"type": "string"},
                    "mode": {"type": "string"},
                    "type": {"type": "string"},
                    "size": {"type": "integer"},
                    "sha": {"type": "string"},
                    "url": {"type": "string"},
                },
                "required": ["path", "mode", "type", "sha", "url", "size"],
            }
        ],
    )


class HookResponse(BaseModel):
    code: Optional[int] = None
    status: Optional[str] = None
    message: Optional[str] = None


class Hook(BaseModel):
    type: str
    id: int = Field(..., description="Unique identifier of the webhook.", examples=[42])
    name: str = Field(
        ..., description="The name of a valid service, use 'web' for a webhook.", examples=["web"]
    )
    active: bool = Field(
        ...,
        description="Determines whether the hook is actually triggered on pushes.",
        examples=[True],
    )
    events: List[str] = Field(
        ...,
        description="Determines what events the hook is triggered for. Default: ['push'].",
        examples=["push", "pull_request"],
    )
    config: WebhookConfig
    updated_at: AwareDatetime = Field(..., examples=["2011-09-06T20:39:23Z"])
    created_at: AwareDatetime = Field(..., examples=["2011-09-06T17:26:27Z"])
    url: AnyUrl = Field(..., examples=["https://api.github.com/repos/octocat/Hello-World/hooks/1"])
    test_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/Hello-World/hooks/1/test"]
    )
    ping_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/Hello-World/hooks/1/pings"]
    )
    deliveries_url: Optional[AnyUrl] = Field(
        None, examples=["https://api.github.com/repos/octocat/Hello-World/hooks/1/deliveries"]
    )
    last_response: HookResponse


class Status11(Enum):
    auth = "auth"
    error = "error"
    none = "none"
    detecting = "detecting"
    choose = "choose"
    auth_failed = "auth_failed"
    importing = "importing"
    mapping = "mapping"
    waiting_to_push = "waiting_to_push"
    pushing = "pushing"
    complete = "complete"
    setup = "setup"
    unknown = "unknown"
    detection_found_multiple = "detection_found_multiple"
    detection_found_nothing = "detection_found_nothing"
    detection_needs_auth = "detection_needs_auth"


class ProjectChoice(BaseModel):
    vcs: Optional[str] = None
    tfvc_project: Optional[str] = None
    human_name: Optional[str] = None


class Import(BaseModel):
    vcs: Optional[str] = None
    use_lfs: Optional[bool] = None
    vcs_url: str = Field(..., description="The URL of the originating repository.")
    svc_root: Optional[str] = None
    tfvc_project: Optional[str] = None
    status: Status11
    status_text: Optional[str] = None
    failed_step: Optional[str] = None
    error_message: Optional[str] = None
    import_percent: Optional[int] = None
    commit_count: Optional[int] = None
    push_percent: Optional[int] = None
    has_large_files: Optional[bool] = None
    large_files_size: Optional[int] = None
    large_files_count: Optional[int] = None
    project_choices: Optional[List[ProjectChoice]] = None
    message: Optional[str] = None
    authors_count: Optional[int] = None
    url: AnyUrl
    html_url: AnyUrl
    authors_url: AnyUrl
    repository_url: AnyUrl
    svn_root: Optional[str] = None


class PorterAuthor(BaseModel):
    id: int
    remote_id: str
    remote_name: str
    email: str
    name: str
    url: AnyUrl
    import_url: AnyUrl


class PorterLargeFile(BaseModel):
    ref_name: str
    path: str
    oid: str
    size: int


class IssueEventLabel(BaseModel):
    name: Optional[str] = None
    color: Optional[str] = None


class IssueEventDismissedReview(BaseModel):
    state: str
    review_id: int
    dismissal_message: Optional[str] = None
    dismissal_commit_id: Optional[str] = None


class IssueEventMilestone(BaseModel):
    title: str


class IssueEventProjectCard(BaseModel):
    url: AnyUrl
    id: int
    project_url: AnyUrl
    project_id: int
    column_name: str
    previous_column_name: Optional[str] = None


class IssueEventRename(BaseModel):
    from_: str = Field(..., alias="from")
    to: str


class IssueEvent(BaseModel):
    id: int = Field(..., examples=[1])
    node_id: str = Field(..., examples=["MDEwOklzc3VlRXZlbnQx"])
    url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/Hello-World/issues/events/1"]
    )
    actor: Optional[SimpleUser] = None
    event: str = Field(..., examples=["closed"])
    commit_id: Optional[str] = Field(..., examples=["6dcb09b5b57875f334f61aebed695e2e4193db5e"])
    commit_url: Optional[str] = Field(
        ...,
        examples=[
            "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
        ],
    )
    created_at: AwareDatetime = Field(..., examples=["2011-04-14T16:00:49Z"])
    issue: Optional[Issue] = None
    label: Optional[IssueEventLabel] = None
    assignee: Optional[SimpleUser] = None
    assigner: Optional[SimpleUser] = None
    review_requester: Optional[SimpleUser] = None
    requested_reviewer: Optional[SimpleUser] = None
    requested_team: Optional[Team] = None
    dismissed_review: Optional[IssueEventDismissedReview] = None
    milestone: Optional[IssueEventMilestone] = None
    project_card: Optional[IssueEventProjectCard] = None
    rename: Optional[IssueEventRename] = None
    author_association: Optional[AuthorAssociation] = None
    lock_reason: Optional[str] = None
    performed_via_github_app: Optional[Integration] = None


class Label1(BaseModel):
    name: str
    color: str


class LabeledIssueEvent(BaseModel):
    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: Optional[str] = None
    commit_url: Optional[str] = None
    created_at: str
    performed_via_github_app: Optional[Integration] = None
    label: Label1


class UnlabeledIssueEvent(LabeledIssueEvent):
    pass


class AssignedIssueEvent(BaseModel):
    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: Optional[str] = None
    commit_url: Optional[str] = None
    created_at: str
    performed_via_github_app: Integration
    assignee: SimpleUser
    assigner: SimpleUser


class UnassignedIssueEvent(BaseModel):
    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: Optional[str] = None
    commit_url: Optional[str] = None
    created_at: str
    performed_via_github_app: Optional[Integration] = None
    assignee: SimpleUser
    assigner: SimpleUser


class Milestone1(IssueEventMilestone):
    pass


class MilestonedIssueEvent(BaseModel):
    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: Optional[str] = None
    commit_url: Optional[str] = None
    created_at: str
    performed_via_github_app: Optional[Integration] = None
    milestone: Milestone1


class DemilestonedIssueEvent(MilestonedIssueEvent):
    pass


class Rename(IssueEventRename):
    pass


class RenamedIssueEvent(BaseModel):
    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: Optional[str] = None
    commit_url: Optional[str] = None
    created_at: str
    performed_via_github_app: Optional[Integration] = None
    rename: Rename


class ReviewRequestedIssueEvent(BaseModel):
    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: Optional[str] = None
    commit_url: Optional[str] = None
    created_at: str
    performed_via_github_app: Optional[Integration] = None
    review_requester: SimpleUser
    requested_team: Optional[Team] = None
    requested_reviewer: Optional[SimpleUser] = None


class ReviewRequestRemovedIssueEvent(ReviewRequestedIssueEvent):
    pass


class DismissedReview(BaseModel):
    state: str
    review_id: int
    dismissal_message: Optional[str] = None
    dismissal_commit_id: Optional[str] = None


class ReviewDismissedIssueEvent(BaseModel):
    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: Optional[str] = None
    commit_url: Optional[str] = None
    created_at: str
    performed_via_github_app: Optional[Integration] = None
    dismissed_review: DismissedReview


class LockedIssueEvent(BaseModel):
    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: Optional[str] = None
    commit_url: Optional[str] = None
    created_at: str
    performed_via_github_app: Optional[Integration] = None
    lock_reason: Optional[str] = Field(..., examples=['"off-topic"'])


class ProjectCard1(BaseModel):
    id: int
    url: AnyUrl
    project_id: int
    project_url: AnyUrl
    column_name: str
    previous_column_name: Optional[str] = None


class AddedToProjectIssueEvent(BaseModel):
    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: Optional[str] = None
    commit_url: Optional[str] = None
    created_at: str
    performed_via_github_app: Optional[Integration] = None
    project_card: Optional[ProjectCard1] = None


class MovedColumnInProjectIssueEvent(AddedToProjectIssueEvent):
    pass


class RemovedFromProjectIssueEvent(AddedToProjectIssueEvent):
    pass


class ConvertedNoteToIssueIssueEvent(BaseModel):
    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: Optional[str] = None
    commit_url: Optional[str] = None
    created_at: str
    performed_via_github_app: Integration
    project_card: Optional[ProjectCard1] = None


class IssueEventForIssue(
    RootModel[
        Union[
            LabeledIssueEvent,
            UnlabeledIssueEvent,
            AssignedIssueEvent,
            UnassignedIssueEvent,
            MilestonedIssueEvent,
            DemilestonedIssueEvent,
            RenamedIssueEvent,
            ReviewRequestedIssueEvent,
            ReviewRequestRemovedIssueEvent,
            ReviewDismissedIssueEvent,
            LockedIssueEvent,
            AddedToProjectIssueEvent,
            MovedColumnInProjectIssueEvent,
            RemovedFromProjectIssueEvent,
            ConvertedNoteToIssueIssueEvent,
        ]
    ]
):
    root: Union[
        LabeledIssueEvent,
        UnlabeledIssueEvent,
        AssignedIssueEvent,
        UnassignedIssueEvent,
        MilestonedIssueEvent,
        DemilestonedIssueEvent,
        RenamedIssueEvent,
        ReviewRequestedIssueEvent,
        ReviewRequestRemovedIssueEvent,
        ReviewDismissedIssueEvent,
        LockedIssueEvent,
        AddedToProjectIssueEvent,
        MovedColumnInProjectIssueEvent,
        RemovedFromProjectIssueEvent,
        ConvertedNoteToIssueIssueEvent,
    ] = Field(..., description="Issue Event for Issue", title="Issue Event for Issue")


class Label3(BaseModel):
    id: int = Field(..., examples=[208045946])
    node_id: str = Field(..., examples=["MDU6TGFiZWwyMDgwNDU5NDY="])
    url: AnyUrl = Field(
        ...,
        description="URL for the label",
        examples=["https://api.github.com/repositories/42/labels/bug"],
    )
    name: str = Field(..., description="The name of the label.", examples=["bug"])
    description: Optional[str] = Field(..., examples=["Something isn't working"])
    color: str = Field(
        ...,
        description="6-character hex code, without the leading #, identifying the color",
        examples=["FFFFFF"],
    )
    default: bool = Field(..., examples=[True])


class TimelineCommentEvent(BaseModel):
    event: str
    actor: SimpleUser
    id: int = Field(..., description="Unique identifier of the issue comment", examples=[42])
    node_id: str
    url: AnyUrl = Field(
        ...,
        description="URL for the issue comment",
        examples=["https://api.github.com/repositories/42/issues/comments/1"],
    )
    body: Optional[str] = Field(
        None,
        description="Contents of the issue comment",
        examples=["What version of Safari were you using when you observed this bug?"],
    )
    body_text: Optional[str] = None
    body_html: Optional[str] = None
    html_url: AnyUrl
    user: SimpleUser
    created_at: AwareDatetime = Field(..., examples=["2011-04-14T16:00:49Z"])
    updated_at: AwareDatetime = Field(..., examples=["2011-04-14T16:00:49Z"])
    issue_url: AnyUrl
    author_association: AuthorAssociation
    performed_via_github_app: Optional[Integration] = None
    reactions: Optional[ReactionRollup] = None


class Source(BaseModel):
    type: Optional[str] = None
    issue: Optional[Issue] = None


class TimelineCrossReferencedEvent(BaseModel):
    event: str
    actor: Optional[SimpleUser] = None
    created_at: AwareDatetime
    updated_at: AwareDatetime
    source: Source


class TimelineCommittedEvent(BaseModel):
    event: Optional[str] = None
    sha: str = Field(
        ..., description="SHA for the commit", examples=["7638417db6d59f3c431d3e1f261cc637155684cd"]
    )
    node_id: str
    url: AnyUrl
    author: Author2 = Field(..., description="Identifying information for the git-user")
    committer: Committer2 = Field(..., description="Identifying information for the git-user")
    message: str = Field(
        ..., description="Message describing the purpose of the commit", examples=["Fix #42"]
    )
    tree: Tree2
    parents: List[Parent2]
    verification: Verification2
    html_url: AnyUrl


class Html1(Link):
    pass


class PullRequest1(Link):
    pass


class FieldLinks11(BaseModel):
    html: Html1
    pull_request: PullRequest1


class TimelineReviewedEvent(BaseModel):
    event: str
    id: int = Field(..., description="Unique identifier of the review", examples=[42])
    node_id: str = Field(..., examples=["MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA="])
    user: SimpleUser
    body: Optional[str] = Field(
        ..., description="The text of the review.", examples=["This looks great."]
    )
    state: str = Field(..., examples=["CHANGES_REQUESTED"])
    html_url: AnyUrl = Field(
        ..., examples=["https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"]
    )
    pull_request_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/Hello-World/pulls/12"]
    )
    field_links: FieldLinks11 = Field(..., alias="_links")
    submitted_at: Optional[AwareDatetime] = None
    commit_id: str = Field(
        ...,
        description="A commit SHA for the review.",
        examples=["54bb654c9e6025347f57900a4a5c2313a96b8035"],
    )
    body_html: Optional[str] = None
    body_text: Optional[str] = None
    author_association: AuthorAssociation


class Self1(BaseModel):
    href: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"]
    )


class Html2(BaseModel):
    href: AnyUrl = Field(
        ..., examples=["https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"]
    )


class PullRequest2(BaseModel):
    href: AnyUrl = Field(..., examples=["https://api.github.com/repos/octocat/Hello-World/pulls/1"])


class FieldLinks12(BaseModel):
    self: Self1
    html: Html2
    pull_request: PullRequest2


class StartSide(Enum):
    LEFT = "LEFT"
    RIGHT = "RIGHT"
    NoneType_None = None


class Side(Enum):
    LEFT = "LEFT"
    RIGHT = "RIGHT"


class SubjectType(Enum):
    line = "line"
    file = "file"


class PullRequestReviewComment(BaseModel):
    url: str = Field(
        ...,
        description="URL for the pull request review comment",
        examples=["https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"],
    )
    pull_request_review_id: Optional[int] = Field(
        ...,
        description="The ID of the pull request review to which the comment belongs.",
        examples=[42],
    )
    id: int = Field(..., description="The ID of the pull request review comment.", examples=[1])
    node_id: str = Field(
        ...,
        description="The node ID of the pull request review comment.",
        examples=["MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw"],
    )
    diff_hunk: str = Field(
        ...,
        description="The diff of the line that the comment refers to.",
        examples=["@@ -16,33 +16,40 @@ public class Connection : IConnection..."],
    )
    path: str = Field(
        ...,
        description="The relative path of the file to which the comment applies.",
        examples=["config/database.yaml"],
    )
    position: Optional[int] = Field(
        None,
        description="The line index in the diff to which the comment applies. This field is deprecated; use `line` instead.",
        examples=[1],
    )
    original_position: Optional[int] = Field(
        None,
        description="The index of the original line in the diff to which the comment applies. This field is deprecated; use `original_line` instead.",
        examples=[4],
    )
    commit_id: str = Field(
        ...,
        description="The SHA of the commit to which the comment applies.",
        examples=["6dcb09b5b57875f334f61aebed695e2e4193db5e"],
    )
    original_commit_id: str = Field(
        ...,
        description="The SHA of the original commit to which the comment applies.",
        examples=["9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840"],
    )
    in_reply_to_id: Optional[int] = Field(
        None, description="The comment ID to reply to.", examples=[8]
    )
    user: SimpleUser
    body: str = Field(
        ...,
        description="The text of the comment.",
        examples=["We should probably include a check for null values here."],
    )
    created_at: AwareDatetime = Field(..., examples=["2011-04-14T16:00:49Z"])
    updated_at: AwareDatetime = Field(..., examples=["2011-04-14T16:00:49Z"])
    html_url: AnyUrl = Field(
        ...,
        description="HTML URL for the pull request review comment.",
        examples=["https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"],
    )
    pull_request_url: AnyUrl = Field(
        ...,
        description="URL for the pull request that the review comment belongs to.",
        examples=["https://api.github.com/repos/octocat/Hello-World/pulls/1"],
    )
    author_association: AuthorAssociation
    field_links: FieldLinks12 = Field(..., alias="_links")
    start_line: Optional[int] = Field(
        None, description="The first line of the range for a multi-line comment.", examples=[2]
    )
    original_start_line: Optional[int] = Field(
        None, description="The first line of the range for a multi-line comment.", examples=[2]
    )
    start_side: Optional[StartSide] = Field(
        "RIGHT", description="The side of the first line of the range for a multi-line comment."
    )
    line: Optional[int] = Field(
        None,
        description="The line of the blob to which the comment applies. The last line of the range for a multi-line comment",
        examples=[2],
    )
    original_line: Optional[int] = Field(
        None,
        description="The line of the blob to which the comment applies. The last line of the range for a multi-line comment",
        examples=[2],
    )
    side: Optional[Side] = Field(
        "RIGHT",
        description="The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment",
    )
    subject_type: Optional[SubjectType] = Field(
        None,
        description="The level at which the comment is targeted, can be a diff line or a file.",
    )
    reactions: Optional[ReactionRollup] = None
    body_html: Optional[str] = Field(None, examples=['"<p>comment body</p>"'])
    body_text: Optional[str] = Field(None, examples=['"comment body"'])


class TimelineLineCommentedEvent(BaseModel):
    event: Optional[str] = None
    node_id: Optional[str] = None
    comments: Optional[List[PullRequestReviewComment]] = None


class TimelineCommitCommentedEvent(BaseModel):
    event: Optional[str] = None
    node_id: Optional[str] = None
    commit_id: Optional[str] = None
    comments: Optional[List[CommitComment]] = None


class TimelineAssignedIssueEvent(BaseModel):
    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: Optional[str] = None
    commit_url: Optional[str] = None
    created_at: str
    performed_via_github_app: Optional[Integration] = None
    assignee: SimpleUser


class TimelineUnassignedIssueEvent(TimelineAssignedIssueEvent):
    pass


class StateChangeIssueEvent(BaseModel):
    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: Optional[str] = None
    commit_url: Optional[str] = None
    created_at: str
    performed_via_github_app: Optional[Integration] = None
    state_reason: Optional[str] = None


class TimelineIssueEvents(
    RootModel[
        Union[
            LabeledIssueEvent,
            UnlabeledIssueEvent,
            MilestonedIssueEvent,
            DemilestonedIssueEvent,
            RenamedIssueEvent,
            ReviewRequestedIssueEvent,
            ReviewRequestRemovedIssueEvent,
            ReviewDismissedIssueEvent,
            LockedIssueEvent,
            AddedToProjectIssueEvent,
            MovedColumnInProjectIssueEvent,
            RemovedFromProjectIssueEvent,
            ConvertedNoteToIssueIssueEvent,
            TimelineCommentEvent,
            TimelineCrossReferencedEvent,
            TimelineCommittedEvent,
            TimelineReviewedEvent,
            TimelineLineCommentedEvent,
            TimelineCommitCommentedEvent,
            TimelineAssignedIssueEvent,
            TimelineUnassignedIssueEvent,
            StateChangeIssueEvent,
        ]
    ]
):
    root: Union[
        LabeledIssueEvent,
        UnlabeledIssueEvent,
        MilestonedIssueEvent,
        DemilestonedIssueEvent,
        RenamedIssueEvent,
        ReviewRequestedIssueEvent,
        ReviewRequestRemovedIssueEvent,
        ReviewDismissedIssueEvent,
        LockedIssueEvent,
        AddedToProjectIssueEvent,
        MovedColumnInProjectIssueEvent,
        RemovedFromProjectIssueEvent,
        ConvertedNoteToIssueIssueEvent,
        TimelineCommentEvent,
        TimelineCrossReferencedEvent,
        TimelineCommittedEvent,
        TimelineReviewedEvent,
        TimelineLineCommentedEvent,
        TimelineCommitCommentedEvent,
        TimelineAssignedIssueEvent,
        TimelineUnassignedIssueEvent,
        StateChangeIssueEvent,
    ] = Field(..., description="Timeline Event", title="Timeline Event")


class DeployKey(BaseModel):
    id: int
    key: str
    url: str
    title: str
    verified: bool
    created_at: str
    read_only: bool
    added_by: Optional[str] = None
    last_used: Optional[str] = None


class Language2(RootModel[Optional[Dict[str, int]]]):
    root: Optional[Dict[str, int]] = None


class FieldLinks13(FieldLinks4):
    pass


class LicenseContent(BaseModel):
    name: str
    path: str
    sha: str
    size: int
    url: AnyUrl
    html_url: Optional[AnyUrl] = None
    git_url: Optional[AnyUrl] = None
    download_url: Optional[AnyUrl] = None
    type: str
    content: str
    encoding: str
    field_links: FieldLinks13 = Field(..., alias="_links")
    license: Optional[LicenseSimple] = None


class MergeType(Enum):
    merge = "merge"
    fast_forward = "fast-forward"
    none = "none"


class MergedUpstream(BaseModel):
    message: Optional[str] = None
    merge_type: Optional[MergeType] = None
    base_branch: Optional[str] = None


class PagesSourceHash(BaseModel):
    branch: str
    path: str


class State14(Enum):
    new = "new"
    authorization_created = "authorization_created"
    authorization_pending = "authorization_pending"
    authorized = "authorized"
    authorization_revoked = "authorization_revoked"
    issued = "issued"
    uploaded = "uploaded"
    approved = "approved"
    errored = "errored"
    bad_authz = "bad_authz"
    destroy_pending = "destroy_pending"
    dns_changed = "dns_changed"


class PagesHttpsCertificate(BaseModel):
    state: State14 = Field(..., examples=["approved"])
    description: str = Field(..., examples=["Certificate is approved"])
    domains: List[str] = Field(
        ...,
        description="Array of the domain set and its alternate name (if it is configured)",
        examples=["example.com", "www.example.com"],
    )
    expires_at: Optional[date] = None


class Status12(Enum):
    built = "built"
    building = "building"
    errored = "errored"
    NoneType_None = None


class ProtectedDomainState(Enum):
    pending = "pending"
    verified = "verified"
    unverified = "unverified"
    NoneType_None = None


class BuildType(Enum):
    legacy = "legacy"
    workflow = "workflow"
    NoneType_None = None


class Page1(BaseModel):
    url: AnyUrl = Field(
        ...,
        description="The API address for accessing this Page resource.",
        examples=["https://api.github.com/repos/github/hello-world/pages"],
    )
    status: Status12 = Field(
        ..., description="The status of the most recent build of the Page.", examples=["built"]
    )
    cname: Optional[str] = Field(
        ..., description="The Pages site's custom domain", examples=["example.com"]
    )
    protected_domain_state: Optional[ProtectedDomainState] = Field(
        None, description="The state if the domain is verified", examples=["pending"]
    )
    pending_domain_unverified_at: Optional[AwareDatetime] = Field(
        None, description="The timestamp when a pending domain becomes unverified."
    )
    custom_404: bool = Field(
        ..., description="Whether the Page has a custom 404 page.", examples=[False]
    )
    html_url: Optional[AnyUrl] = Field(
        None,
        description="The web address the Page can be accessed from.",
        examples=["https://example.com"],
    )
    build_type: Optional[BuildType] = Field(
        None, description="The process in which the Page will be built.", examples=["legacy"]
    )
    source: Optional[PagesSourceHash] = None
    public: bool = Field(
        ...,
        description="Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.",
        examples=[True],
    )
    https_certificate: Optional[PagesHttpsCertificate] = None
    https_enforced: Optional[bool] = Field(
        None, description="Whether https is enabled on the domain", examples=[True]
    )


class Error2(BaseModel):
    message: Optional[str] = None


class PageBuild(BaseModel):
    url: AnyUrl
    status: str
    error: Error2
    pusher: Optional[SimpleUser] = None
    commit: str
    duration: int
    created_at: AwareDatetime
    updated_at: AwareDatetime


class PageBuildStatus(BaseModel):
    url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/github/hello-world/pages/builds/latest"]
    )
    status: str = Field(..., examples=["queued"])


class PageDeployment(BaseModel):
    status_url: AnyUrl = Field(
        ...,
        description="The URI to monitor GitHub Pages deployment status.",
        examples=[
            "https://api.github.com/repos/github/hello-world/pages/deployments/4fd754f7e594640989b406850d0bc8f06a121251"
        ],
    )
    page_url: AnyUrl = Field(
        ..., description="The URI to the deployed GitHub Pages.", examples=["hello-world.github.io"]
    )
    preview_url: Optional[AnyUrl] = Field(
        None,
        description="The URI to the deployed GitHub Pages preview.",
        examples=["monalisa-1231a2312sa32-23sda74.drafts.github.io"],
    )


class Status13(Enum):
    deployment_in_progress = "deployment_in_progress"
    syncing_files = "syncing_files"
    finished_file_sync = "finished_file_sync"
    updating_pages = "updating_pages"
    purging_cdn = "purging_cdn"
    deployment_cancelled = "deployment_cancelled"
    deployment_failed = "deployment_failed"
    deployment_content_failed = "deployment_content_failed"
    deployment_attempt_error = "deployment_attempt_error"
    deployment_lost = "deployment_lost"
    succeed = "succeed"


class PagesDeploymentStatus(BaseModel):
    status: Optional[Status13] = Field(None, description="The current status of the deployment.")


class Domain(BaseModel):
    host: Optional[str] = None
    uri: Optional[str] = None
    nameservers: Optional[str] = None
    dns_resolves: Optional[bool] = None
    is_proxied: Optional[bool] = None
    is_cloudflare_ip: Optional[bool] = None
    is_fastly_ip: Optional[bool] = None
    is_old_ip_address: Optional[bool] = None
    is_a_record: Optional[bool] = None
    has_cname_record: Optional[bool] = None
    has_mx_records_present: Optional[bool] = None
    is_valid_domain: Optional[bool] = None
    is_apex_domain: Optional[bool] = None
    should_be_a_record: Optional[bool] = None
    is_cname_to_github_user_domain: Optional[bool] = None
    is_cname_to_pages_dot_github_dot_com: Optional[bool] = None
    is_cname_to_fastly: Optional[bool] = None
    is_pointed_to_github_pages_ip: Optional[bool] = None
    is_non_github_pages_ip_present: Optional[bool] = None
    is_pages_domain: Optional[bool] = None
    is_served_by_pages: Optional[bool] = None
    is_valid: Optional[bool] = None
    reason: Optional[str] = None
    responds_to_https: Optional[bool] = None
    enforces_https: Optional[bool] = None
    https_error: Optional[str] = None
    is_https_eligible: Optional[bool] = None
    caa_error: Optional[str] = None


class AltDomain(Domain):
    pass


class PagesHealthCheck(BaseModel):
    domain: Optional[Domain] = None
    alt_domain: Optional[AltDomain] = None


class Label4(BaseModel):
    id: int
    node_id: str
    url: str
    name: str
    description: Optional[str] = None
    color: str
    default: bool


class Owner2(BaseModel):
    avatar_url: AnyUrl
    events_url: str
    followers_url: AnyUrl
    following_url: str
    gists_url: str
    gravatar_id: Optional[str] = None
    html_url: AnyUrl
    id: int
    node_id: str
    login: str
    organizations_url: AnyUrl
    received_events_url: AnyUrl
    repos_url: AnyUrl
    site_admin: bool
    starred_url: str
    subscriptions_url: AnyUrl
    type: str
    url: AnyUrl


class Permissions14(Permissions8):
    pass


class License2(BaseModel):
    key: str
    name: str
    url: Optional[AnyUrl] = None
    spdx_id: Optional[str] = None
    node_id: str


class Repo3(BaseModel):
    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    deployments_url: AnyUrl
    description: Optional[str] = None
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int
    node_id: str
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: AnyUrl
    merges_url: AnyUrl
    milestones_url: str
    name: str
    notifications_url: str
    owner: Owner2
    private: bool
    pulls_url: str
    releases_url: str
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    trees_url: str
    url: AnyUrl
    clone_url: str
    default_branch: str
    forks: int
    forks_count: int
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_projects: bool
    has_wiki: bool
    has_pages: bool
    has_discussions: bool
    homepage: Optional[AnyUrl] = None
    language: Optional[str] = None
    master_branch: Optional[str] = None
    archived: bool
    disabled: bool
    visibility: Optional[str] = Field(
        None, description="The repository visibility: public, private, or internal."
    )
    mirror_url: Optional[AnyUrl] = None
    open_issues: int
    open_issues_count: int
    permissions: Optional[Permissions14] = None
    temp_clone_token: Optional[str] = None
    allow_merge_commit: Optional[bool] = None
    allow_squash_merge: Optional[bool] = None
    allow_rebase_merge: Optional[bool] = None
    license: Optional[License2] = None
    pushed_at: AwareDatetime
    size: int
    ssh_url: str
    stargazers_count: int
    svn_url: AnyUrl
    topics: Optional[List[str]] = None
    watchers: int
    watchers_count: int
    created_at: AwareDatetime
    updated_at: AwareDatetime
    allow_forking: Optional[bool] = None
    is_template: Optional[bool] = None
    web_commit_signoff_required: Optional[bool] = None


class User1(Owner2):
    pass


class Head2(BaseModel):
    label: str
    ref: str
    repo: Optional[Repo3] = None
    sha: str
    user: User1


class Repo4(BaseModel):
    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    deployments_url: AnyUrl
    description: Optional[str] = None
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int
    is_template: Optional[bool] = None
    node_id: str
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: AnyUrl
    merges_url: AnyUrl
    milestones_url: str
    name: str
    notifications_url: str
    owner: Owner2
    private: bool
    pulls_url: str
    releases_url: str
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    trees_url: str
    url: AnyUrl
    clone_url: str
    default_branch: str
    forks: int
    forks_count: int
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_projects: bool
    has_wiki: bool
    has_pages: bool
    has_discussions: bool
    homepage: Optional[AnyUrl] = None
    language: Optional[str] = None
    master_branch: Optional[str] = None
    archived: bool
    disabled: bool
    visibility: Optional[str] = Field(
        None, description="The repository visibility: public, private, or internal."
    )
    mirror_url: Optional[AnyUrl] = None
    open_issues: int
    open_issues_count: int
    permissions: Optional[Permissions14] = None
    temp_clone_token: Optional[str] = None
    allow_merge_commit: Optional[bool] = None
    allow_squash_merge: Optional[bool] = None
    allow_rebase_merge: Optional[bool] = None
    license: Optional[LicenseSimple] = None
    pushed_at: AwareDatetime
    size: int
    ssh_url: str
    stargazers_count: int
    svn_url: AnyUrl
    topics: Optional[List[str]] = None
    watchers: int
    watchers_count: int
    created_at: AwareDatetime
    updated_at: AwareDatetime
    allow_forking: Optional[bool] = None
    web_commit_signoff_required: Optional[bool] = None


class Base2(BaseModel):
    label: str
    ref: str
    repo: Repo4
    sha: str
    user: User1


class FieldLinks14(FieldLinks3):
    pass


class PullRequest3(BaseModel):
    url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/Hello-World/pulls/1347"]
    )
    id: int = Field(..., examples=[1])
    node_id: str = Field(..., examples=["MDExOlB1bGxSZXF1ZXN0MQ=="])
    html_url: AnyUrl = Field(..., examples=["https://github.com/octocat/Hello-World/pull/1347"])
    diff_url: AnyUrl = Field(
        ..., examples=["https://github.com/octocat/Hello-World/pull/1347.diff"]
    )
    patch_url: AnyUrl = Field(
        ..., examples=["https://github.com/octocat/Hello-World/pull/1347.patch"]
    )
    issue_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/Hello-World/issues/1347"]
    )
    commits_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"]
    )
    review_comments_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"]
    )
    review_comment_url: str = Field(
        ..., examples=["https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"]
    )
    comments_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"]
    )
    statuses_url: AnyUrl = Field(
        ...,
        examples=[
            "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
        ],
    )
    number: int = Field(
        ...,
        description="Number uniquely identifying the pull request within its repository.",
        examples=[42],
    )
    state: State1 = Field(
        ..., description="State of this Pull Request. Either `open` or `closed`.", examples=["open"]
    )
    locked: bool = Field(..., examples=[True])
    title: str = Field(
        ..., description="The title of the pull request.", examples=["Amazing new feature"]
    )
    user: SimpleUser
    body: Optional[str] = Field(..., examples=["Please pull these awesome changes"])
    labels: List[Label4]
    milestone: Optional[Milestone] = None
    active_lock_reason: Optional[str] = Field(None, examples=["too heated"])
    created_at: AwareDatetime = Field(..., examples=["2011-01-26T19:01:12Z"])
    updated_at: AwareDatetime = Field(..., examples=["2011-01-26T19:01:12Z"])
    closed_at: Optional[AwareDatetime] = Field(..., examples=["2011-01-26T19:01:12Z"])
    merged_at: Optional[AwareDatetime] = Field(..., examples=["2011-01-26T19:01:12Z"])
    merge_commit_sha: Optional[str] = Field(
        ..., examples=["e5bd3914e2e596debea16f433f57875b5b90bcd6"]
    )
    assignee: Optional[SimpleUser] = None
    assignees: Optional[List[SimpleUser]] = None
    requested_reviewers: Optional[List[SimpleUser]] = None
    requested_teams: Optional[List[TeamSimple]] = None
    head: Head2
    base: Base2
    field_links: FieldLinks14 = Field(..., alias="_links")
    author_association: AuthorAssociation
    auto_merge: Optional[AutoMerge] = None
    draft: Optional[bool] = Field(
        None, description="Indicates whether or not the pull request is a draft.", examples=[False]
    )
    merged: bool
    mergeable: Optional[bool] = Field(..., examples=[True])
    rebaseable: Optional[bool] = Field(None, examples=[True])
    mergeable_state: str = Field(..., examples=["clean"])
    merged_by: Optional[SimpleUser] = None
    comments: int = Field(..., examples=[10])
    review_comments: int = Field(..., examples=[0])
    maintainer_can_modify: bool = Field(
        ...,
        description="Indicates whether maintainers can modify the pull request.",
        examples=[True],
    )
    commits: int = Field(..., examples=[3])
    additions: int = Field(..., examples=[100])
    deletions: int = Field(..., examples=[3])
    changed_files: int = Field(..., examples=[5])


class PullRequestMergeResult(BaseModel):
    sha: str
    merged: bool
    message: str


class PullRequestReviewRequest(BaseModel):
    users: List[SimpleUser]
    teams: List[Team]


class Html3(Link):
    pass


class PullRequest4(Link):
    pass


class FieldLinks15(BaseModel):
    html: Html3
    pull_request: PullRequest4


class PullRequestReview(BaseModel):
    id: int = Field(..., description="Unique identifier of the review", examples=[42])
    node_id: str = Field(..., examples=["MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA="])
    user: Optional[SimpleUser] = None
    body: str = Field(..., description="The text of the review.", examples=["This looks great."])
    state: str = Field(..., examples=["CHANGES_REQUESTED"])
    html_url: AnyUrl = Field(
        ..., examples=["https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"]
    )
    pull_request_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/Hello-World/pulls/12"]
    )
    field_links: FieldLinks15 = Field(..., alias="_links")
    submitted_at: Optional[AwareDatetime] = None
    commit_id: Optional[str] = Field(
        ...,
        description="A commit SHA for the review. If the commit object was garbage collected or forcibly deleted, then it no longer exists in Git and this value will be `null`.",
        examples=["54bb654c9e6025347f57900a4a5c2313a96b8035"],
    )
    body_html: Optional[str] = None
    body_text: Optional[str] = None
    author_association: AuthorAssociation


class FieldLinks16(BaseModel):
    self: Link
    html: Link
    pull_request: Link


class ReviewComment(BaseModel):
    url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"]
    )
    pull_request_review_id: Optional[int] = Field(..., examples=[42])
    id: int = Field(..., examples=[10])
    node_id: str = Field(..., examples=["MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw"])
    diff_hunk: str = Field(
        ..., examples=["@@ -16,33 +16,40 @@ public class Connection : IConnection..."]
    )
    path: str = Field(..., examples=["file1.txt"])
    position: Optional[int] = Field(..., examples=[1])
    original_position: int = Field(..., examples=[4])
    commit_id: str = Field(..., examples=["6dcb09b5b57875f334f61aebed695e2e4193db5e"])
    original_commit_id: str = Field(..., examples=["9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840"])
    in_reply_to_id: Optional[int] = Field(None, examples=[8])
    user: Optional[SimpleUser] = None
    body: str = Field(..., examples=["Great stuff"])
    created_at: AwareDatetime = Field(..., examples=["2011-04-14T16:00:49Z"])
    updated_at: AwareDatetime = Field(..., examples=["2011-04-14T16:00:49Z"])
    html_url: AnyUrl = Field(
        ..., examples=["https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"]
    )
    pull_request_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/Hello-World/pulls/1"]
    )
    author_association: AuthorAssociation
    field_links: FieldLinks16 = Field(..., alias="_links")
    body_text: Optional[str] = None
    body_html: Optional[str] = None
    reactions: Optional[ReactionRollup] = None
    side: Optional[Side] = Field(
        "RIGHT", description="The side of the first line of the range for a multi-line comment."
    )
    start_side: Optional[StartSide] = Field(
        "RIGHT", description="The side of the first line of the range for a multi-line comment."
    )
    line: Optional[int] = Field(
        None,
        description="The line of the blob to which the comment applies. The last line of the range for a multi-line comment",
        examples=[2],
    )
    original_line: Optional[int] = Field(
        None,
        description="The original line of the blob to which the comment applies. The last line of the range for a multi-line comment",
        examples=[2],
    )
    start_line: Optional[int] = Field(
        None, description="The first line of the range for a multi-line comment.", examples=[2]
    )
    original_start_line: Optional[int] = Field(
        None,
        description="The original first line of the range for a multi-line comment.",
        examples=[2],
    )


class State16(Enum):
    uploaded = "uploaded"
    open = "open"


class ReleaseAsset(BaseModel):
    url: AnyUrl
    browser_download_url: AnyUrl
    id: int
    node_id: str
    name: str = Field(..., description="The file name of the asset.", examples=["Team Environment"])
    label: Optional[str] = None
    state: State16 = Field(..., description="State of the release asset.")
    content_type: str
    size: int
    download_count: int
    created_at: AwareDatetime
    updated_at: AwareDatetime
    uploader: Optional[SimpleUser] = None


class Release(BaseModel):
    url: AnyUrl
    html_url: AnyUrl
    assets_url: AnyUrl
    upload_url: str
    tarball_url: Optional[AnyUrl] = None
    zipball_url: Optional[AnyUrl] = None
    id: int
    node_id: str
    tag_name: str = Field(..., description="The name of the tag.", examples=["v1.0.0"])
    target_commitish: str = Field(
        ...,
        description="Specifies the committish value that determines where the Git tag is created from.",
        examples=["master"],
    )
    name: Optional[str] = None
    body: Optional[str] = None
    draft: bool = Field(
        ...,
        description="true to create a draft (unpublished) release, false to create a published one.",
        examples=[False],
    )
    prerelease: bool = Field(
        ...,
        description="Whether to identify the release as a prerelease or a full release.",
        examples=[False],
    )
    created_at: AwareDatetime
    published_at: Optional[AwareDatetime] = None
    author: SimpleUser
    assets: List[ReleaseAsset]
    body_html: Optional[str] = None
    body_text: Optional[str] = None
    mentions_count: Optional[int] = None
    discussion_url: Optional[AnyUrl] = Field(None, description="The URL of the release discussion.")
    reactions: Optional[ReactionRollup] = None


class ReleaseNotesContent(BaseModel):
    name: str = Field(
        ...,
        description="The generated name of the release",
        examples=["Release v1.0.0 is now available!"],
    )
    body: str = Field(
        ...,
        description="The generated body describing the contents of the release supporting markdown formatting",
    )


class RepositoryRuleRulesetInfo(BaseModel):
    ruleset_source_type: Optional[SourceType] = Field(
        None, description="The type of source for the ruleset that includes this rule."
    )
    ruleset_source: Optional[str] = Field(
        None, description="The name of the source of the ruleset that includes this rule."
    )
    ruleset_id: Optional[int] = Field(
        None, description="The ID of the ruleset that includes this rule."
    )


class RepositoryRuleDetailed1(RepositoryRuleCreation, RepositoryRuleRulesetInfo):
    pass


class RepositoryRuleDetailed2(RepositoryRuleUpdate, RepositoryRuleRulesetInfo):
    pass


class RepositoryRuleDetailed3(RepositoryRuleDeletion, RepositoryRuleRulesetInfo):
    pass


class RepositoryRuleDetailed4(RepositoryRuleRequiredLinearHistory, RepositoryRuleRulesetInfo):
    pass


class RepositoryRuleDetailed5(RepositoryRuleRequiredDeployments, RepositoryRuleRulesetInfo):
    pass


class RepositoryRuleDetailed6(RepositoryRuleRequiredSignatures, RepositoryRuleRulesetInfo):
    pass


class RepositoryRuleDetailed7(RepositoryRulePullRequest, RepositoryRuleRulesetInfo):
    pass


class RepositoryRuleDetailed8(RepositoryRuleRequiredStatusChecks, RepositoryRuleRulesetInfo):
    pass


class RepositoryRuleDetailed9(RepositoryRuleNonFastForward, RepositoryRuleRulesetInfo):
    pass


class RepositoryRuleDetailed10(RepositoryRuleCommitMessagePattern, RepositoryRuleRulesetInfo):
    pass


class RepositoryRuleDetailed11(RepositoryRuleCommitAuthorEmailPattern, RepositoryRuleRulesetInfo):
    pass


class RepositoryRuleDetailed12(RepositoryRuleCommitterEmailPattern, RepositoryRuleRulesetInfo):
    pass


class RepositoryRuleDetailed13(RepositoryRuleBranchNamePattern, RepositoryRuleRulesetInfo):
    pass


class RepositoryRuleDetailed14(RepositoryRuleTagNamePattern, RepositoryRuleRulesetInfo):
    pass


class RepositoryRuleDetailed15(RepositoryRuleWorkflows, RepositoryRuleRulesetInfo):
    pass


class RepositoryRuleDetailed(
    RootModel[
        Union[
            RepositoryRuleDetailed1,
            RepositoryRuleDetailed2,
            RepositoryRuleDetailed3,
            RepositoryRuleDetailed4,
            RepositoryRuleDetailed5,
            RepositoryRuleDetailed6,
            RepositoryRuleDetailed7,
            RepositoryRuleDetailed8,
            RepositoryRuleDetailed9,
            RepositoryRuleDetailed10,
            RepositoryRuleDetailed11,
            RepositoryRuleDetailed12,
            RepositoryRuleDetailed13,
            RepositoryRuleDetailed14,
            RepositoryRuleDetailed15,
        ]
    ]
):
    root: Union[
        RepositoryRuleDetailed1,
        RepositoryRuleDetailed2,
        RepositoryRuleDetailed3,
        RepositoryRuleDetailed4,
        RepositoryRuleDetailed5,
        RepositoryRuleDetailed6,
        RepositoryRuleDetailed7,
        RepositoryRuleDetailed8,
        RepositoryRuleDetailed9,
        RepositoryRuleDetailed10,
        RepositoryRuleDetailed11,
        RepositoryRuleDetailed12,
        RepositoryRuleDetailed13,
        RepositoryRuleDetailed14,
        RepositoryRuleDetailed15,
    ] = Field(..., description="A repository rule with ruleset details.", title="Repository Rule")


class SecretScanningAlert(BaseModel):
    number: Optional[AlertNumber] = None
    created_at: Optional[AlertCreatedAt] = None
    updated_at: Optional[AlertUpdatedAt] = None
    url: Optional[AlertUrl] = None
    html_url: Optional[AlertHtmlUrl] = None
    locations_url: Optional[AnyUrl] = Field(
        None, description="The REST API URL of the code locations for this alert."
    )
    state: Optional[SecretScanningAlertState] = None
    resolution: Optional[SecretScanningAlertResolution] = None
    resolved_at: Optional[AwareDatetime] = Field(
        None,
        description="The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    resolved_by: Optional[SimpleUser] = None
    resolution_comment: Optional[str] = Field(
        None, description="An optional comment to resolve an alert."
    )
    secret_type: Optional[str] = Field(
        None, description="The type of secret that secret scanning detected."
    )
    secret_type_display_name: Optional[str] = Field(
        None,
        description='User-friendly name for the detected secret, matching the `secret_type`.\nFor a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."',
    )
    secret: Optional[str] = Field(None, description="The secret that was detected.")
    push_protection_bypassed: Optional[bool] = Field(
        None, description="Whether push protection was bypassed for the detected secret."
    )
    push_protection_bypassed_by: Optional[SimpleUser] = None
    push_protection_bypassed_at: Optional[AwareDatetime] = Field(
        None,
        description="The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    validity: Optional[Validity] = Field(
        None, description="The token status as of the latest validity check."
    )


class SecretScanningAlertResolutionComment(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        ...,
        description="An optional comment when closing an alert. Cannot be updated or deleted. Must be `null` when changing `state` to `open`.",
    )


class SecretScanningLocationCommit(BaseModel):
    path: str = Field(
        ..., description="The file path in the repository", examples=["/example/secrets.txt"]
    )
    start_line: float = Field(..., description="Line number at which the secret starts in the file")
    end_line: float = Field(..., description="Line number at which the secret ends in the file")
    start_column: float = Field(
        ...,
        description="The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII",
    )
    end_column: float = Field(
        ...,
        description="The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII",
    )
    blob_sha: str = Field(
        ...,
        description="SHA-1 hash ID of the associated blob",
        examples=["af5626b4a114abcb82d63db7c8082c3c4756e51b"],
    )
    blob_url: str = Field(..., description="The API URL to get the associated blob resource")
    commit_sha: str = Field(
        ...,
        description="SHA-1 hash ID of the associated commit",
        examples=["af5626b4a114abcb82d63db7c8082c3c4756e51b"],
    )
    commit_url: str = Field(..., description="The API URL to get the associated commit resource")


class SecretScanningLocationIssueTitle(BaseModel):
    issue_title_url: AnyUrl = Field(
        ...,
        description="The API URL to get the issue where the secret was detected.",
        examples=["https://api.github.com/repos/octocat/Hello-World/issues/1347"],
    )


class SecretScanningLocationIssueBody(BaseModel):
    issue_body_url: AnyUrl = Field(
        ...,
        description="The API URL to get the issue where the secret was detected.",
        examples=["https://api.github.com/repos/octocat/Hello-World/issues/1347"],
    )


class SecretScanningLocationIssueComment(BaseModel):
    issue_comment_url: AnyUrl = Field(
        ...,
        description="The API URL to get the issue comment where the secret was detected.",
        examples=["https://api.github.com/repos/octocat/Hello-World/issues/comments/1081119451"],
    )


class SecretScanningLocationDiscussionTitle(BaseModel):
    discussion_title_url: AnyUrl = Field(
        ...,
        description="The URL to the discussion where the secret was detected.",
        examples=["https://github.com/community/community/discussions/39082"],
    )


class SecretScanningLocationDiscussionBody(BaseModel):
    discussion_body_url: AnyUrl = Field(
        ...,
        description="The URL to the discussion where the secret was detected.",
        examples=["https://github.com/community/community/discussions/39082#discussion-4566270"],
    )


class SecretScanningLocationDiscussionComment(BaseModel):
    discussion_comment_url: AnyUrl = Field(
        ...,
        description="The API URL to get the discussion comment where the secret was detected.",
        examples=[
            "https://github.com/community/community/discussions/39082#discussioncomment-4158232"
        ],
    )


class SecretScanningLocationPullRequestTitle(BaseModel):
    pull_request_title_url: AnyUrl = Field(
        ...,
        description="The API URL to get the pull request where the secret was detected.",
        examples=["https://api.github.com/repos/octocat/Hello-World/pull/2846"],
    )


class SecretScanningLocationPullRequestBody(BaseModel):
    pull_request_body_url: AnyUrl = Field(
        ...,
        description="The API URL to get the pull request where the secret was detected.",
        examples=["https://api.github.com/repos/octocat/Hello-World/pull/2846"],
    )


class SecretScanningLocationPullRequestComment(BaseModel):
    pull_request_comment_url: AnyUrl = Field(
        ...,
        description="The API URL to get the pull request comment where the secret was detected.",
        examples=["https://api.github.com/repos/octocat/Hello-World/issues/comments/1081119451"],
    )


class SecretScanningLocationPullRequestReview(BaseModel):
    pull_request_review_url: AnyUrl = Field(
        ...,
        description="The API URL to get the pull request review where the secret was detected.",
        examples=["https://api.github.com/repos/octocat/Hello-World/pulls/2846/reviews/80"],
    )


class SecretScanningLocationPullRequestReviewComment(BaseModel):
    pull_request_review_comment_url: AnyUrl = Field(
        ...,
        description="The API URL to get the pull request review comment where the secret was detected.",
        examples=["https://api.github.com/repos/octocat/Hello-World/pulls/comments/12"],
    )


class Type28(Enum):
    commit = "commit"
    issue_title = "issue_title"
    issue_body = "issue_body"
    issue_comment = "issue_comment"
    discussion_title = "discussion_title"
    discussion_body = "discussion_body"
    discussion_comment = "discussion_comment"
    pull_request_title = "pull_request_title"
    pull_request_body = "pull_request_body"
    pull_request_comment = "pull_request_comment"
    pull_request_review = "pull_request_review"
    pull_request_review_comment = "pull_request_review_comment"


class SecretScanningLocation(BaseModel):
    type: Type28 = Field(
        ...,
        description="The location type. Because secrets may be found in different types of resources (ie. code, comments, issues, pull requests, discussions), this field identifies the type of resource where the secret was found.",
        examples=["commit"],
    )
    details: Union[
        SecretScanningLocationCommit,
        SecretScanningLocationIssueTitle,
        SecretScanningLocationIssueBody,
        SecretScanningLocationIssueComment,
        SecretScanningLocationDiscussionTitle,
        SecretScanningLocationDiscussionBody,
        SecretScanningLocationDiscussionComment,
        SecretScanningLocationPullRequestTitle,
        SecretScanningLocationPullRequestBody,
        SecretScanningLocationPullRequestComment,
        SecretScanningLocationPullRequestReview,
        SecretScanningLocationPullRequestReviewComment,
    ]


class Package4(BaseModel):
    ecosystem: SecurityAdvisoryEcosystems
    name: Optional[str] = Field(None, description="The unique package name within its ecosystem.")


class Vulnerability2(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    package: Package4 = Field(
        ..., description="The name of the package affected by the vulnerability."
    )
    vulnerable_version_range: Optional[str] = Field(
        None, description="The range of the package versions affected by the vulnerability."
    )
    patched_versions: Optional[str] = Field(
        None, description="The package version(s) that resolve the vulnerability."
    )
    vulnerable_functions: Optional[List[str]] = Field(
        None, description="The functions in the package that are affected."
    )


class Credit2(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    login: str = Field(..., description="The username of the user credited.")
    type: SecurityAdvisoryCreditTypes


class RepositoryAdvisoryCreate(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    summary: constr(max_length=1024) = Field(..., description="A short summary of the advisory.")
    description: constr(max_length=65535) = Field(
        ..., description="A detailed description of what the advisory impacts."
    )
    cve_id: Optional[str] = Field(
        None, description="The Common Vulnerabilities and Exposures (CVE) ID."
    )
    vulnerabilities: List[Vulnerability2] = Field(
        ...,
        description="A product affected by the vulnerability detailed in a repository security advisory.",
    )
    cwe_ids: Optional[List[str]] = Field(
        None, description="A list of Common Weakness Enumeration (CWE) IDs."
    )
    credits: Optional[List[Credit2]] = Field(
        None,
        description="A list of users receiving credit for their participation in the security advisory.",
    )
    severity: Optional[Severity4] = Field(
        None,
        description="The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.",
    )
    cvss_vector_string: Optional[str] = Field(
        None,
        description="The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.",
    )
    start_private_fork: Optional[bool] = Field(
        False,
        description="Whether to create a temporary private fork of the repository to collaborate on a fix.",
    )


class Vulnerability3(Vulnerability2):
    pass


class PrivateVulnerabilityReportCreate(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    summary: constr(max_length=1024) = Field(..., description="A short summary of the advisory.")
    description: constr(max_length=65535) = Field(
        ..., description="A detailed description of what the advisory impacts."
    )
    vulnerabilities: Optional[List[Vulnerability3]] = Field(
        None,
        description="An array of products affected by the vulnerability detailed in a repository security advisory.",
    )
    cwe_ids: Optional[List[str]] = Field(
        None, description="A list of Common Weakness Enumeration (CWE) IDs."
    )
    severity: Optional[Severity4] = Field(
        None,
        description="The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.",
    )
    cvss_vector_string: Optional[str] = Field(
        None,
        description="The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.",
    )
    start_private_fork: Optional[bool] = Field(
        False,
        description="Whether to create a temporary private fork of the repository to collaborate on a fix.",
    )


class Vulnerability4(Vulnerability2):
    pass


class State17(Enum):
    published = "published"
    closed = "closed"
    draft = "draft"


class RepositoryAdvisoryUpdate(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    summary: Optional[constr(max_length=1024)] = Field(
        None, description="A short summary of the advisory."
    )
    description: Optional[constr(max_length=65535)] = Field(
        None, description="A detailed description of what the advisory impacts."
    )
    cve_id: Optional[str] = Field(
        None, description="The Common Vulnerabilities and Exposures (CVE) ID."
    )
    vulnerabilities: Optional[List[Vulnerability4]] = Field(
        None,
        description="A product affected by the vulnerability detailed in a repository security advisory.",
    )
    cwe_ids: Optional[List[str]] = Field(
        None, description="A list of Common Weakness Enumeration (CWE) IDs."
    )
    credits: Optional[List[Credit2]] = Field(
        None,
        description="A list of users receiving credit for their participation in the security advisory.",
    )
    severity: Optional[Severity4] = Field(
        None,
        description="The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.",
    )
    cvss_vector_string: Optional[str] = Field(
        None,
        description="The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.",
    )
    state: Optional[State17] = Field(None, description="The state of the advisory.")
    collaborating_users: Optional[List[str]] = Field(
        None, description="A list of usernames who have been granted write access to the advisory."
    )
    collaborating_teams: Optional[List[str]] = Field(
        None,
        description="A list of team slugs which have been granted write access to the advisory.",
    )


class Stargazer(BaseModel):
    starred_at: AwareDatetime
    user: Optional[SimpleUser] = None


class CodeFrequencyStat(RootModel[List[int]]):
    root: List[int] = Field(..., description="Code Frequency Stat", title="Code Frequency Stat")


class CommitActivity(BaseModel):
    days: List[int] = Field(..., examples=[0, 3, 26, 20, 39, 1, 0])
    total: int = Field(..., examples=[89])
    week: int = Field(..., examples=[1336280400])


class Week(BaseModel):
    w: Optional[int] = None
    a: Optional[int] = None
    d: Optional[int] = None
    c: Optional[int] = None


class ContributorActivity(BaseModel):
    author: Optional[SimpleUser] = None
    total: int = Field(..., examples=[135])
    weeks: List[Week] = Field(..., examples=[{"w": "1367712000", "a": 6898, "d": 77, "c": 10}])


class ParticipationStats(BaseModel):
    all: List[int]
    owner: List[int]


class RepositorySubscription(BaseModel):
    subscribed: bool = Field(
        ...,
        description="Determines if notifications should be received from this repository.",
        examples=[True],
    )
    ignored: bool = Field(
        ..., description="Determines if all notifications should be blocked from this repository."
    )
    reason: Optional[str] = None
    created_at: AwareDatetime = Field(..., examples=["2012-10-06T21:34:12Z"])
    url: AnyUrl = Field(..., examples=["https://api.github.com/repos/octocat/example/subscription"])
    repository_url: AnyUrl = Field(..., examples=["https://api.github.com/repos/octocat/example"])


class Commit5(Commit):
    pass


class Tag(BaseModel):
    name: str = Field(..., examples=["v0.1"])
    commit: Commit5
    zipball_url: AnyUrl = Field(
        ..., examples=["https://github.com/octocat/Hello-World/zipball/v0.1"]
    )
    tarball_url: AnyUrl = Field(
        ..., examples=["https://github.com/octocat/Hello-World/tarball/v0.1"]
    )
    node_id: str


class TagProtection(BaseModel):
    id: Optional[int] = Field(None, examples=[2])
    created_at: Optional[str] = Field(None, examples=["2011-01-26T19:01:12Z"])
    updated_at: Optional[str] = Field(None, examples=["2011-01-26T19:01:12Z"])
    enabled: Optional[bool] = Field(None, examples=[True])
    pattern: str = Field(..., examples=["v1.*"])


class Topic(BaseModel):
    names: List[str]


class Traffic(BaseModel):
    timestamp: AwareDatetime
    uniques: int
    count: int


class CloneTraffic(BaseModel):
    count: int = Field(..., examples=[173])
    uniques: int = Field(..., examples=[128])
    clones: List[Traffic]


class ContentTraffic(BaseModel):
    path: str = Field(..., examples=["/github/hubot"])
    title: str = Field(..., examples=["github/hubot: A customizable life embetterment robot."])
    count: int = Field(..., examples=[3542])
    uniques: int = Field(..., examples=[2225])


class ReferrerTraffic(BaseModel):
    referrer: str = Field(..., examples=["Google"])
    count: int = Field(..., examples=[4])
    uniques: int = Field(..., examples=[3])


class ViewTraffic(BaseModel):
    count: int = Field(..., examples=[14850])
    uniques: int = Field(..., examples=[3782])
    views: List[Traffic]


class Match(BaseModel):
    text: Optional[str] = None
    indices: Optional[List[int]] = None


class SearchResultTextMatch(BaseModel):
    object_url: Optional[str] = None
    object_type: Optional[str] = None
    property: Optional[str] = None
    fragment: Optional[str] = None
    matches: Optional[List[Match]] = None


class SearchResultTextMatches(RootModel[List[SearchResultTextMatch]]):
    root: List[SearchResultTextMatch] = Field(..., title="Search Result Text Matches")


class CodeSearchResultItem(BaseModel):
    name: str
    path: str
    sha: str
    url: AnyUrl
    git_url: AnyUrl
    html_url: AnyUrl
    repository: MinimalRepository
    score: float
    file_size: Optional[int] = None
    language: Optional[str] = None
    last_modified_at: Optional[AwareDatetime] = None
    line_numbers: Optional[List[str]] = Field(None, examples=["73..77", "77..78"])
    text_matches: Optional[SearchResultTextMatches] = None


class Author4(BaseModel):
    name: str
    email: str
    date: AwareDatetime


class Tree4(Commit):
    pass


class Commit6(BaseModel):
    author: Author4
    committer: Optional[GitUser] = None
    comment_count: int
    message: str
    tree: Tree4
    url: AnyUrl
    verification: Optional[Verification] = None


class Parent4(Parent1):
    pass


class CommitSearchResultItem(BaseModel):
    url: AnyUrl
    sha: str
    html_url: AnyUrl
    comments_url: AnyUrl
    commit: Commit6
    author: Optional[SimpleUser] = None
    committer: Optional[GitUser] = None
    parents: List[Parent4]
    repository: MinimalRepository
    score: float
    node_id: str
    text_matches: Optional[SearchResultTextMatches] = None


class Label5(BaseModel):
    id: Optional[int] = None
    node_id: Optional[str] = None
    url: Optional[str] = None
    name: Optional[str] = None
    color: Optional[str] = None
    default: Optional[bool] = None
    description: Optional[str] = None


class PullRequest5(PullRequest):
    pass


class IssueSearchResultItem(BaseModel):
    url: AnyUrl
    repository_url: AnyUrl
    labels_url: str
    comments_url: AnyUrl
    events_url: AnyUrl
    html_url: AnyUrl
    id: int
    node_id: str
    number: int
    title: str
    locked: bool
    active_lock_reason: Optional[str] = None
    assignees: Optional[List[SimpleUser]] = None
    user: Optional[SimpleUser] = None
    labels: List[Label5]
    state: str
    state_reason: Optional[str] = None
    assignee: Optional[SimpleUser] = None
    milestone: Optional[Milestone] = None
    comments: int
    created_at: AwareDatetime
    updated_at: AwareDatetime
    closed_at: Optional[AwareDatetime] = None
    text_matches: Optional[SearchResultTextMatches] = None
    pull_request: Optional[PullRequest5] = None
    body: Optional[str] = None
    score: float
    author_association: AuthorAssociation
    draft: Optional[bool] = None
    repository: Optional[Repository] = None
    body_html: Optional[str] = None
    body_text: Optional[str] = None
    timeline_url: Optional[AnyUrl] = None
    performed_via_github_app: Optional[Integration] = None
    reactions: Optional[ReactionRollup] = None


class LabelSearchResultItem(BaseModel):
    id: int
    node_id: str
    url: AnyUrl
    name: str
    color: str
    default: bool
    description: Optional[str] = None
    score: float
    text_matches: Optional[SearchResultTextMatches] = None


class RepoSearchResultItem(BaseModel):
    id: int
    node_id: str
    name: str
    full_name: str
    owner: Optional[SimpleUser] = None
    private: bool
    html_url: AnyUrl
    description: Optional[str] = None
    fork: bool
    url: AnyUrl
    created_at: AwareDatetime
    updated_at: AwareDatetime
    pushed_at: AwareDatetime
    homepage: Optional[AnyUrl] = None
    size: int
    stargazers_count: int
    watchers_count: int
    language: Optional[str] = None
    forks_count: int
    open_issues_count: int
    master_branch: Optional[str] = None
    default_branch: str
    score: float
    forks_url: AnyUrl
    keys_url: str
    collaborators_url: str
    teams_url: AnyUrl
    hooks_url: AnyUrl
    issue_events_url: str
    events_url: AnyUrl
    assignees_url: str
    branches_url: str
    tags_url: AnyUrl
    blobs_url: str
    git_tags_url: str
    git_refs_url: str
    trees_url: str
    statuses_url: str
    languages_url: AnyUrl
    stargazers_url: AnyUrl
    contributors_url: AnyUrl
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    commits_url: str
    git_commits_url: str
    comments_url: str
    issue_comment_url: str
    contents_url: str
    compare_url: str
    merges_url: AnyUrl
    archive_url: str
    downloads_url: AnyUrl
    issues_url: str
    pulls_url: str
    milestones_url: str
    notifications_url: str
    labels_url: str
    releases_url: str
    deployments_url: AnyUrl
    git_url: str
    ssh_url: str
    clone_url: str
    svn_url: AnyUrl
    forks: int
    open_issues: int
    watchers: int
    topics: Optional[List[str]] = None
    mirror_url: Optional[AnyUrl] = None
    has_issues: bool
    has_projects: bool
    has_pages: bool
    has_wiki: bool
    has_downloads: bool
    has_discussions: Optional[bool] = None
    archived: bool
    disabled: bool = Field(..., description="Returns whether or not this repository disabled.")
    visibility: Optional[str] = Field(
        None, description="The repository visibility: public, private, or internal."
    )
    license: Optional[LicenseSimple] = None
    permissions: Optional[Permissions14] = None
    text_matches: Optional[SearchResultTextMatches] = None
    temp_clone_token: Optional[str] = None
    allow_merge_commit: Optional[bool] = None
    allow_squash_merge: Optional[bool] = None
    allow_rebase_merge: Optional[bool] = None
    allow_auto_merge: Optional[bool] = None
    delete_branch_on_merge: Optional[bool] = None
    allow_forking: Optional[bool] = None
    is_template: Optional[bool] = None
    web_commit_signoff_required: Optional[bool] = Field(None, examples=[False])


class TopicRelation(BaseModel):
    id: Optional[int] = None
    name: Optional[str] = None
    topic_id: Optional[int] = None
    relation_type: Optional[str] = None


class RelatedItem(BaseModel):
    topic_relation: Optional[TopicRelation] = None


class Alias(RelatedItem):
    pass


class TopicSearchResultItem(BaseModel):
    name: str
    display_name: Optional[str] = None
    short_description: Optional[str] = None
    description: Optional[str] = None
    created_by: Optional[str] = None
    released: Optional[str] = None
    created_at: AwareDatetime
    updated_at: AwareDatetime
    featured: bool
    curated: bool
    score: float
    repository_count: Optional[int] = None
    logo_url: Optional[AnyUrl] = None
    text_matches: Optional[SearchResultTextMatches] = None
    related: Optional[List[RelatedItem]] = None
    aliases: Optional[List[Alias]] = None


class UserSearchResultItem(BaseModel):
    login: str
    id: int
    node_id: str
    avatar_url: AnyUrl
    gravatar_id: Optional[str] = None
    url: AnyUrl
    html_url: AnyUrl
    followers_url: AnyUrl
    subscriptions_url: AnyUrl
    organizations_url: AnyUrl
    repos_url: AnyUrl
    received_events_url: AnyUrl
    type: str
    score: float
    following_url: str
    gists_url: str
    starred_url: str
    events_url: str
    public_repos: Optional[int] = None
    public_gists: Optional[int] = None
    followers: Optional[int] = None
    following: Optional[int] = None
    created_at: Optional[AwareDatetime] = None
    updated_at: Optional[AwareDatetime] = None
    name: Optional[str] = None
    bio: Optional[str] = None
    email: Optional[EmailStr] = None
    location: Optional[str] = None
    site_admin: bool
    hireable: Optional[bool] = None
    text_matches: Optional[SearchResultTextMatches] = None
    blog: Optional[str] = None
    company: Optional[str] = None
    suspended_at: Optional[AwareDatetime] = None


class Plan4(Plan):
    pass


class PrivateUser(BaseModel):
    login: str = Field(..., examples=["octocat"])
    id: int = Field(..., examples=[1])
    node_id: str = Field(..., examples=["MDQ6VXNlcjE="])
    avatar_url: AnyUrl = Field(..., examples=["https://github.com/images/error/octocat_happy.gif"])
    gravatar_id: Optional[str] = Field(..., examples=["41d064eb2195891e12d0413f63227ea7"])
    url: AnyUrl = Field(..., examples=["https://api.github.com/users/octocat"])
    html_url: AnyUrl = Field(..., examples=["https://github.com/octocat"])
    followers_url: AnyUrl = Field(..., examples=["https://api.github.com/users/octocat/followers"])
    following_url: str = Field(
        ..., examples=["https://api.github.com/users/octocat/following{/other_user}"]
    )
    gists_url: str = Field(..., examples=["https://api.github.com/users/octocat/gists{/gist_id}"])
    starred_url: str = Field(
        ..., examples=["https://api.github.com/users/octocat/starred{/owner}{/repo}"]
    )
    subscriptions_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/subscriptions"]
    )
    organizations_url: AnyUrl = Field(..., examples=["https://api.github.com/users/octocat/orgs"])
    repos_url: AnyUrl = Field(..., examples=["https://api.github.com/users/octocat/repos"])
    events_url: str = Field(..., examples=["https://api.github.com/users/octocat/events{/privacy}"])
    received_events_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/received_events"]
    )
    type: str = Field(..., examples=["User"])
    site_admin: bool
    name: Optional[str] = Field(..., examples=["monalisa octocat"])
    company: Optional[str] = Field(..., examples=["GitHub"])
    blog: Optional[str] = Field(..., examples=["https://github.com/blog"])
    location: Optional[str] = Field(..., examples=["San Francisco"])
    email: Optional[EmailStr] = Field(..., examples=["octocat@github.com"])
    hireable: Optional[bool] = None
    bio: Optional[str] = Field(..., examples=["There once was..."])
    twitter_username: Optional[str] = Field(None, examples=["monalisa"])
    public_repos: int = Field(..., examples=[2])
    public_gists: int = Field(..., examples=[1])
    followers: int = Field(..., examples=[20])
    following: int = Field(..., examples=[0])
    created_at: AwareDatetime = Field(..., examples=["2008-01-14T04:33:35Z"])
    updated_at: AwareDatetime = Field(..., examples=["2008-01-14T04:33:35Z"])
    private_gists: int = Field(..., examples=[81])
    total_private_repos: int = Field(..., examples=[100])
    owned_private_repos: int = Field(..., examples=[100])
    disk_usage: int = Field(..., examples=[10000])
    collaborators: int = Field(..., examples=[8])
    two_factor_authentication: bool = Field(..., examples=[True])
    plan: Optional[Plan4] = None
    suspended_at: Optional[AwareDatetime] = None
    business_plus: Optional[bool] = None
    ldap_dn: Optional[str] = None


class CodespacesSecret(BaseModel):
    name: str = Field(..., description="The name of the secret", examples=["SECRET_NAME"])
    created_at: AwareDatetime = Field(
        ...,
        description="The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.",
    )
    updated_at: AwareDatetime = Field(
        ...,
        description="The date and time at which the secret was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.",
    )
    visibility: Visibility = Field(
        ...,
        description="The type of repositories in the organization that the secret is visible to",
    )
    selected_repositories_url: AnyUrl = Field(
        ...,
        description="The API URL at which the list of repositories this secret is visible to can be retrieved",
        examples=["https://api.github.com/user/secrets/SECRET_NAME/repositories"],
    )


class CodespacesUserPublicKey(DependabotPublicKey):
    pass


class CodespaceExportDetails(BaseModel):
    state: Optional[str] = Field(
        None,
        description="State of the latest export",
        examples=["succeeded | failed | in_progress"],
    )
    completed_at: Optional[AwareDatetime] = Field(
        None,
        description="Completion time of the last export operation",
        examples=["2021-01-01T19:01:12Z"],
    )
    branch: Optional[str] = Field(
        None,
        description="Name of the exported branch",
        examples=["codespace-monalisa-octocat-hello-world-g4wpq6h95q"],
    )
    sha: Optional[str] = Field(
        None,
        description="Git commit SHA of the exported branch",
        examples=["fd95a81ca01e48ede9f39c799ecbcef817b8a3b2"],
    )
    id: Optional[str] = Field(None, description="Id for the export details", examples=["latest"])
    export_url: Optional[str] = Field(
        None,
        description="Url for fetching export details",
        examples=["https://api.github.com/user/codespaces/:name/exports/latest"],
    )
    html_url: Optional[str] = Field(
        None,
        description="Web url for the exported branch",
        examples=["https://github.com/octocat/hello-world/tree/:branch"],
    )


class CodespaceWithFullRepository(BaseModel):
    id: int = Field(..., examples=[1])
    name: str = Field(
        ...,
        description="Automatically generated name of this codespace.",
        examples=["monalisa-octocat-hello-world-g4wpq6h95q"],
    )
    display_name: Optional[str] = Field(
        None, description="Display name for this codespace.", examples=["bookish space pancake"]
    )
    environment_id: Optional[str] = Field(
        ...,
        description="UUID identifying this codespace's environment.",
        examples=["26a7c758-7299-4a73-b978-5a92a7ae98a0"],
    )
    owner: SimpleUser
    billable_owner: SimpleUser
    repository: FullRepository
    machine: Optional[CodespaceMachine] = None
    devcontainer_path: Optional[str] = Field(
        None,
        description="Path to devcontainer.json from repo root used to create Codespace.",
        examples=[".devcontainer/example/devcontainer.json"],
    )
    prebuild: Optional[bool] = Field(
        ..., description="Whether the codespace was created from a prebuild.", examples=[False]
    )
    created_at: AwareDatetime = Field(..., examples=["2011-01-26T19:01:12Z"])
    updated_at: AwareDatetime = Field(..., examples=["2011-01-26T19:01:12Z"])
    last_used_at: AwareDatetime = Field(
        ...,
        description="Last known time this codespace was started.",
        examples=["2011-01-26T19:01:12Z"],
    )
    state: State2 = Field(..., description="State of this codespace.", examples=["Available"])
    url: AnyUrl = Field(..., description="API URL for this codespace.")
    git_status: GitStatus = Field(..., description="Details about the codespace's git repository.")
    location: Location = Field(
        ..., description="The initially assigned location of a new codespace.", examples=["WestUs2"]
    )
    idle_timeout_minutes: Optional[int] = Field(
        ...,
        description="The number of minutes of inactivity after which this codespace will be automatically stopped.",
        examples=[60],
    )
    web_url: AnyUrl = Field(..., description="URL to access this codespace on the web.")
    machines_url: AnyUrl = Field(
        ..., description="API URL to access available alternate machine types for this codespace."
    )
    start_url: AnyUrl = Field(..., description="API URL to start this codespace.")
    stop_url: AnyUrl = Field(..., description="API URL to stop this codespace.")
    publish_url: Optional[AnyUrl] = Field(
        None, description="API URL to publish this codespace to a new repository."
    )
    pulls_url: Optional[AnyUrl] = Field(
        ..., description="API URL for the Pull Request associated with this codespace, if any."
    )
    recent_folders: List[str]
    runtime_constraints: Optional[RuntimeConstraints] = None
    pending_operation: Optional[bool] = Field(
        None,
        description="Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.",
    )
    pending_operation_disabled_reason: Optional[str] = Field(
        None, description="Text to show user when codespace is disabled by a pending operation"
    )
    idle_timeout_notice: Optional[str] = Field(
        None,
        description="Text to show user when codespace idle timeout minutes has been overridden by an organization policy",
    )
    retention_period_minutes: Optional[int] = Field(
        None,
        description="Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).",
        examples=[60],
    )
    retention_expires_at: Optional[AwareDatetime] = Field(
        None,
        description='When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"',
        examples=["2011-01-26T20:01:12Z"],
    )


class Email(BaseModel):
    email: EmailStr = Field(..., examples=["octocat@github.com"])
    primary: bool = Field(..., examples=[True])
    verified: bool = Field(..., examples=[True])
    visibility: Optional[str] = Field(..., examples=["public"])


class Email1(BaseModel):
    email: Optional[str] = None
    verified: Optional[bool] = None


class Subkey(BaseModel):
    id: Optional[int] = None
    primary_key_id: Optional[int] = None
    key_id: Optional[str] = None
    public_key: Optional[str] = None
    emails: Optional[List[Email1]] = None
    subkeys: Optional[List] = None
    can_sign: Optional[bool] = None
    can_encrypt_comms: Optional[bool] = None
    can_encrypt_storage: Optional[bool] = None
    can_certify: Optional[bool] = None
    created_at: Optional[str] = None
    expires_at: Optional[str] = None
    raw_key: Optional[str] = None
    revoked: Optional[bool] = None


class GpgKey(BaseModel):
    id: int = Field(..., examples=[3])
    name: Optional[str] = Field(None, examples=["Octocat's GPG Key"])
    primary_key_id: Optional[int] = None
    key_id: str = Field(..., examples=["3262EFF25BA0D270"])
    public_key: str = Field(..., examples=["xsBNBFayYZ..."])
    emails: List[Email1] = Field(
        ..., examples=[{"email": "octocat@users.noreply.github.com", "verified": True}]
    )
    subkeys: List[Subkey] = Field(
        ...,
        examples=[
            {
                "id": 4,
                "primary_key_id": 3,
                "key_id": "4A595D4C72EE49C7",
                "public_key": "zsBNBFayYZ...",
                "emails": [],
                "can_sign": False,
                "can_encrypt_comms": True,
                "can_encrypt_storage": True,
                "can_certify": False,
                "created_at": "2016-03-24T11:31:04-06:00",
                "expires_at": None,
                "revoked": False,
            }
        ],
    )
    can_sign: bool = Field(..., examples=[True])
    can_encrypt_comms: bool
    can_encrypt_storage: bool
    can_certify: bool = Field(..., examples=[True])
    created_at: AwareDatetime = Field(..., examples=["2016-03-24T11:31:04-06:00"])
    expires_at: Optional[AwareDatetime] = None
    revoked: bool = Field(..., examples=[True])
    raw_key: Optional[str] = None


class Key(BaseModel):
    key: str
    id: int
    url: str
    title: str
    created_at: AwareDatetime
    verified: bool
    read_only: bool


class MarketplaceAccount(BaseModel):
    url: AnyUrl
    id: int
    type: str
    node_id: Optional[str] = None
    login: str
    email: Optional[EmailStr] = None
    organization_billing_email: Optional[EmailStr] = None


class UserMarketplacePurchase(BaseModel):
    billing_cycle: str = Field(..., examples=["monthly"])
    next_billing_date: Optional[AwareDatetime] = Field(..., examples=["2017-11-11T00:00:00Z"])
    unit_count: Optional[int] = None
    on_free_trial: bool = Field(..., examples=[True])
    free_trial_ends_on: Optional[AwareDatetime] = Field(..., examples=["2017-11-11T00:00:00Z"])
    updated_at: Optional[AwareDatetime] = Field(..., examples=["2017-11-02T01:12:12Z"])
    account: MarketplaceAccount
    plan: MarketplaceListingPlan


class SocialAccount(BaseModel):
    provider: str = Field(..., examples=["linkedin"])
    url: str = Field(..., examples=["https://www.linkedin.com/company/github/"])


class SshSigningKey(BaseModel):
    key: str
    id: int
    title: str
    created_at: AwareDatetime


class StarredRepository(BaseModel):
    starred_at: AwareDatetime
    repo: Repository


class Context(BaseModel):
    message: str
    octicon: str


class Hovercard(BaseModel):
    contexts: List[Context]


class KeySimple(BaseModel):
    id: int
    key: str


class EnterpriseWebhooks(Enterprise):
    pass


class SimpleInstallation(BaseModel):
    id: int = Field(..., description="The ID of the installation.", examples=[1])
    node_id: str = Field(
        ...,
        description="The global node ID of the installation.",
        examples=["MDQ6VXNlcjU4MzIzMQ=="],
    )


class OrganizationSimpleWebhooks(OrganizationSimple):
    pass


class Permissions17(Permissions1):
    pass


class Owner4(Owner):
    pass


class Permissions18(Permissions2):
    pass


class TemplateRepository1(BaseModel):
    id: Optional[int] = None
    node_id: Optional[str] = None
    name: Optional[str] = None
    full_name: Optional[str] = None
    owner: Optional[Owner4] = None
    private: Optional[bool] = None
    html_url: Optional[str] = None
    description: Optional[str] = None
    fork: Optional[bool] = None
    url: Optional[str] = None
    archive_url: Optional[str] = None
    assignees_url: Optional[str] = None
    blobs_url: Optional[str] = None
    branches_url: Optional[str] = None
    collaborators_url: Optional[str] = None
    comments_url: Optional[str] = None
    commits_url: Optional[str] = None
    compare_url: Optional[str] = None
    contents_url: Optional[str] = None
    contributors_url: Optional[str] = None
    deployments_url: Optional[str] = None
    downloads_url: Optional[str] = None
    events_url: Optional[str] = None
    forks_url: Optional[str] = None
    git_commits_url: Optional[str] = None
    git_refs_url: Optional[str] = None
    git_tags_url: Optional[str] = None
    git_url: Optional[str] = None
    issue_comment_url: Optional[str] = None
    issue_events_url: Optional[str] = None
    issues_url: Optional[str] = None
    keys_url: Optional[str] = None
    labels_url: Optional[str] = None
    languages_url: Optional[str] = None
    merges_url: Optional[str] = None
    milestones_url: Optional[str] = None
    notifications_url: Optional[str] = None
    pulls_url: Optional[str] = None
    releases_url: Optional[str] = None
    ssh_url: Optional[str] = None
    stargazers_url: Optional[str] = None
    statuses_url: Optional[str] = None
    subscribers_url: Optional[str] = None
    subscription_url: Optional[str] = None
    tags_url: Optional[str] = None
    teams_url: Optional[str] = None
    trees_url: Optional[str] = None
    clone_url: Optional[str] = None
    mirror_url: Optional[str] = None
    hooks_url: Optional[str] = None
    svn_url: Optional[str] = None
    homepage: Optional[str] = None
    language: Optional[str] = None
    forks_count: Optional[int] = None
    stargazers_count: Optional[int] = None
    watchers_count: Optional[int] = None
    size: Optional[int] = None
    default_branch: Optional[str] = None
    open_issues_count: Optional[int] = None
    is_template: Optional[bool] = None
    topics: Optional[List[str]] = None
    has_issues: Optional[bool] = None
    has_projects: Optional[bool] = None
    has_wiki: Optional[bool] = None
    has_pages: Optional[bool] = None
    has_downloads: Optional[bool] = None
    archived: Optional[bool] = None
    disabled: Optional[bool] = None
    visibility: Optional[str] = None
    pushed_at: Optional[str] = None
    created_at: Optional[str] = None
    updated_at: Optional[str] = None
    permissions: Optional[Permissions18] = None
    allow_rebase_merge: Optional[bool] = None
    temp_clone_token: Optional[str] = None
    allow_squash_merge: Optional[bool] = None
    allow_auto_merge: Optional[bool] = None
    delete_branch_on_merge: Optional[bool] = None
    allow_update_branch: Optional[bool] = None
    use_squash_pr_title_as_default: Optional[bool] = None
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    allow_merge_commit: Optional[bool] = None
    subscribers_count: Optional[int] = None
    network_count: Optional[int] = None


class RepositoryWebhooks(BaseModel):
    id: int = Field(..., description="Unique identifier of the repository", examples=[42])
    node_id: str = Field(..., examples=["MDEwOlJlcG9zaXRvcnkxMjk2MjY5"])
    name: str = Field(..., description="The name of the repository.", examples=["Team Environment"])
    full_name: str = Field(..., examples=["octocat/Hello-World"])
    license: Optional[LicenseSimple] = None
    organization: Optional[SimpleUser] = None
    forks: int
    permissions: Optional[Permissions17] = None
    owner: SimpleUser
    private: bool = Field(..., description="Whether the repository is private or public.")
    html_url: AnyUrl = Field(..., examples=["https://github.com/octocat/Hello-World"])
    description: Optional[str] = Field(..., examples=["This your first repo!"])
    fork: bool
    url: AnyUrl = Field(..., examples=["https://api.github.com/repos/octocat/Hello-World"])
    archive_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"]
    )
    assignees_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/assignees{/user}"]
    )
    blobs_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"]
    )
    branches_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/branches{/branch}"]
    )
    collaborators_url: str = Field(
        ...,
        examples=["http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"],
    )
    comments_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/comments{/number}"]
    )
    commits_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/commits{/sha}"]
    )
    compare_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"]
    )
    contents_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/contents/{+path}"]
    )
    contributors_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/contributors"]
    )
    deployments_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/deployments"]
    )
    downloads_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/downloads"]
    )
    events_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/events"]
    )
    forks_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/forks"]
    )
    git_commits_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"]
    )
    git_refs_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"]
    )
    git_tags_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"]
    )
    git_url: str = Field(..., examples=["git:github.com/octocat/Hello-World.git"])
    issue_comment_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"]
    )
    issue_events_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"]
    )
    issues_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/issues{/number}"]
    )
    keys_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"]
    )
    labels_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/labels{/name}"]
    )
    languages_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/languages"]
    )
    merges_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/merges"]
    )
    milestones_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/milestones{/number}"]
    )
    notifications_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
        ],
    )
    pulls_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/pulls{/number}"]
    )
    releases_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/releases{/id}"]
    )
    ssh_url: str = Field(..., examples=["git@github.com:octocat/Hello-World.git"])
    stargazers_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/stargazers"]
    )
    statuses_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"]
    )
    subscribers_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/subscribers"]
    )
    subscription_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/subscription"]
    )
    tags_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/tags"])
    teams_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/teams"]
    )
    trees_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"]
    )
    clone_url: str = Field(..., examples=["https://github.com/octocat/Hello-World.git"])
    mirror_url: Optional[AnyUrl] = Field(..., examples=["git:git.example.com/octocat/Hello-World"])
    hooks_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/hooks"]
    )
    svn_url: AnyUrl = Field(..., examples=["https://svn.github.com/octocat/Hello-World"])
    homepage: Optional[AnyUrl] = Field(..., examples=["https://github.com"])
    language: Optional[str] = None
    forks_count: int = Field(..., examples=[9])
    stargazers_count: int = Field(..., examples=[80])
    watchers_count: int = Field(..., examples=[80])
    size: int = Field(
        ...,
        description="The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.",
        examples=[108],
    )
    default_branch: str = Field(
        ..., description="The default branch of the repository.", examples=["master"]
    )
    open_issues_count: int = Field(..., examples=[0])
    is_template: Optional[bool] = Field(
        False,
        description="Whether this repository acts as a template that can be used to generate new repositories.",
        examples=[True],
    )
    topics: Optional[List[str]] = None
    custom_properties: Optional[Dict[str, Any]] = Field(
        None,
        description="The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.",
    )
    has_issues: bool = Field(..., description="Whether issues are enabled.", examples=[True])
    has_projects: bool = Field(..., description="Whether projects are enabled.", examples=[True])
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.", examples=[True])
    has_pages: bool
    has_downloads: bool = Field(..., description="Whether downloads are enabled.", examples=[True])
    has_discussions: Optional[bool] = Field(
        False, description="Whether discussions are enabled.", examples=[True]
    )
    archived: bool = Field(..., description="Whether the repository is archived.")
    disabled: bool = Field(..., description="Returns whether or not this repository disabled.")
    visibility: Optional[str] = Field(
        "public", description="The repository visibility: public, private, or internal."
    )
    pushed_at: Optional[AwareDatetime] = Field(..., examples=["2011-01-26T19:06:43Z"])
    created_at: Optional[AwareDatetime] = Field(..., examples=["2011-01-26T19:01:12Z"])
    updated_at: Optional[AwareDatetime] = Field(..., examples=["2011-01-26T19:14:43Z"])
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests.", examples=[True]
    )
    template_repository: Optional[TemplateRepository1] = None
    temp_clone_token: Optional[str] = None
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests.", examples=[True]
    )
    allow_auto_merge: Optional[bool] = Field(
        False,
        description="Whether to allow Auto-merge to be used on pull requests.",
        examples=[False],
    )
    delete_branch_on_merge: Optional[bool] = Field(
        False,
        description="Whether to delete head branches when pull requests are merged",
        examples=[False],
    )
    allow_update_branch: Optional[bool] = Field(
        False,
        description="Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.",
        examples=[False],
    )
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests.", examples=[True]
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow forking this repo")
    web_commit_signoff_required: Optional[bool] = Field(
        False, description="Whether to require contributors to sign off on web-based commits"
    )
    subscribers_count: Optional[int] = None
    network_count: Optional[int] = None
    open_issues: int
    watchers: int
    master_branch: Optional[str] = None
    starred_at: Optional[str] = Field(None, examples=['"2020-07-09T00:17:42Z"'])
    anonymous_access_enabled: Optional[bool] = Field(
        None, description="Whether anonymous git access is enabled for this repository"
    )


class SimpleUserWebhooks(SimpleUser):
    pass


class Conclusion3(Enum):
    success = "success"
    failure = "failure"
    neutral = "neutral"
    cancelled = "cancelled"
    skipped = "skipped"
    timed_out = "timed_out"
    action_required = "action_required"
    stale = "stale"
    startup_failure = "startup_failure"
    NoneType_None = None


class Status14(Enum):
    queued = "queued"
    in_progress = "in_progress"
    completed = "completed"
    pending = "pending"
    waiting = "waiting"


class SimpleCheckSuite(BaseModel):
    after: Optional[str] = Field(None, examples=["d6fde92930d4715a2b49857d24b940956b26d2d3"])
    app: Optional[Integration] = None
    before: Optional[str] = Field(None, examples=["146e867f55c26428e5f9fade55a9bbf5e95a7912"])
    conclusion: Optional[Conclusion3] = Field(None, examples=["neutral"])
    created_at: Optional[AwareDatetime] = None
    head_branch: Optional[str] = Field(None, examples=["master"])
    head_sha: Optional[str] = Field(
        None,
        description="The SHA of the head commit that is being checked.",
        examples=["009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"],
    )
    id: Optional[int] = Field(None, examples=[5])
    node_id: Optional[str] = Field(None, examples=["MDEwOkNoZWNrU3VpdGU1"])
    pull_requests: Optional[List[PullRequestMinimal]] = None
    repository: Optional[MinimalRepository] = None
    status: Optional[Status14] = Field(None, examples=["completed"])
    updated_at: Optional[AwareDatetime] = None
    url: Optional[str] = Field(
        None, examples=["https://api.github.com/repos/github/hello-world/check-suites/5"]
    )


class Conclusion4(Enum):
    waiting = "waiting"
    pending = "pending"
    startup_failure = "startup_failure"
    stale = "stale"
    success = "success"
    failure = "failure"
    neutral = "neutral"
    cancelled = "cancelled"
    skipped = "skipped"
    timed_out = "timed_out"
    action_required = "action_required"
    NoneType_None = None


class Output1(BaseModel):
    annotations_count: int
    annotations_url: AnyUrl
    summary: Optional[str] = None
    text: Optional[str] = None
    title: Optional[str] = None


class Status15(Enum):
    queued = "queued"
    in_progress = "in_progress"
    completed = "completed"
    pending = "pending"


class CheckRunWithSimpleCheckSuite(BaseModel):
    app: Optional[Integration] = None
    check_suite: SimpleCheckSuite
    completed_at: Optional[AwareDatetime] = Field(..., examples=["2018-05-04T01:14:52Z"])
    conclusion: Conclusion4 = Field(..., examples=["neutral"])
    deployment: Optional[DeploymentSimple] = None
    details_url: str = Field(..., examples=["https://example.com"])
    external_id: str = Field(..., examples=["42"])
    head_sha: str = Field(
        ...,
        description="The SHA of the commit that is being checked.",
        examples=["009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"],
    )
    html_url: str = Field(..., examples=["https://github.com/github/hello-world/runs/4"])
    id: int = Field(..., description="The id of the check.", examples=[21])
    name: str = Field(..., description="The name of the check.", examples=["test-coverage"])
    node_id: str = Field(..., examples=["MDg6Q2hlY2tSdW40"])
    output: Output1
    pull_requests: List[PullRequestMinimal]
    started_at: AwareDatetime = Field(..., examples=["2018-05-04T01:14:52Z"])
    status: Status15 = Field(
        ...,
        description="The phase of the lifecycle that the check is currently in.",
        examples=["queued"],
    )
    url: str = Field(..., examples=["https://api.github.com/repos/github/hello-world/check-runs/4"])


class Type29(Enum):
    Bot = "Bot"
    User = "User"
    Organization = "Organization"


class AnswerChosenBy(BaseModel):
    avatar_url: Optional[AnyUrl] = None
    deleted: Optional[bool] = None
    email: Optional[str] = None
    events_url: Optional[str] = None
    followers_url: Optional[AnyUrl] = None
    following_url: Optional[str] = None
    gists_url: Optional[str] = None
    gravatar_id: Optional[str] = None
    html_url: Optional[AnyUrl] = None
    id: int
    login: str
    name: Optional[str] = None
    node_id: Optional[str] = None
    organizations_url: Optional[AnyUrl] = None
    received_events_url: Optional[AnyUrl] = None
    repos_url: Optional[AnyUrl] = None
    site_admin: Optional[bool] = None
    starred_url: Optional[str] = None
    subscriptions_url: Optional[AnyUrl] = None
    type: Optional[Type29] = None
    url: Optional[AnyUrl] = None


class Category(BaseModel):
    created_at: AwareDatetime
    description: str
    emoji: str
    id: int
    is_answerable: bool
    name: str
    node_id: Optional[str] = None
    repository_id: int
    slug: str
    updated_at: str


class Reactions(BaseModel):
    field_1: int = Field(..., alias="+1")
    field_1_1: int = Field(..., alias="-1")
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: AnyUrl


class State19(Enum):
    open = "open"
    closed = "closed"
    locked = "locked"
    converting = "converting"
    transferring = "transferring"


class StateReason1(Enum):
    resolved = "resolved"
    outdated = "outdated"
    duplicate = "duplicate"
    reopened = "reopened"
    NoneType_None = None


class User3(Optional[AnswerChosenBy]):
    pass


class Discussion(BaseModel):
    active_lock_reason: Optional[str] = None
    answer_chosen_at: Optional[str] = None
    answer_chosen_by: Optional[AnswerChosenBy] = Field(..., title="User")
    answer_html_url: Optional[str] = None
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: str
    category: Category
    comments: int
    created_at: AwareDatetime
    html_url: str
    id: int
    locked: bool
    node_id: str
    number: int
    reactions: Optional[Reactions] = Field(None, title="Reactions")
    repository_url: str
    state: State19 = Field(
        ...,
        description="The current state of the discussion.\n`converting` means that the discussion is being converted from an issue.\n`transferring` means that the discussion is being transferred from another repository.",
    )
    state_reason: StateReason1 = Field(
        ..., description="The reason for the current state", examples=["resolved"]
    )
    timeline_url: Optional[str] = None
    title: str
    updated_at: AwareDatetime
    user: Optional[User3] = Field(..., title="User")


class MergeGroup(BaseModel):
    head_sha: str = Field(..., description="The SHA of the merge group.")
    head_ref: str = Field(..., description="The full ref of the merge group.")
    base_sha: str = Field(..., description="The SHA of the merge group's parent commit.")
    base_ref: str = Field(
        ..., description="The full ref of the branch the merge group will be merged into."
    )
    head_commit: SimpleCommit


class PermissionsAdded(Permissions6):
    pass


class PermissionsUpgraded(Permissions6):
    pass


class PermissionsResult(Permissions6):
    pass


class Repository1(BaseModel):
    full_name: str
    id: int = Field(..., description="Unique identifier of the repository")
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    private: bool = Field(..., description="Whether the repository is private or public.")


class PersonalAccessTokenRequest(BaseModel):
    id: int = Field(
        ...,
        description="Unique identifier of the request for access via fine-grained personal access token. Used as the `pat_request_id` parameter in the list and review API calls.",
    )
    owner: SimpleUser
    permissions_added: PermissionsAdded = Field(
        ..., description="New requested permissions, categorized by type of permission."
    )
    permissions_upgraded: PermissionsUpgraded = Field(
        ...,
        description="Requested permissions that elevate access for a previously approved request for access, categorized by type of permission.",
    )
    permissions_result: PermissionsResult = Field(
        ...,
        description="Permissions requested, categorized by type of permission. This field incorporates `permissions_added` and `permissions_upgraded`.",
    )
    repository_selection: RepositorySelection4 = Field(
        ..., description="Type of repository selection requested."
    )
    repository_count: Optional[int] = Field(
        ...,
        description="The number of repositories the token is requesting access to. This field is only populated when `repository_selection` is `subset`.",
    )
    repositories: List[Repository1] = Field(
        ...,
        description="An array of repository objects the token is requesting access to. This field is only populated when `repository_selection` is `subset`.",
    )
    created_at: str = Field(
        ..., description="Date and time when the request for access was created."
    )
    token_expired: bool = Field(
        ..., description="Whether the associated fine-grained personal access token has expired."
    )
    token_expires_at: Optional[str] = Field(
        ...,
        description="Date and time when the associated fine-grained personal access token expires.",
    )
    token_last_used_at: Optional[str] = Field(
        ...,
        description="Date and time when the associated fine-grained personal access token was last used for authentication.",
    )


class ProjectsV2(BaseModel):
    id: float
    node_id: str
    owner: SimpleUser
    creator: SimpleUser
    title: str
    description: Optional[str] = None
    public: bool
    closed_at: Optional[AwareDatetime] = Field(..., examples=["2022-04-28T12:00:00Z"])
    created_at: AwareDatetime = Field(..., examples=["2022-04-28T12:00:00Z"])
    updated_at: AwareDatetime = Field(..., examples=["2022-04-28T12:00:00Z"])
    number: int
    short_description: Optional[str] = None
    deleted_at: Optional[AwareDatetime] = Field(..., examples=["2022-04-28T12:00:00Z"])
    deleted_by: Optional[SimpleUser] = None


class ProjectsV2ItemContentType(Enum):
    Issue = "Issue"
    PullRequest = "PullRequest"
    DraftIssue = "DraftIssue"


class ProjectsV2Item(BaseModel):
    id: float
    node_id: Optional[str] = None
    project_node_id: Optional[str] = None
    content_node_id: str
    content_type: ProjectsV2ItemContentType
    creator: Optional[SimpleUser] = None
    created_at: AwareDatetime = Field(..., examples=["2022-04-28T12:00:00Z"])
    updated_at: AwareDatetime = Field(..., examples=["2022-04-28T12:00:00Z"])
    archived_at: Optional[AwareDatetime] = Field(..., examples=["2022-04-28T12:00:00Z"])


class SecretScanningAlertResolutionWebhook(Enum):
    false_positive = "false_positive"
    wont_fix = "wont_fix"
    revoked = "revoked"
    used_in_tests = "used_in_tests"
    pattern_deleted = "pattern_deleted"
    pattern_edited = "pattern_edited"
    NoneType_None = None


class SecretScanningAlertWebhook(BaseModel):
    number: Optional[AlertNumber] = None
    created_at: Optional[AlertCreatedAt] = None
    updated_at: Optional[AlertUpdatedAt] = None
    url: Optional[AlertUrl] = None
    html_url: Optional[AlertHtmlUrl] = None
    locations_url: Optional[AnyUrl] = Field(
        None, description="The REST API URL of the code locations for this alert."
    )
    resolution: Optional[SecretScanningAlertResolutionWebhook] = None
    resolved_at: Optional[AwareDatetime] = Field(
        None,
        description="The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    resolved_by: Optional[SimpleUser] = None
    resolution_comment: Optional[str] = Field(
        None, description="An optional comment to resolve an alert."
    )
    secret_type: Optional[str] = Field(
        None, description="The type of secret that secret scanning detected."
    )
    validity: Optional[Validity] = Field(
        None, description="The token status as of the latest validity check."
    )
    push_protection_bypassed: Optional[bool] = Field(
        None, description="Whether push protection was bypassed for the detected secret."
    )
    push_protection_bypassed_by: Optional[SimpleUser] = None
    push_protection_bypassed_at: Optional[AwareDatetime] = Field(
        None,
        description="The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )


class Action(Enum):
    disabled = "disabled"


class WebhookBranchProtectionConfigurationDisabled(BaseModel):
    action: Action
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action1(Enum):
    enabled = "enabled"


class WebhookBranchProtectionConfigurationEnabled(BaseModel):
    action: Action1
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action2(Enum):
    created = "created"


class AllowDeletionsEnforcementLevel(Enum):
    off = "off"
    non_admins = "non_admins"
    everyone = "everyone"


class Rule(BaseModel):
    admin_enforced: bool
    allow_deletions_enforcement_level: AllowDeletionsEnforcementLevel
    allow_force_pushes_enforcement_level: AllowDeletionsEnforcementLevel
    authorized_actor_names: List[str]
    authorized_actors_only: bool
    authorized_dismissal_actors_only: bool
    create_protected: Optional[bool] = None
    created_at: AwareDatetime
    dismiss_stale_reviews_on_push: bool
    id: int
    ignore_approvals_from_contributors: bool
    linear_history_requirement_enforcement_level: AllowDeletionsEnforcementLevel
    merge_queue_enforcement_level: AllowDeletionsEnforcementLevel
    name: str
    pull_request_reviews_enforcement_level: AllowDeletionsEnforcementLevel
    repository_id: int
    require_code_owner_review: bool
    require_last_push_approval: Optional[bool] = Field(
        None,
        description="Whether the most recent push must be approved by someone other than the person who pushed it",
    )
    required_approving_review_count: int
    required_conversation_resolution_level: AllowDeletionsEnforcementLevel
    required_deployments_enforcement_level: AllowDeletionsEnforcementLevel
    required_status_checks: List[str]
    required_status_checks_enforcement_level: AllowDeletionsEnforcementLevel
    signature_requirement_enforcement_level: AllowDeletionsEnforcementLevel
    strict_required_status_checks_policy: bool
    updated_at: AwareDatetime


class WebhookBranchProtectionRuleCreated(BaseModel):
    action: Action2
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    rule: Rule = Field(
        ...,
        description="The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.",
        title="branch protection rule",
    )
    sender: SimpleUserWebhooks


class Action3(Enum):
    deleted = "deleted"


class Rule1(Rule):
    pass


class WebhookBranchProtectionRuleDeleted(BaseModel):
    action: Action3
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    rule: Rule1 = Field(
        ...,
        description="The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.",
        title="branch protection rule",
    )
    sender: SimpleUserWebhooks


class Action4(Enum):
    edited = "edited"


class AdminEnforced(BaseModel):
    from_: Optional[bool] = Field(..., alias="from")


class AuthorizedActorNames(BaseModel):
    from_: List[str] = Field(..., alias="from")


class AuthorizedActorsOnly(AdminEnforced):
    pass


class AuthorizedDismissalActorsOnly(AdminEnforced):
    pass


class LinearHistoryRequirementEnforcementLevel2(BaseModel):
    from_: AllowDeletionsEnforcementLevel = Field(..., alias="from")


class RequiredStatusChecks(AuthorizedActorNames):
    pass


class RequiredStatusChecksEnforcementLevel2(LinearHistoryRequirementEnforcementLevel2):
    pass


class Changes(BaseModel):
    admin_enforced: Optional[AdminEnforced] = None
    authorized_actor_names: Optional[AuthorizedActorNames] = None
    authorized_actors_only: Optional[AuthorizedActorsOnly] = None
    authorized_dismissal_actors_only: Optional[AuthorizedDismissalActorsOnly] = None
    linear_history_requirement_enforcement_level: Optional[
        LinearHistoryRequirementEnforcementLevel2
    ] = None
    required_status_checks: Optional[RequiredStatusChecks] = None
    required_status_checks_enforcement_level: Optional[RequiredStatusChecksEnforcementLevel2] = None


class Rule2(Rule):
    pass


class WebhookBranchProtectionRuleEdited(BaseModel):
    action: Action4
    changes: Optional[Changes] = Field(
        None, description="If the action was `edited`, the changes to the rule."
    )
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    rule: Rule2 = Field(
        ...,
        description="The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.",
        title="branch protection rule",
    )
    sender: SimpleUserWebhooks


class Action5(Enum):
    completed = "completed"


class WebhookCheckRunCompleted(BaseModel):
    action: Optional[Action5] = None
    check_run: CheckRunWithSimpleCheckSuite
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class WebhookCheckRunCompletedFormEncoded(BaseModel):
    payload: str = Field(
        ...,
        description="A URL-encoded string of the check_run.completed JSON payload. The decoded payload is a JSON object.",
    )


class WebhookCheckRunCreated(BaseModel):
    action: Optional[Action2] = None
    check_run: CheckRunWithSimpleCheckSuite
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class WebhookCheckRunCreatedFormEncoded(BaseModel):
    payload: str = Field(
        ...,
        description="A URL-encoded string of the check_run.created JSON payload. The decoded payload is a JSON object.",
    )


class Action7(Enum):
    requested_action = "requested_action"


class RequestedAction(BaseModel):
    identifier: Optional[str] = Field(
        None, description="The integrator reference of the action requested by the user."
    )


class WebhookCheckRunRequestedAction(BaseModel):
    action: Action7
    check_run: CheckRunWithSimpleCheckSuite
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    requested_action: Optional[RequestedAction] = Field(
        None, description="The action requested by the user."
    )
    sender: SimpleUserWebhooks


class WebhookCheckRunRequestedActionFormEncoded(BaseModel):
    payload: str = Field(
        ...,
        description="A URL-encoded string of the check_run.requested_action JSON payload. The decoded payload is a JSON object.",
    )


class Action8(Enum):
    rerequested = "rerequested"


class WebhookCheckRunRerequested(BaseModel):
    action: Optional[Action8] = None
    check_run: CheckRunWithSimpleCheckSuite
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class WebhookCheckRunRerequestedFormEncoded(BaseModel):
    payload: str = Field(
        ...,
        description="A URL-encoded string of the check_run.rerequested JSON payload. The decoded payload is a JSON object.",
    )


class Event1(Enum):
    branch_protection_rule = "branch_protection_rule"
    check_run = "check_run"
    check_suite = "check_suite"
    code_scanning_alert = "code_scanning_alert"
    commit_comment = "commit_comment"
    content_reference = "content_reference"
    create = "create"
    delete = "delete"
    deployment = "deployment"
    deployment_review = "deployment_review"
    deployment_status = "deployment_status"
    deploy_key = "deploy_key"
    discussion = "discussion"
    discussion_comment = "discussion_comment"
    fork = "fork"
    gollum = "gollum"
    issues = "issues"
    issue_comment = "issue_comment"
    label = "label"
    member = "member"
    membership = "membership"
    milestone = "milestone"
    organization = "organization"
    org_block = "org_block"
    page_build = "page_build"
    project = "project"
    project_card = "project_card"
    project_column = "project_column"
    public = "public"
    pull_request = "pull_request"
    pull_request_review = "pull_request_review"
    pull_request_review_comment = "pull_request_review_comment"
    push = "push"
    registry_package = "registry_package"
    release = "release"
    repository = "repository"
    repository_dispatch = "repository_dispatch"
    secret_scanning_alert = "secret_scanning_alert"
    star = "star"
    status = "status"
    team = "team"
    team_add = "team_add"
    watch = "watch"
    workflow_dispatch = "workflow_dispatch"
    workflow_run = "workflow_run"
    merge_group = "merge_group"
    pull_request_review_thread = "pull_request_review_thread"
    workflow_job = "workflow_job"
    merge_queue_entry = "merge_queue_entry"
    security_and_analysis = "security_and_analysis"
    projects_v2_item = "projects_v2_item"
    secret_scanning_alert_location = "secret_scanning_alert_location"


class Owner5(Optional[AnswerChosenBy]):
    pass


class Permissions19(BaseModel):
    actions: Optional[Actions] = None
    administration: Optional[Actions] = None
    checks: Optional[Actions] = None
    content_references: Optional[Actions] = None
    contents: Optional[Actions] = None
    deployments: Optional[Actions] = None
    discussions: Optional[Actions] = None
    emails: Optional[Actions] = None
    environments: Optional[Actions] = None
    issues: Optional[Actions] = None
    keys: Optional[Actions] = None
    members: Optional[Actions] = None
    metadata: Optional[Actions] = None
    organization_administration: Optional[Actions] = None
    organization_hooks: Optional[Actions] = None
    organization_packages: Optional[Actions] = None
    organization_plan: Optional[Actions] = None
    organization_projects: Optional[RepositoryProjects] = None
    organization_secrets: Optional[Actions] = None
    organization_self_hosted_runners: Optional[Actions] = None
    organization_user_blocking: Optional[Actions] = None
    packages: Optional[Actions] = None
    pages: Optional[Actions] = None
    pull_requests: Optional[Actions] = None
    repository_hooks: Optional[Actions] = None
    repository_projects: Optional[RepositoryProjects] = None
    secret_scanning_alerts: Optional[Actions] = None
    secrets: Optional[Actions] = None
    security_events: Optional[Actions] = None
    security_scanning_alert: Optional[Actions] = None
    single_file: Optional[Actions] = None
    statuses: Optional[Actions] = None
    team_discussions: Optional[Actions] = None
    vulnerability_alerts: Optional[Actions] = None
    workflows: Optional[Actions] = None


class App2(BaseModel):
    created_at: Optional[AwareDatetime] = None
    description: Optional[str] = None
    events: Optional[List[Event1]] = Field(
        None, description="The list of events for the GitHub app"
    )
    external_url: Optional[AnyUrl] = None
    html_url: AnyUrl
    id: Optional[int] = Field(..., description="Unique identifier of the GitHub app")
    name: str = Field(..., description="The name of the GitHub app")
    node_id: str
    owner: Optional[Owner5] = Field(..., title="User")
    permissions: Optional[Permissions19] = Field(
        None, description="The set of permissions for the GitHub app"
    )
    slug: Optional[str] = Field(None, description="The slug name of the GitHub app")
    updated_at: Optional[AwareDatetime] = None


class Conclusion5(Enum):
    success = "success"
    failure = "failure"
    neutral = "neutral"
    cancelled = "cancelled"
    timed_out = "timed_out"
    action_required = "action_required"
    stale = "stale"
    NoneType_None = None
    skipped = "skipped"
    startup_failure = "startup_failure"


class Author5(BaseModel):
    date: Optional[AwareDatetime] = None
    email: Optional[EmailStr] = None
    name: str = Field(..., description="The git author's name.")
    username: Optional[str] = None


class Committer4(Author5):
    pass


class HeadCommit(BaseModel):
    author: Author5 = Field(
        ..., description="Metaproperties for Git author/committer information.", title="Committer"
    )
    committer: Committer4 = Field(
        ..., description="Metaproperties for Git author/committer information.", title="Committer"
    )
    id: str
    message: str
    timestamp: str
    tree_id: str


class Repo5(Repo):
    pass


class Base3(BaseModel):
    ref: str
    repo: Repo5 = Field(..., title="Repo Ref")
    sha: str


class Head3(Base3):
    pass


class PullRequest6(BaseModel):
    base: Base3
    head: Head3
    id: int
    number: int
    url: AnyUrl


class Status16(Enum):
    requested = "requested"
    in_progress = "in_progress"
    completed = "completed"
    queued = "queued"
    NoneType_None = None
    pending = "pending"


class CheckSuite2(BaseModel):
    after: Optional[str] = None
    app: App2 = Field(
        ...,
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        title="App",
    )
    before: Optional[str] = None
    check_runs_url: AnyUrl
    conclusion: Conclusion5 = Field(
        ...,
        description="The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has `completed`.",
    )
    created_at: AwareDatetime
    head_branch: Optional[str] = Field(..., description="The head branch name the changes are on.")
    head_commit: HeadCommit = Field(..., title="SimpleCommit")
    head_sha: str = Field(..., description="The SHA of the head commit that is being checked.")
    id: int
    latest_check_runs_count: int
    node_id: str
    pull_requests: List[PullRequest6] = Field(
        ...,
        description="An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty.",
    )
    rerequestable: Optional[bool] = None
    runs_rerequestable: Optional[bool] = None
    status: Status16 = Field(
        ...,
        description="The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.",
    )
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL that points to the check suite API resource.")


class WebhookCheckSuiteCompleted(BaseModel):
    action: Action5
    check_suite: CheckSuite2 = Field(
        ...,
        description="The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite).",
    )
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action10(Enum):
    requested = "requested"


class Event2(Enum):
    branch_protection_rule = "branch_protection_rule"
    check_run = "check_run"
    check_suite = "check_suite"
    code_scanning_alert = "code_scanning_alert"
    commit_comment = "commit_comment"
    content_reference = "content_reference"
    create = "create"
    delete = "delete"
    deployment = "deployment"
    deployment_review = "deployment_review"
    deployment_status = "deployment_status"
    deploy_key = "deploy_key"
    discussion = "discussion"
    discussion_comment = "discussion_comment"
    fork = "fork"
    gollum = "gollum"
    issues = "issues"
    issue_comment = "issue_comment"
    label = "label"
    member = "member"
    membership = "membership"
    milestone = "milestone"
    organization = "organization"
    org_block = "org_block"
    page_build = "page_build"
    project = "project"
    project_card = "project_card"
    project_column = "project_column"
    public = "public"
    pull_request = "pull_request"
    pull_request_review = "pull_request_review"
    pull_request_review_comment = "pull_request_review_comment"
    push = "push"
    registry_package = "registry_package"
    release = "release"
    repository = "repository"
    repository_dispatch = "repository_dispatch"
    secret_scanning_alert = "secret_scanning_alert"
    star = "star"
    status = "status"
    team = "team"
    team_add = "team_add"
    watch = "watch"
    workflow_dispatch = "workflow_dispatch"
    workflow_run = "workflow_run"
    pull_request_review_thread = "pull_request_review_thread"
    workflow_job = "workflow_job"
    merge_queue_entry = "merge_queue_entry"
    security_and_analysis = "security_and_analysis"
    secret_scanning_alert_location = "secret_scanning_alert_location"
    projects_v2_item = "projects_v2_item"
    merge_group = "merge_group"
    repository_import = "repository_import"


class Owner6(Optional[AnswerChosenBy]):
    pass


class Permissions20(Permissions19):
    pass


class App3(BaseModel):
    created_at: Optional[AwareDatetime] = None
    description: Optional[str] = None
    events: Optional[List[Event2]] = Field(
        None, description="The list of events for the GitHub app"
    )
    external_url: Optional[AnyUrl] = None
    html_url: AnyUrl
    id: Optional[int] = Field(..., description="Unique identifier of the GitHub app")
    name: str = Field(..., description="The name of the GitHub app")
    node_id: str
    owner: Optional[Owner6] = Field(..., title="User")
    permissions: Optional[Permissions20] = Field(
        None, description="The set of permissions for the GitHub app"
    )
    slug: Optional[str] = Field(None, description="The slug name of the GitHub app")
    updated_at: Optional[AwareDatetime] = None


class Conclusion6(Enum):
    success = "success"
    failure = "failure"
    neutral = "neutral"
    cancelled = "cancelled"
    timed_out = "timed_out"
    action_required = "action_required"
    stale = "stale"
    NoneType_None = None
    skipped = "skipped"


class HeadCommit1(HeadCommit):
    pass


class Base4(Base3):
    pass


class Head4(Base3):
    pass


class PullRequest7(BaseModel):
    base: Base4
    head: Head4
    id: int
    number: int
    url: AnyUrl


class Status17(Enum):
    requested = "requested"
    in_progress = "in_progress"
    completed = "completed"
    queued = "queued"
    NoneType_None = None


class CheckSuite3(BaseModel):
    after: Optional[str] = None
    app: App3 = Field(
        ...,
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        title="App",
    )
    before: Optional[str] = None
    check_runs_url: AnyUrl
    conclusion: Conclusion6 = Field(
        ...,
        description="The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has completed.",
    )
    created_at: AwareDatetime
    head_branch: Optional[str] = Field(..., description="The head branch name the changes are on.")
    head_commit: HeadCommit1 = Field(..., title="SimpleCommit")
    head_sha: str = Field(..., description="The SHA of the head commit that is being checked.")
    id: int
    latest_check_runs_count: int
    node_id: str
    pull_requests: List[PullRequest7] = Field(
        ...,
        description="An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty.",
    )
    rerequestable: Optional[bool] = None
    runs_rerequestable: Optional[bool] = None
    status: Status17 = Field(
        ...,
        description="The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.",
    )
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL that points to the check suite API resource.")


class WebhookCheckSuiteRequested(BaseModel):
    action: Action10
    check_suite: CheckSuite3 = Field(
        ...,
        description="The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite).",
    )
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Event3(Enum):
    branch_protection_rule = "branch_protection_rule"
    check_run = "check_run"
    check_suite = "check_suite"
    code_scanning_alert = "code_scanning_alert"
    commit_comment = "commit_comment"
    content_reference = "content_reference"
    create = "create"
    delete = "delete"
    deployment = "deployment"
    deployment_review = "deployment_review"
    deployment_status = "deployment_status"
    deploy_key = "deploy_key"
    discussion = "discussion"
    discussion_comment = "discussion_comment"
    fork = "fork"
    gollum = "gollum"
    issues = "issues"
    issue_comment = "issue_comment"
    label = "label"
    member = "member"
    membership = "membership"
    milestone = "milestone"
    organization = "organization"
    org_block = "org_block"
    page_build = "page_build"
    project = "project"
    project_card = "project_card"
    project_column = "project_column"
    public = "public"
    pull_request = "pull_request"
    pull_request_review = "pull_request_review"
    pull_request_review_comment = "pull_request_review_comment"
    push = "push"
    registry_package = "registry_package"
    release = "release"
    repository = "repository"
    repository_dispatch = "repository_dispatch"
    secret_scanning_alert = "secret_scanning_alert"
    star = "star"
    status = "status"
    team = "team"
    team_add = "team_add"
    watch = "watch"
    workflow_dispatch = "workflow_dispatch"
    workflow_run = "workflow_run"
    pull_request_review_thread = "pull_request_review_thread"
    merge_queue_entry = "merge_queue_entry"
    workflow_job = "workflow_job"


class Owner7(Optional[AnswerChosenBy]):
    pass


class Permissions21(Permissions19):
    pass


class App4(BaseModel):
    created_at: Optional[AwareDatetime] = None
    description: Optional[str] = None
    events: Optional[List[Event3]] = Field(
        None, description="The list of events for the GitHub app"
    )
    external_url: Optional[AnyUrl] = None
    html_url: AnyUrl
    id: Optional[int] = Field(..., description="Unique identifier of the GitHub app")
    name: str = Field(..., description="The name of the GitHub app")
    node_id: str
    owner: Optional[Owner7] = Field(..., title="User")
    permissions: Optional[Permissions21] = Field(
        None, description="The set of permissions for the GitHub app"
    )
    slug: Optional[str] = Field(None, description="The slug name of the GitHub app")
    updated_at: Optional[AwareDatetime] = None


class Conclusion7(Enum):
    success = "success"
    failure = "failure"
    neutral = "neutral"
    cancelled = "cancelled"
    timed_out = "timed_out"
    action_required = "action_required"
    stale = "stale"
    NoneType_None = None


class HeadCommit2(HeadCommit):
    pass


class Base5(Base3):
    pass


class Head5(Base3):
    pass


class PullRequest8(BaseModel):
    base: Base5
    head: Head5
    id: int
    number: int
    url: AnyUrl


class CheckSuite4(BaseModel):
    after: Optional[str] = None
    app: App4 = Field(
        ...,
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        title="App",
    )
    before: Optional[str] = None
    check_runs_url: AnyUrl
    conclusion: Conclusion7 = Field(
        ...,
        description="The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has completed.",
    )
    created_at: AwareDatetime
    head_branch: Optional[str] = Field(..., description="The head branch name the changes are on.")
    head_commit: HeadCommit2 = Field(..., title="SimpleCommit")
    head_sha: str = Field(..., description="The SHA of the head commit that is being checked.")
    id: int
    latest_check_runs_count: int
    node_id: str
    pull_requests: List[PullRequest8] = Field(
        ...,
        description="An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty.",
    )
    rerequestable: Optional[bool] = None
    runs_rerequestable: Optional[bool] = None
    status: Status17 = Field(
        ...,
        description="The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.",
    )
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL that points to the check suite API resource.")


class WebhookCheckSuiteRerequested(BaseModel):
    action: Action8
    check_suite: CheckSuite4 = Field(
        ...,
        description="The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite).",
    )
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action12(Enum):
    appeared_in_branch = "appeared_in_branch"


class DismissedBy(Optional[AnswerChosenBy]):
    pass


class DismissedReason2(Enum):
    false_positive = "false positive"
    won_t_fix = "won't fix"
    used_in_tests = "used in tests"
    NoneType_None = None


class Location2(BaseModel):
    end_column: Optional[int] = None
    end_line: Optional[int] = None
    path: Optional[str] = None
    start_column: Optional[int] = None
    start_line: Optional[int] = None


class MostRecentInstance(BaseModel):
    analysis_key: str = Field(
        ...,
        description="Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.",
    )
    category: Optional[str] = Field(
        None, description="Identifies the configuration under which the analysis was executed."
    )
    classifications: Optional[List[str]] = None
    commit_sha: Optional[str] = None
    environment: str = Field(
        ...,
        description="Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.",
    )
    location: Optional[Location2] = None
    message: Optional[Message] = None
    ref: str = Field(
        ..., description="The full Git reference, formatted as `refs/heads/<branch name>`."
    )
    state: CodeScanningAlertState = Field(..., description="State of a code scanning alert.")


class Rule3(BaseModel):
    description: str = Field(
        ..., description="A short description of the rule used to detect the alert."
    )
    id: str = Field(..., description="A unique identifier for the rule used to detect the alert.")
    severity: Severity3 = Field(..., description="The severity of the alert.")


class Tool(BaseModel):
    name: str = Field(
        ..., description="The name of the tool used to generate the code scanning analysis alert."
    )
    version: Optional[str] = Field(
        ..., description="The version of the tool used to detect the alert."
    )


class Alert(BaseModel):
    created_at: AwareDatetime = Field(
        ...,
        description="The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`",
    )
    dismissed_at: Optional[AwareDatetime] = Field(
        ...,
        description="The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    dismissed_by: Optional[DismissedBy] = Field(..., title="User")
    dismissed_reason: DismissedReason2 = Field(
        ..., description="The reason for dismissing or closing the alert."
    )
    html_url: AnyUrl = Field(..., description="The GitHub URL of the alert resource.")
    most_recent_instance: Optional[MostRecentInstance] = Field(None, title="Alert Instance")
    number: int = Field(..., description="The code scanning alert number.")
    rule: Rule3
    state: CodeScanningAlertState = Field(..., description="State of a code scanning alert.")
    tool: Tool
    url: AnyUrl


class WebhookCodeScanningAlertAppearedInBranch(BaseModel):
    action: Action12
    alert: Alert = Field(..., description="The code scanning alert involved in the event.")
    commit_oid: str = Field(
        ...,
        description="The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.",
    )
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    ref: str = Field(
        ...,
        description="The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.",
    )
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action13(Enum):
    closed_by_user = "closed_by_user"


class DismissedBy1(Optional[AnswerChosenBy]):
    pass


class MostRecentInstance1(Optional[MostRecentInstance]):
    pass


class Rule4(BaseModel):
    description: str = Field(
        ..., description="A short description of the rule used to detect the alert."
    )
    full_description: Optional[str] = None
    help: Optional[str] = None
    help_uri: Optional[str] = Field(
        None, description="A link to the documentation for the rule used to detect the alert."
    )
    id: str = Field(..., description="A unique identifier for the rule used to detect the alert.")
    name: Optional[str] = None
    severity: Severity3 = Field(..., description="The severity of the alert.")
    tags: Optional[List[str]] = None


class State23(Enum):
    dismissed = "dismissed"
    fixed = "fixed"


class Tool1(BaseModel):
    guid: Optional[str] = None
    name: str = Field(
        ..., description="The name of the tool used to generate the code scanning analysis alert."
    )
    version: Optional[str] = Field(
        ..., description="The version of the tool used to detect the alert."
    )


class Alert1(BaseModel):
    created_at: AwareDatetime = Field(
        ...,
        description="The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`",
    )
    dismissed_at: AwareDatetime = Field(
        ...,
        description="The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    dismissed_by: Optional[DismissedBy1] = Field(..., title="User")
    dismissed_reason: DismissedReason2 = Field(
        ..., description="The reason for dismissing or closing the alert."
    )
    html_url: AnyUrl = Field(..., description="The GitHub URL of the alert resource.")
    most_recent_instance: Optional[MostRecentInstance1] = Field(None, title="Alert Instance")
    number: int = Field(..., description="The code scanning alert number.")
    rule: Rule4
    state: State23 = Field(..., description="State of a code scanning alert.")
    tool: Tool1
    url: AnyUrl


class WebhookCodeScanningAlertClosedByUser(BaseModel):
    action: Action13
    alert: Alert1 = Field(..., description="The code scanning alert involved in the event.")
    commit_oid: str = Field(
        ...,
        description="The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.",
    )
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    ref: str = Field(
        ...,
        description="The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.",
    )
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class MostRecentInstance2(Optional[MostRecentInstance]):
    pass


class Rule5(Rule4):
    pass


class Alert2(BaseModel):
    created_at: Optional[AwareDatetime] = Field(
        ...,
        description="The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`",
    )
    dismissed_comment: Optional[CodeScanningAlertDismissedComment] = None
    html_url: AnyUrl = Field(..., description="The GitHub URL of the alert resource.")
    instances_url: Optional[str] = None
    most_recent_instance: Optional[MostRecentInstance2] = Field(None, title="Alert Instance")
    number: int = Field(..., description="The code scanning alert number.")
    rule: Rule5
    state: CodeScanningAlertSetState = Field(..., description="State of a code scanning alert.")
    tool: Optional[Tool1] = None
    updated_at: Optional[str] = None
    url: AnyUrl


class WebhookCodeScanningAlertCreated(BaseModel):
    action: Action2
    alert: Alert2 = Field(..., description="The code scanning alert involved in the event.")
    commit_oid: str = Field(
        ...,
        description="The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.",
    )
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    ref: str = Field(
        ...,
        description="The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.",
    )
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action15(Enum):
    fixed = "fixed"


class DismissedBy2(Optional[AnswerChosenBy]):
    pass


class MostRecentInstance3(Optional[MostRecentInstance]):
    pass


class Rule6(Rule4):
    pass


class Alert3(BaseModel):
    created_at: AwareDatetime = Field(
        ...,
        description="The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`",
    )
    dismissed_at: Optional[AwareDatetime] = Field(
        ...,
        description="The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    dismissed_by: Optional[DismissedBy2] = Field(..., title="User")
    dismissed_reason: DismissedReason2 = Field(
        ..., description="The reason for dismissing or closing the alert."
    )
    html_url: AnyUrl = Field(..., description="The GitHub URL of the alert resource.")
    instances_url: Optional[AnyUrl] = None
    most_recent_instance: Optional[MostRecentInstance3] = Field(None, title="Alert Instance")
    number: int = Field(..., description="The code scanning alert number.")
    rule: Rule6
    state: Action15 = Field(..., description="State of a code scanning alert.")
    tool: Tool1
    url: AnyUrl


class WebhookCodeScanningAlertFixed(BaseModel):
    action: Action15
    alert: Alert3 = Field(..., description="The code scanning alert involved in the event.")
    commit_oid: str = Field(
        ...,
        description="The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.",
    )
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    ref: str = Field(
        ...,
        description="The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.",
    )
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action16(Enum):
    reopened = "reopened"


class MostRecentInstance4(Optional[MostRecentInstance]):
    pass


class Rule7(Rule4):
    pass


class Alert4(BaseModel):
    created_at: AwareDatetime = Field(
        ...,
        description="The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`",
    )
    dismissed_at: Optional[str] = Field(
        ...,
        description="The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    dismissed_by: Optional[Dict[str, Any]] = None
    dismissed_reason: Optional[str] = Field(
        ...,
        description="The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.",
    )
    html_url: AnyUrl = Field(..., description="The GitHub URL of the alert resource.")
    most_recent_instance: Optional[MostRecentInstance4] = Field(None, title="Alert Instance")
    number: int = Field(..., description="The code scanning alert number.")
    rule: Rule7
    state: CodeScanningAlertState = Field(..., description="State of a code scanning alert.")
    tool: Tool1
    url: AnyUrl


class WebhookCodeScanningAlertReopened(BaseModel):
    action: Action16
    alert: Optional[Alert4] = Field(
        ..., description="The code scanning alert involved in the event."
    )
    commit_oid: Optional[str] = Field(
        ...,
        description="The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.",
    )
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    ref: Optional[str] = Field(
        ...,
        description="The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.",
    )
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action17(Enum):
    reopened_by_user = "reopened_by_user"


class MostRecentInstance5(Optional[MostRecentInstance]):
    pass


class Rule8(Rule3):
    pass


class State31(Enum):
    open = "open"
    fixed = "fixed"


class Tool5(Tool):
    pass


class Alert5(BaseModel):
    created_at: AwareDatetime = Field(
        ...,
        description="The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`",
    )
    html_url: AnyUrl = Field(..., description="The GitHub URL of the alert resource.")
    most_recent_instance: Optional[MostRecentInstance5] = Field(None, title="Alert Instance")
    number: int = Field(..., description="The code scanning alert number.")
    rule: Rule8
    state: State31 = Field(..., description="State of a code scanning alert.")
    tool: Tool5
    url: AnyUrl


class WebhookCodeScanningAlertReopenedByUser(BaseModel):
    action: Action17
    alert: Alert5 = Field(..., description="The code scanning alert involved in the event.")
    commit_oid: str = Field(
        ...,
        description="The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.",
    )
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    ref: str = Field(
        ...,
        description="The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.",
    )
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class User4(Optional[AnswerChosenBy]):
    pass


class Comment(BaseModel):
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: str = Field(..., description="The text of the comment.")
    commit_id: str = Field(..., description="The SHA of the commit to which the comment applies.")
    created_at: str
    html_url: AnyUrl
    id: int = Field(..., description="The ID of the commit comment.")
    line: Optional[int] = Field(
        ...,
        description="The line of the blob to which the comment applies. The last line of the range for a multi-line comment",
    )
    node_id: str = Field(..., description="The node ID of the commit comment.")
    path: Optional[str] = Field(
        ..., description="The relative path of the file to which the comment applies."
    )
    position: Optional[int] = Field(
        ..., description="The line index in the diff to which the comment applies."
    )
    reactions: Optional[Reactions] = Field(None, title="Reactions")
    updated_at: str
    url: AnyUrl
    user: Optional[User4] = Field(..., title="User")


class WebhookCommitCommentCreated(BaseModel):
    action: Action2 = Field(..., description="The action performed. Can be `created`.")
    comment: Comment = Field(
        ...,
        description="The [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment) resource.",
    )
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class RefType(Enum):
    tag = "tag"
    branch = "branch"


class WebhookCreate(BaseModel):
    description: Optional[str] = Field(..., description="The repository's current description.")
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    master_branch: str = Field(
        ..., description="The name of the repository's default branch (usually `main`)."
    )
    organization: Optional[OrganizationSimpleWebhooks] = None
    pusher_type: str = Field(
        ..., description="The pusher type for the event. Can be either `user` or a deploy key."
    )
    ref: str = Field(
        ...,
        description="The [`git ref`](https://docs.github.com/rest/git/refs#get-a-reference) resource.",
    )
    ref_type: RefType = Field(
        ..., description="The type of Git ref object created in the repository."
    )
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class WebhookCustomPropertyCreated(BaseModel):
    action: Action2
    definition: OrgCustomProperty
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: OrganizationSimpleWebhooks
    sender: Optional[SimpleUserWebhooks] = None


class Definition(BaseModel):
    property_name: str = Field(..., description="The name of the property that was deleted.")


class WebhookCustomPropertyDeleted(BaseModel):
    action: Action3
    definition: Definition
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: OrganizationSimpleWebhooks
    sender: Optional[SimpleUserWebhooks] = None


class Action21(Enum):
    updated = "updated"


class WebhookCustomPropertyUpdated(BaseModel):
    action: Action21
    definition: OrgCustomProperty
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: OrganizationSimpleWebhooks
    sender: Optional[SimpleUserWebhooks] = None


class WebhookCustomPropertyValuesUpdated(BaseModel):
    action: Action21
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    repository: RepositoryWebhooks
    organization: OrganizationSimpleWebhooks
    sender: Optional[SimpleUserWebhooks] = None
    new_property_values: List[CustomPropertyValue] = Field(
        ..., description="The new custom property values for the repository."
    )
    old_property_values: List[CustomPropertyValue] = Field(
        ..., description="The old custom property values for the repository."
    )


class WebhookDelete(BaseModel):
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    pusher_type: str = Field(
        ..., description="The pusher type for the event. Can be either `user` or a deploy key."
    )
    ref: str = Field(
        ...,
        description="The [`git ref`](https://docs.github.com/rest/git/refs#get-a-reference) resource.",
    )
    ref_type: RefType = Field(
        ..., description="The type of Git ref object deleted in the repository."
    )
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action23(Enum):
    auto_dismissed = "auto_dismissed"


class WebhookDependabotAlertAutoDismissed(BaseModel):
    action: Action23
    alert: DependabotAlert
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    enterprise: Optional[EnterpriseWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action24(Enum):
    auto_reopened = "auto_reopened"


class WebhookDependabotAlertAutoReopened(BaseModel):
    action: Action24
    alert: DependabotAlert
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    enterprise: Optional[EnterpriseWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class WebhookDependabotAlertCreated(BaseModel):
    action: Action2
    alert: DependabotAlert
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    enterprise: Optional[EnterpriseWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action26(Enum):
    dismissed = "dismissed"


class WebhookDependabotAlertDismissed(BaseModel):
    action: Action26
    alert: DependabotAlert
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    enterprise: Optional[EnterpriseWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class WebhookDependabotAlertFixed(BaseModel):
    action: Action15
    alert: DependabotAlert
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    enterprise: Optional[EnterpriseWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action28(Enum):
    reintroduced = "reintroduced"


class WebhookDependabotAlertReintroduced(BaseModel):
    action: Action28
    alert: DependabotAlert
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    enterprise: Optional[EnterpriseWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class WebhookDependabotAlertReopened(BaseModel):
    action: Action16
    alert: DependabotAlert
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    enterprise: Optional[EnterpriseWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Key1(BaseModel):
    added_by: Optional[str] = None
    created_at: str
    id: int
    key: str
    last_used: Optional[str] = None
    read_only: bool
    title: str
    url: AnyUrl
    verified: bool


class WebhookDeployKeyCreated(BaseModel):
    action: Action2
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    key: Key1 = Field(
        ...,
        description="The [`deploy key`](https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-deploy-key) resource.",
    )
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class WebhookDeployKeyDeleted(BaseModel):
    action: Action3
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    key: Key1 = Field(
        ...,
        description="The [`deploy key`](https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-deploy-key) resource.",
    )
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Creator(Optional[AnswerChosenBy]):
    pass


class Event4(Enum):
    branch_protection_rule = "branch_protection_rule"
    check_run = "check_run"
    check_suite = "check_suite"
    code_scanning_alert = "code_scanning_alert"
    commit_comment = "commit_comment"
    content_reference = "content_reference"
    create = "create"
    delete = "delete"
    deployment = "deployment"
    deployment_review = "deployment_review"
    deployment_status = "deployment_status"
    deploy_key = "deploy_key"
    discussion = "discussion"
    discussion_comment = "discussion_comment"
    fork = "fork"
    gollum = "gollum"
    issues = "issues"
    issue_comment = "issue_comment"
    label = "label"
    member = "member"
    membership = "membership"
    milestone = "milestone"
    organization = "organization"
    org_block = "org_block"
    page_build = "page_build"
    project = "project"
    project_card = "project_card"
    project_column = "project_column"
    public = "public"
    pull_request = "pull_request"
    pull_request_review = "pull_request_review"
    pull_request_review_comment = "pull_request_review_comment"
    push = "push"
    registry_package = "registry_package"
    release = "release"
    repository = "repository"
    repository_dispatch = "repository_dispatch"
    secret_scanning_alert = "secret_scanning_alert"
    star = "star"
    status = "status"
    team = "team"
    team_add = "team_add"
    watch = "watch"
    workflow_dispatch = "workflow_dispatch"
    workflow_run = "workflow_run"
    workflow_job = "workflow_job"
    pull_request_review_thread = "pull_request_review_thread"
    merge_queue_entry = "merge_queue_entry"
    secret_scanning_alert_location = "secret_scanning_alert_location"
    merge_group = "merge_group"


class Owner8(Optional[AnswerChosenBy]):
    pass


class Permissions22(BaseModel):
    actions: Optional[Actions] = None
    administration: Optional[Actions] = None
    checks: Optional[Actions] = None
    content_references: Optional[Actions] = None
    contents: Optional[Actions] = None
    deployments: Optional[Actions] = None
    discussions: Optional[Actions] = None
    emails: Optional[Actions] = None
    environments: Optional[Actions] = None
    issues: Optional[Actions] = None
    keys: Optional[Actions] = None
    members: Optional[Actions] = None
    metadata: Optional[Actions] = None
    organization_administration: Optional[Actions] = None
    organization_hooks: Optional[Actions] = None
    organization_packages: Optional[Actions] = None
    organization_plan: Optional[Actions] = None
    organization_projects: Optional[Actions] = None
    organization_secrets: Optional[Actions] = None
    organization_self_hosted_runners: Optional[Actions] = None
    organization_user_blocking: Optional[Actions] = None
    packages: Optional[Actions] = None
    pages: Optional[Actions] = None
    pull_requests: Optional[Actions] = None
    repository_hooks: Optional[Actions] = None
    repository_projects: Optional[Actions] = None
    secret_scanning_alerts: Optional[Actions] = None
    secrets: Optional[Actions] = None
    security_events: Optional[Actions] = None
    security_scanning_alert: Optional[Actions] = None
    single_file: Optional[Actions] = None
    statuses: Optional[Actions] = None
    team_discussions: Optional[Actions] = None
    vulnerability_alerts: Optional[Actions] = None
    workflows: Optional[Actions] = None


class PerformedViaGithubApp(BaseModel):
    created_at: Optional[AwareDatetime] = None
    description: Optional[str] = None
    events: Optional[List[Event4]] = Field(
        None, description="The list of events for the GitHub app"
    )
    external_url: Optional[AnyUrl] = None
    html_url: AnyUrl
    id: Optional[int] = Field(..., description="Unique identifier of the GitHub app")
    name: str = Field(..., description="The name of the GitHub app")
    node_id: str
    owner: Optional[Owner8] = Field(..., title="User")
    permissions: Optional[Permissions22] = Field(
        None, description="The set of permissions for the GitHub app"
    )
    slug: Optional[str] = Field(None, description="The slug name of the GitHub app")
    updated_at: Optional[AwareDatetime] = None


class Deployment1(BaseModel):
    created_at: str
    creator: Optional[Creator] = Field(..., title="User")
    description: Optional[str] = None
    environment: str
    id: int
    node_id: str
    original_environment: str
    payload: Union[Dict[str, Any], str]
    performed_via_github_app: Optional[PerformedViaGithubApp] = Field(
        None,
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        title="App",
    )
    production_environment: Optional[bool] = None
    ref: str
    repository_url: AnyUrl
    sha: str
    statuses_url: AnyUrl
    task: str
    transient_environment: Optional[bool] = None
    updated_at: str
    url: AnyUrl


class Workflow1(BaseModel):
    badge_url: AnyUrl
    created_at: AwareDatetime
    html_url: AnyUrl
    id: int
    name: str
    node_id: str
    path: str
    state: str
    updated_at: AwareDatetime
    url: AnyUrl


class Actor1(Optional[AnswerChosenBy]):
    pass


class Owner9(BaseModel):
    avatar_url: Optional[str] = None
    events_url: Optional[str] = None
    followers_url: Optional[str] = None
    following_url: Optional[str] = None
    gists_url: Optional[str] = None
    gravatar_id: Optional[str] = None
    html_url: Optional[str] = None
    id: Optional[int] = None
    login: Optional[str] = None
    node_id: Optional[str] = None
    organizations_url: Optional[str] = None
    received_events_url: Optional[str] = None
    repos_url: Optional[str] = None
    site_admin: Optional[bool] = None
    starred_url: Optional[str] = None
    subscriptions_url: Optional[str] = None
    type: Optional[str] = None
    url: Optional[str] = None


class HeadRepository(BaseModel):
    archive_url: Optional[str] = None
    assignees_url: Optional[str] = None
    blobs_url: Optional[str] = None
    branches_url: Optional[str] = None
    collaborators_url: Optional[str] = None
    comments_url: Optional[str] = None
    commits_url: Optional[str] = None
    compare_url: Optional[str] = None
    contents_url: Optional[str] = None
    contributors_url: Optional[str] = None
    deployments_url: Optional[str] = None
    downloads_url: Optional[str] = None
    events_url: Optional[str] = None
    fork: Optional[bool] = None
    forks_url: Optional[str] = None
    full_name: Optional[str] = None
    git_commits_url: Optional[str] = None
    git_refs_url: Optional[str] = None
    git_tags_url: Optional[str] = None
    hooks_url: Optional[str] = None
    html_url: Optional[str] = None
    id: Optional[int] = None
    issue_comment_url: Optional[str] = None
    issue_events_url: Optional[str] = None
    issues_url: Optional[str] = None
    keys_url: Optional[str] = None
    labels_url: Optional[str] = None
    languages_url: Optional[str] = None
    merges_url: Optional[str] = None
    milestones_url: Optional[str] = None
    name: Optional[str] = None
    node_id: Optional[str] = None
    notifications_url: Optional[str] = None
    owner: Optional[Owner9] = None
    private: Optional[bool] = None
    pulls_url: Optional[str] = None
    releases_url: Optional[str] = None
    stargazers_url: Optional[str] = None
    statuses_url: Optional[str] = None
    subscribers_url: Optional[str] = None
    subscription_url: Optional[str] = None
    tags_url: Optional[str] = None
    teams_url: Optional[str] = None
    trees_url: Optional[str] = None
    url: Optional[str] = None


class Base6(Base3):
    pass


class Head6(Base3):
    pass


class PullRequest9(BaseModel):
    base: Base6
    head: Head6
    id: int
    number: int
    url: AnyUrl


class ReferencedWorkflow1(BaseModel):
    path: str
    ref: Optional[str] = None
    sha: str


class Repository2(HeadRepository):
    pass


class Status19(Enum):
    requested = "requested"
    in_progress = "in_progress"
    completed = "completed"
    queued = "queued"
    waiting = "waiting"
    pending = "pending"


class TriggeringActor(Optional[AnswerChosenBy]):
    pass


class WorkflowRun2(BaseModel):
    actor: Optional[Actor1] = Field(..., title="User")
    artifacts_url: Optional[str] = None
    cancel_url: Optional[str] = None
    check_suite_id: int
    check_suite_node_id: str
    check_suite_url: Optional[str] = None
    conclusion: Conclusion7
    created_at: AwareDatetime
    display_title: str
    event: str
    head_branch: str
    head_repository: Optional[HeadRepository] = None
    head_sha: str
    html_url: AnyUrl
    id: int
    jobs_url: Optional[str] = None
    logs_url: Optional[str] = None
    name: str
    node_id: str
    path: str
    pull_requests: List[PullRequest9]
    referenced_workflows: Optional[List[ReferencedWorkflow1]] = None
    repository: Optional[Repository2] = None
    rerun_url: Optional[str] = None
    run_attempt: int
    run_number: int
    run_started_at: AwareDatetime
    status: Status19
    triggering_actor: Optional[TriggeringActor] = Field(None, title="User")
    updated_at: AwareDatetime
    url: AnyUrl
    workflow_id: int
    workflow_url: Optional[str] = None


class WebhookDeploymentCreated(BaseModel):
    action: Action2
    deployment: Deployment1 = Field(
        ...,
        description="The [deployment](https://docs.github.com/rest/deployments/deployments#list-deployments).",
        title="Deployment",
    )
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks
    workflow: Optional[Workflow1] = Field(..., title="Workflow")
    workflow_run: Optional[WorkflowRun2] = Field(..., title="Deployment Workflow Run")


class WebhookDeploymentProtectionRuleRequested(BaseModel):
    action: Optional[Action10] = None
    environment: Optional[str] = Field(
        None, description="The name of the environment that has the deployment protection rule."
    )
    event: Optional[str] = Field(
        None, description="The event that triggered the deployment protection rule."
    )
    deployment_callback_url: Optional[AnyUrl] = Field(
        None, description="The URL to review the deployment protection rule."
    )
    deployment: Optional[Deployment] = None
    pull_requests: Optional[List[PullRequest3]] = None
    repository: Optional[RepositoryWebhooks] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    sender: Optional[SimpleUserWebhooks] = None


class Action34(Enum):
    approved = "approved"


class Approver(Owner9):
    pass


class Reviewer3(Optional[AnswerChosenBy]):
    pass


class Type43(Enum):
    User = "User"


class Reviewer2(BaseModel):
    reviewer: Optional[Reviewer3] = Field(None, title="User")
    type: Optional[Type43] = None


class WorkflowJobRun(BaseModel):
    created_at: str
    environment: str
    html_url: str
    id: int
    status: str
    updated_at: str


class WorkflowJobRun1(BaseModel):
    created_at: Optional[str] = None
    environment: Optional[str] = None
    html_url: Optional[str] = None
    id: Optional[int] = None
    name: Optional[str] = None
    status: Optional[str] = None
    updated_at: Optional[str] = None


class Actor2(Optional[AnswerChosenBy]):
    pass


class HeadRepository1(BaseModel):
    archive_url: Optional[str] = None
    assignees_url: Optional[str] = None
    blobs_url: Optional[str] = None
    branches_url: Optional[str] = None
    collaborators_url: Optional[str] = None
    comments_url: Optional[str] = None
    commits_url: Optional[str] = None
    compare_url: Optional[str] = None
    contents_url: Optional[str] = None
    contributors_url: Optional[str] = None
    deployments_url: Optional[str] = None
    description: Optional[str] = None
    downloads_url: Optional[str] = None
    events_url: Optional[str] = None
    fork: Optional[bool] = None
    forks_url: Optional[str] = None
    full_name: Optional[str] = None
    git_commits_url: Optional[str] = None
    git_refs_url: Optional[str] = None
    git_tags_url: Optional[str] = None
    hooks_url: Optional[str] = None
    html_url: Optional[str] = None
    id: Optional[int] = None
    issue_comment_url: Optional[str] = None
    issue_events_url: Optional[str] = None
    issues_url: Optional[str] = None
    keys_url: Optional[str] = None
    labels_url: Optional[str] = None
    languages_url: Optional[str] = None
    merges_url: Optional[str] = None
    milestones_url: Optional[str] = None
    name: Optional[str] = None
    node_id: Optional[str] = None
    notifications_url: Optional[str] = None
    owner: Optional[Owner9] = None
    private: Optional[bool] = None
    pulls_url: Optional[str] = None
    releases_url: Optional[str] = None
    stargazers_url: Optional[str] = None
    statuses_url: Optional[str] = None
    subscribers_url: Optional[str] = None
    subscription_url: Optional[str] = None
    tags_url: Optional[str] = None
    teams_url: Optional[str] = None
    trees_url: Optional[str] = None
    url: Optional[str] = None


class Base7(Base3):
    pass


class Head7(Base3):
    pass


class PullRequest10(BaseModel):
    base: Base7
    head: Head7
    id: int
    number: int
    url: AnyUrl


class Repository3(HeadRepository1):
    pass


class TriggeringActor1(Optional[AnswerChosenBy]):
    pass


class WorkflowRun3(BaseModel):
    actor: Optional[Actor2] = Field(..., title="User")
    artifacts_url: Optional[str] = None
    cancel_url: Optional[str] = None
    check_suite_id: int
    check_suite_node_id: str
    check_suite_url: Optional[str] = None
    conclusion: Conclusion7
    created_at: AwareDatetime
    display_title: str
    event: str
    head_branch: str
    head_commit: Optional[Dict[str, Any]] = None
    head_repository: Optional[HeadRepository1] = None
    head_sha: str
    html_url: AnyUrl
    id: int
    jobs_url: Optional[str] = None
    logs_url: Optional[str] = None
    name: str
    node_id: str
    path: str
    previous_attempt_url: Optional[str] = None
    pull_requests: List[PullRequest10]
    referenced_workflows: Optional[List[ReferencedWorkflow1]] = None
    repository: Optional[Repository3] = None
    rerun_url: Optional[str] = None
    run_attempt: int
    run_number: int
    run_started_at: AwareDatetime
    status: Status19
    triggering_actor: Optional[TriggeringActor1] = Field(..., title="User")
    updated_at: AwareDatetime
    url: AnyUrl
    workflow_id: int
    workflow_url: Optional[str] = None


class WebhookDeploymentReviewApproved(BaseModel):
    action: Action34
    approver: Optional[Approver] = None
    comment: Optional[str] = None
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: OrganizationSimpleWebhooks
    repository: RepositoryWebhooks
    reviewers: Optional[List[Reviewer2]] = None
    sender: SimpleUserWebhooks
    since: str
    workflow_job_run: Optional[WorkflowJobRun] = None
    workflow_job_runs: Optional[List[WorkflowJobRun1]] = None
    workflow_run: Optional[WorkflowRun3] = Field(..., title="Deployment Workflow Run")


class Action35(Enum):
    rejected = "rejected"


class Reviewer5(Optional[AnswerChosenBy]):
    pass


class Reviewer4(BaseModel):
    reviewer: Optional[Reviewer5] = Field(None, title="User")
    type: Optional[Type43] = None


class WorkflowJobRun2(WorkflowJobRun):
    pass


class WorkflowJobRun3(BaseModel):
    conclusion: Optional[str] = None
    created_at: Optional[str] = None
    environment: Optional[str] = None
    html_url: Optional[str] = None
    id: Optional[int] = None
    name: Optional[str] = None
    status: Optional[str] = None
    updated_at: Optional[str] = None


class Actor3(Optional[AnswerChosenBy]):
    pass


class HeadRepository2(HeadRepository1):
    pass


class Base8(Base3):
    pass


class Head8(Base3):
    pass


class PullRequest11(BaseModel):
    base: Base8
    head: Head8
    id: int
    number: int
    url: AnyUrl


class Repository4(HeadRepository1):
    pass


class Status21(Enum):
    requested = "requested"
    in_progress = "in_progress"
    completed = "completed"
    queued = "queued"
    waiting = "waiting"


class TriggeringActor2(Optional[AnswerChosenBy]):
    pass


class WorkflowRun4(BaseModel):
    actor: Optional[Actor3] = Field(..., title="User")
    artifacts_url: Optional[str] = None
    cancel_url: Optional[str] = None
    check_suite_id: int
    check_suite_node_id: str
    check_suite_url: Optional[str] = None
    conclusion: Conclusion7
    created_at: AwareDatetime
    event: str
    head_branch: str
    head_commit: Optional[Dict[str, Any]] = None
    head_repository: Optional[HeadRepository2] = None
    head_sha: str
    html_url: AnyUrl
    id: int
    jobs_url: Optional[str] = None
    logs_url: Optional[str] = None
    name: str
    node_id: str
    path: str
    previous_attempt_url: Optional[str] = None
    pull_requests: List[PullRequest11]
    referenced_workflows: Optional[List[ReferencedWorkflow1]] = None
    repository: Optional[Repository4] = None
    rerun_url: Optional[str] = None
    run_attempt: int
    run_number: int
    run_started_at: AwareDatetime
    status: Status21
    triggering_actor: Optional[TriggeringActor2] = Field(..., title="User")
    updated_at: AwareDatetime
    url: AnyUrl
    workflow_id: int
    workflow_url: Optional[str] = None
    display_title: str


class WebhookDeploymentReviewRejected(BaseModel):
    action: Action35
    approver: Optional[Approver] = None
    comment: Optional[str] = None
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: OrganizationSimpleWebhooks
    repository: RepositoryWebhooks
    reviewers: Optional[List[Reviewer4]] = None
    sender: SimpleUserWebhooks
    since: str
    workflow_job_run: Optional[WorkflowJobRun2] = None
    workflow_job_runs: Optional[List[WorkflowJobRun3]] = None
    workflow_run: Optional[WorkflowRun4] = Field(..., title="Deployment Workflow Run")


class Requester(Optional[AnswerChosenBy]):
    pass


class Reviewer7(BaseModel):
    avatar_url: Optional[AnyUrl] = None
    deleted: Optional[bool] = None
    email: Optional[str] = None
    events_url: Optional[str] = None
    followers_url: Optional[AnyUrl] = None
    following_url: Optional[str] = None
    gists_url: Optional[str] = None
    gravatar_id: Optional[str] = None
    html_url: Optional[AnyUrl] = None
    id: int
    login: Optional[str] = None
    name: Optional[str] = None
    node_id: Optional[str] = None
    organizations_url: Optional[AnyUrl] = None
    received_events_url: Optional[AnyUrl] = None
    repos_url: Optional[AnyUrl] = None
    site_admin: Optional[bool] = None
    starred_url: Optional[str] = None
    subscriptions_url: Optional[AnyUrl] = None
    type: Optional[Type29] = None
    url: Optional[AnyUrl] = None


class Reviewer6(BaseModel):
    reviewer: Optional[Reviewer7] = Field(None, title="User")
    type: Optional[DeploymentReviewerType] = None


class WorkflowJobRun4(BaseModel):
    created_at: str
    environment: str
    html_url: str
    id: int
    name: Optional[str] = None
    status: str
    updated_at: str


class Actor4(Optional[AnswerChosenBy]):
    pass


class HeadRepository3(HeadRepository1):
    pass


class Base9(Base3):
    pass


class Head9(Base3):
    pass


class PullRequest12(BaseModel):
    base: Base9
    head: Head9
    id: int
    number: int
    url: AnyUrl


class Repository5(HeadRepository1):
    pass


class TriggeringActor3(Optional[AnswerChosenBy]):
    pass


class WorkflowRun5(BaseModel):
    actor: Optional[Actor4] = Field(..., title="User")
    artifacts_url: Optional[str] = None
    cancel_url: Optional[str] = None
    check_suite_id: int
    check_suite_node_id: str
    check_suite_url: Optional[str] = None
    conclusion: Conclusion7
    created_at: AwareDatetime
    event: str
    head_branch: str
    head_commit: Optional[Dict[str, Any]] = None
    head_repository: Optional[HeadRepository3] = None
    head_sha: str
    html_url: AnyUrl
    id: int
    jobs_url: Optional[str] = None
    logs_url: Optional[str] = None
    name: str
    node_id: str
    path: str
    previous_attempt_url: Optional[str] = None
    pull_requests: List[PullRequest12]
    referenced_workflows: Optional[List[ReferencedWorkflow1]] = None
    repository: Optional[Repository5] = None
    rerun_url: Optional[str] = None
    run_attempt: int
    run_number: int
    run_started_at: AwareDatetime
    status: Status19
    triggering_actor: Optional[TriggeringActor3] = Field(..., title="User")
    updated_at: AwareDatetime
    url: AnyUrl
    workflow_id: int
    workflow_url: Optional[str] = None
    display_title: str


class WebhookDeploymentReviewRequested(BaseModel):
    action: Action10
    enterprise: Optional[EnterpriseWebhooks] = None
    environment: str
    installation: Optional[SimpleInstallation] = None
    organization: OrganizationSimpleWebhooks
    repository: RepositoryWebhooks
    requester: Optional[Requester] = Field(..., title="User")
    reviewers: List[Reviewer6]
    sender: SimpleUserWebhooks
    since: str
    workflow_job_run: WorkflowJobRun4
    workflow_run: Optional[WorkflowRun5] = Field(..., title="Deployment Workflow Run")


class Conclusion12(Enum):
    success = "success"
    failure = "failure"
    neutral = "neutral"
    cancelled = "cancelled"
    timed_out = "timed_out"
    action_required = "action_required"
    stale = "stale"
    skipped = "skipped"
    NoneType_None = None


class Status23(Enum):
    queued = "queued"
    in_progress = "in_progress"
    completed = "completed"
    waiting = "waiting"
    pending = "pending"


class CheckRun1(BaseModel):
    completed_at: Optional[AwareDatetime] = None
    conclusion: Conclusion12 = Field(
        ...,
        description="The result of the completed check run. This value will be `null` until the check run has completed.",
    )
    details_url: AnyUrl
    external_id: str
    head_sha: str = Field(..., description="The SHA of the commit that is being checked.")
    html_url: AnyUrl
    id: int = Field(..., description="The id of the check.")
    name: str = Field(..., description="The name of the check run.")
    node_id: str
    started_at: AwareDatetime
    status: Status23 = Field(
        ...,
        description="The current status of the check run. Can be `queued`, `in_progress`, or `completed`.",
    )
    url: AnyUrl


class Creator1(Optional[AnswerChosenBy]):
    pass


class Event5(Enum):
    branch_protection_rule = "branch_protection_rule"
    check_run = "check_run"
    check_suite = "check_suite"
    code_scanning_alert = "code_scanning_alert"
    commit_comment = "commit_comment"
    content_reference = "content_reference"
    create = "create"
    delete = "delete"
    deployment = "deployment"
    deployment_review = "deployment_review"
    deployment_status = "deployment_status"
    deploy_key = "deploy_key"
    discussion = "discussion"
    discussion_comment = "discussion_comment"
    fork = "fork"
    gollum = "gollum"
    issues = "issues"
    issue_comment = "issue_comment"
    label = "label"
    member = "member"
    membership = "membership"
    milestone = "milestone"
    organization = "organization"
    org_block = "org_block"
    page_build = "page_build"
    project = "project"
    project_card = "project_card"
    project_column = "project_column"
    public = "public"
    pull_request = "pull_request"
    pull_request_review = "pull_request_review"
    pull_request_review_comment = "pull_request_review_comment"
    push = "push"
    registry_package = "registry_package"
    release = "release"
    repository = "repository"
    repository_dispatch = "repository_dispatch"
    secret_scanning_alert = "secret_scanning_alert"
    star = "star"
    status = "status"
    team = "team"
    team_add = "team_add"
    watch = "watch"
    workflow_dispatch = "workflow_dispatch"
    workflow_run = "workflow_run"
    merge_queue_entry = "merge_queue_entry"
    workflow_job = "workflow_job"
    pull_request_review_thread = "pull_request_review_thread"
    secret_scanning_alert_location = "secret_scanning_alert_location"
    merge_group = "merge_group"


class Owner17(Optional[AnswerChosenBy]):
    pass


class Permissions23(Permissions22):
    pass


class PerformedViaGithubApp1(BaseModel):
    created_at: Optional[AwareDatetime] = None
    description: Optional[str] = None
    events: Optional[List[Event5]] = Field(
        None, description="The list of events for the GitHub app"
    )
    external_url: Optional[AnyUrl] = None
    html_url: AnyUrl
    id: Optional[int] = Field(..., description="Unique identifier of the GitHub app")
    name: str = Field(..., description="The name of the GitHub app")
    node_id: str
    owner: Optional[Owner17] = Field(..., title="User")
    permissions: Optional[Permissions23] = Field(
        None, description="The set of permissions for the GitHub app"
    )
    slug: Optional[str] = Field(None, description="The slug name of the GitHub app")
    updated_at: Optional[AwareDatetime] = None


class Deployment2(BaseModel):
    created_at: str
    creator: Optional[Creator1] = Field(..., title="User")
    description: Optional[str] = None
    environment: str
    id: int
    node_id: str
    original_environment: str
    payload: Union[str, Dict[str, Any]]
    performed_via_github_app: Optional[PerformedViaGithubApp1] = Field(
        None,
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        title="App",
    )
    production_environment: Optional[bool] = None
    ref: str
    repository_url: AnyUrl
    sha: str
    statuses_url: AnyUrl
    task: str
    transient_environment: Optional[bool] = None
    updated_at: str
    url: AnyUrl


class Creator2(Optional[AnswerChosenBy]):
    pass


class Event6(Enum):
    branch_protection_rule = "branch_protection_rule"
    check_run = "check_run"
    check_suite = "check_suite"
    code_scanning_alert = "code_scanning_alert"
    commit_comment = "commit_comment"
    content_reference = "content_reference"
    create = "create"
    delete = "delete"
    deployment = "deployment"
    deployment_review = "deployment_review"
    deployment_status = "deployment_status"
    deploy_key = "deploy_key"
    discussion = "discussion"
    discussion_comment = "discussion_comment"
    fork = "fork"
    gollum = "gollum"
    issues = "issues"
    issue_comment = "issue_comment"
    label = "label"
    member = "member"
    membership = "membership"
    milestone = "milestone"
    organization = "organization"
    org_block = "org_block"
    page_build = "page_build"
    project = "project"
    project_card = "project_card"
    project_column = "project_column"
    public = "public"
    pull_request = "pull_request"
    pull_request_review = "pull_request_review"
    pull_request_review_comment = "pull_request_review_comment"
    push = "push"
    registry_package = "registry_package"
    release = "release"
    repository = "repository"
    repository_dispatch = "repository_dispatch"
    secret_scanning_alert = "secret_scanning_alert"
    star = "star"
    status = "status"
    team = "team"
    team_add = "team_add"
    watch = "watch"
    workflow_dispatch = "workflow_dispatch"
    workflow_run = "workflow_run"
    pull_request_review_thread = "pull_request_review_thread"
    merge_queue_entry = "merge_queue_entry"
    workflow_job = "workflow_job"
    merge_group = "merge_group"
    secret_scanning_alert_location = "secret_scanning_alert_location"


class Owner18(Optional[AnswerChosenBy]):
    pass


class Permissions24(Permissions22):
    pass


class PerformedViaGithubApp2(BaseModel):
    created_at: Optional[AwareDatetime] = None
    description: Optional[str] = None
    events: Optional[List[Event6]] = Field(
        None, description="The list of events for the GitHub app"
    )
    external_url: Optional[AnyUrl] = None
    html_url: AnyUrl
    id: Optional[int] = Field(..., description="Unique identifier of the GitHub app")
    name: str = Field(..., description="The name of the GitHub app")
    node_id: str
    owner: Optional[Owner18] = Field(..., title="User")
    permissions: Optional[Permissions24] = Field(
        None, description="The set of permissions for the GitHub app"
    )
    slug: Optional[str] = Field(None, description="The slug name of the GitHub app")
    updated_at: Optional[AwareDatetime] = None


class DeploymentStatus1(BaseModel):
    created_at: str
    creator: Optional[Creator2] = Field(..., title="User")
    deployment_url: AnyUrl
    description: str = Field(
        ..., description="The optional human-readable description added to the status."
    )
    environment: str
    environment_url: Optional[AnyUrl] = None
    id: int
    log_url: Optional[AnyUrl] = None
    node_id: str
    performed_via_github_app: Optional[PerformedViaGithubApp2] = Field(
        None,
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        title="App",
    )
    repository_url: AnyUrl
    state: str = Field(
        ..., description="The new state. Can be `pending`, `success`, `failure`, or `error`."
    )
    target_url: str = Field(..., description="The optional link added to the status.")
    updated_at: str
    url: AnyUrl


class Actor5(Optional[AnswerChosenBy]):
    pass


class Conclusion13(Enum):
    success = "success"
    failure = "failure"
    neutral = "neutral"
    cancelled = "cancelled"
    timed_out = "timed_out"
    action_required = "action_required"
    stale = "stale"
    NoneType_None = None
    startup_failure = "startup_failure"


class Owner19(Owner9):
    pass


class HeadRepository4(BaseModel):
    archive_url: Optional[str] = None
    assignees_url: Optional[str] = None
    blobs_url: Optional[str] = None
    branches_url: Optional[str] = None
    collaborators_url: Optional[str] = None
    comments_url: Optional[str] = None
    commits_url: Optional[str] = None
    compare_url: Optional[str] = None
    contents_url: Optional[str] = None
    contributors_url: Optional[str] = None
    deployments_url: Optional[str] = None
    downloads_url: Optional[str] = None
    events_url: Optional[str] = None
    fork: Optional[bool] = None
    forks_url: Optional[str] = None
    full_name: Optional[str] = None
    git_commits_url: Optional[str] = None
    git_refs_url: Optional[str] = None
    git_tags_url: Optional[str] = None
    hooks_url: Optional[str] = None
    html_url: Optional[str] = None
    id: Optional[int] = None
    issue_comment_url: Optional[str] = None
    issue_events_url: Optional[str] = None
    issues_url: Optional[str] = None
    keys_url: Optional[str] = None
    labels_url: Optional[str] = None
    languages_url: Optional[str] = None
    merges_url: Optional[str] = None
    milestones_url: Optional[str] = None
    name: Optional[str] = None
    node_id: Optional[str] = None
    notifications_url: Optional[str] = None
    owner: Optional[Owner19] = None
    private: Optional[bool] = None
    pulls_url: Optional[str] = None
    releases_url: Optional[str] = None
    stargazers_url: Optional[str] = None
    statuses_url: Optional[str] = None
    subscribers_url: Optional[str] = None
    subscription_url: Optional[str] = None
    tags_url: Optional[str] = None
    teams_url: Optional[str] = None
    trees_url: Optional[str] = None
    url: Optional[str] = None


class Base10(Base3):
    pass


class Head10(Base3):
    pass


class PullRequest13(BaseModel):
    base: Base10
    head: Head10
    id: int
    number: int
    url: AnyUrl


class Repository6(HeadRepository4):
    pass


class TriggeringActor4(Optional[AnswerChosenBy]):
    pass


class WorkflowRun6(BaseModel):
    actor: Optional[Actor5] = Field(..., title="User")
    artifacts_url: Optional[str] = None
    cancel_url: Optional[str] = None
    check_suite_id: int
    check_suite_node_id: str
    check_suite_url: Optional[str] = None
    conclusion: Conclusion13
    created_at: AwareDatetime
    display_title: str
    event: str
    head_branch: str
    head_repository: Optional[HeadRepository4] = None
    head_sha: str
    html_url: AnyUrl
    id: int
    jobs_url: Optional[str] = None
    logs_url: Optional[str] = None
    name: str
    node_id: str
    path: str
    pull_requests: List[PullRequest13]
    referenced_workflows: Optional[List[ReferencedWorkflow1]] = None
    repository: Optional[Repository6] = None
    rerun_url: Optional[str] = None
    run_attempt: int
    run_number: int
    run_started_at: AwareDatetime
    status: Status19
    triggering_actor: Optional[TriggeringActor4] = Field(..., title="User")
    updated_at: AwareDatetime
    url: AnyUrl
    workflow_id: int
    workflow_url: Optional[str] = None


class WebhookDeploymentStatusCreated(BaseModel):
    action: Action2
    check_run: Optional[CheckRun1] = None
    deployment: Deployment2 = Field(
        ...,
        description="The [deployment](https://docs.github.com/rest/deployments/deployments#list-deployments).",
        title="Deployment",
    )
    deployment_status: DeploymentStatus1 = Field(
        ...,
        description="The [deployment status](https://docs.github.com/rest/deployments/statuses#list-deployment-statuses).",
    )
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks
    workflow: Optional[Workflow1] = Field(None, title="Workflow")
    workflow_run: Optional[WorkflowRun6] = Field(None, title="Deployment Workflow Run")


class Action38(Enum):
    answered = "answered"


class User5(Optional[AnswerChosenBy]):
    pass


class Answer(BaseModel):
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: str
    child_comment_count: int
    created_at: AwareDatetime
    discussion_id: int
    html_url: str
    id: int
    node_id: str
    reactions: Optional[Reactions] = Field(None, title="Reactions")
    repository_url: str
    updated_at: AwareDatetime
    user: Optional[User5] = Field(..., title="User")


class WebhookDiscussionAnswered(BaseModel):
    action: Action38
    answer: Answer
    discussion: Discussion
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action39(Enum):
    category_changed = "category_changed"


class From2(Category):
    pass


class Category1(BaseModel):
    from_: From2 = Field(..., alias="from")


class Changes1(BaseModel):
    category: Category1


class WebhookDiscussionCategoryChanged(BaseModel):
    action: Action39
    changes: Changes1
    discussion: Discussion
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action40(Enum):
    closed = "closed"


class WebhookDiscussionClosed(BaseModel):
    action: Action40
    discussion: Discussion
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class User6(Optional[AnswerChosenBy]):
    pass


class Comment1(BaseModel):
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: str
    child_comment_count: int
    created_at: str
    discussion_id: int
    html_url: str
    id: int
    node_id: str
    parent_id: Optional[int] = None
    reactions: Reactions = Field(..., title="Reactions")
    repository_url: str
    updated_at: str
    user: Optional[User6] = Field(..., title="User")


class WebhookDiscussionCommentCreated(BaseModel):
    action: Action2
    comment: Comment1
    discussion: Discussion
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class User7(Optional[AnswerChosenBy]):
    pass


class Comment2(BaseModel):
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: str
    child_comment_count: int
    created_at: str
    discussion_id: int
    html_url: str
    id: int
    node_id: str
    parent_id: Optional[int] = None
    reactions: Reactions = Field(..., title="Reactions")
    repository_url: str
    updated_at: str
    user: Optional[User7] = Field(..., title="User")


class WebhookDiscussionCommentDeleted(BaseModel):
    action: Action3
    comment: Comment2
    discussion: Discussion
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Body(BaseModel):
    from_: str = Field(..., alias="from")


class Changes2(BaseModel):
    body: Body


class User8(Optional[AnswerChosenBy]):
    pass


class Comment3(BaseModel):
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: str
    child_comment_count: int
    created_at: str
    discussion_id: int
    html_url: str
    id: int
    node_id: str
    parent_id: Optional[int] = None
    reactions: Reactions = Field(..., title="Reactions")
    repository_url: str
    updated_at: str
    user: Optional[User8] = Field(..., title="User")


class WebhookDiscussionCommentEdited(BaseModel):
    action: Action4
    changes: Changes2
    comment: Comment3
    discussion: Discussion
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class AnswerChosenBy1(Optional[AnswerChosenBy]):
    pass


class Category2(BaseModel):
    created_at: Optional[str] = None
    description: Optional[str] = None
    emoji: Optional[str] = None
    id: Optional[int] = None
    is_answerable: Optional[bool] = None
    name: Optional[str] = None
    node_id: Optional[str] = None
    repository_id: Optional[int] = None
    slug: Optional[str] = None
    updated_at: Optional[str] = None


class Reactions6(BaseModel):
    field_1: Optional[int] = Field(None, alias="+1")
    field_1_1: Optional[int] = Field(None, alias="-1")
    confused: Optional[int] = None
    eyes: Optional[int] = None
    heart: Optional[int] = None
    hooray: Optional[int] = None
    laugh: Optional[int] = None
    rocket: Optional[int] = None
    total_count: Optional[int] = None
    url: Optional[str] = None


class State32(Enum):
    open = "open"
    converting = "converting"
    transferring = "transferring"


class User9(Owner9):
    pass


class Locked(Enum):
    boolean_False = False


class Discussion1(BaseModel):
    active_lock_reason: Optional[str] = None
    answer_chosen_at: Optional[str] = None
    answer_chosen_by: Optional[AnswerChosenBy1] = Field(..., title="User")
    answer_html_url: Optional[str] = None
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: Optional[str] = None
    category: Category2
    comments: int
    created_at: AwareDatetime
    html_url: str
    id: int
    locked: bool
    node_id: str
    number: int
    reactions: Optional[Reactions6] = Field(None, title="Reactions")
    repository_url: str
    state: State32
    timeline_url: Optional[str] = None
    title: str
    updated_at: AwareDatetime
    user: User9 = Field(..., title="User")


class WebhookDiscussionCreated(BaseModel):
    action: Action2
    discussion: Discussion1
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class WebhookDiscussionDeleted(BaseModel):
    action: Action3
    discussion: Discussion
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Title(Body):
    pass


class Changes3(BaseModel):
    body: Optional[Body] = None
    title: Optional[Title] = None


class WebhookDiscussionEdited(BaseModel):
    action: Action4
    changes: Optional[Changes3] = None
    discussion: Discussion
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action47(Enum):
    labeled = "labeled"


class Label6(BaseModel):
    color: str = Field(
        ..., description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool
    description: Optional[str] = None
    id: int
    name: str = Field(..., description="The name of the label.")
    node_id: str
    url: AnyUrl = Field(..., description="URL for the label")


class WebhookDiscussionLabeled(BaseModel):
    action: Action47
    discussion: Discussion
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    label: Label6 = Field(..., title="Label")
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action48(Enum):
    locked = "locked"


class WebhookDiscussionLocked(BaseModel):
    action: Action48
    discussion: Discussion
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action49(Enum):
    pinned = "pinned"


class WebhookDiscussionPinned(BaseModel):
    action: Action49
    discussion: Discussion
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class WebhookDiscussionReopened(BaseModel):
    action: Action16
    discussion: Discussion
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action51(Enum):
    transferred = "transferred"


class Changes4(BaseModel):
    new_discussion: Discussion
    new_repository: RepositoryWebhooks


class WebhookDiscussionTransferred(BaseModel):
    action: Action51
    changes: Changes4
    discussion: Discussion
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action52(Enum):
    unanswered = "unanswered"


class Reactions7(Reactions):
    pass


class User10(Optional[AnswerChosenBy]):
    pass


class OldAnswer(BaseModel):
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: str
    child_comment_count: int
    created_at: AwareDatetime
    discussion_id: int
    html_url: str
    id: int
    node_id: str
    reactions: Optional[Reactions7] = Field(None, title="Reactions")
    repository_url: str
    updated_at: AwareDatetime
    user: Optional[User10] = Field(..., title="User")


class WebhookDiscussionUnanswered(BaseModel):
    action: Action52
    discussion: Discussion
    old_answer: OldAnswer
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: Optional[SimpleUserWebhooks] = None


class Action53(Enum):
    unlabeled = "unlabeled"


class WebhookDiscussionUnlabeled(BaseModel):
    action: Action53
    discussion: Discussion
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    label: Label6 = Field(..., title="Label")
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action54(Enum):
    unlocked = "unlocked"


class WebhookDiscussionUnlocked(BaseModel):
    action: Action54
    discussion: Discussion
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action55(Enum):
    unpinned = "unpinned"


class WebhookDiscussionUnpinned(BaseModel):
    action: Action55
    discussion: Discussion
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class License3(BaseModel):
    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Optional[AnyUrl] = None


class Permissions25(BaseModel):
    admin: bool
    maintain: Optional[bool] = None
    pull: bool
    push: bool
    triage: Optional[bool] = None


class Visibility6(Enum):
    public = "public"
    private = "private"
    internal = "internal"


class Fork1(Enum):
    boolean_True = True


class Forkee(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    custom_properties: Optional[Dict[str, Any]] = Field(
        None,
        description="The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.",
    )
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Owner19 = Field(..., title="User")
    permissions: Optional[Permissions25] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class WebhookFork(BaseModel):
    enterprise: Optional[EnterpriseWebhooks] = None
    forkee: Forkee = Field(
        ...,
        description="The created [`repository`](https://docs.github.com/rest/repos/repos#get-a-repository) resource.",
    )
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action56(Enum):
    revoked = "revoked"


class WebhookGithubAppAuthorizationRevoked(BaseModel):
    action: Action56
    sender: SimpleUserWebhooks


class Action57(Enum):
    created = "created"
    edited = "edited"


class Page2(BaseModel):
    action: Action57 = Field(
        ..., description="The action that was performed on the page. Can be `created` or `edited`."
    )
    html_url: AnyUrl = Field(..., description="Points to the HTML wiki page.")
    page_name: str = Field(..., description="The name of the page.")
    sha: str = Field(..., description="The latest commit SHA of the page.")
    summary: Optional[str] = None
    title: str = Field(..., description="The current page title.")


class WebhookGollum(BaseModel):
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    pages: List[Page2] = Field(..., description="The pages that were updated.")
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Repository7(Repository1):
    pass


class Requester(Optional[AnswerChosenBy]):
    pass


class WebhookInstallationCreated(BaseModel):
    action: Action2
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Installation
    organization: Optional[OrganizationSimpleWebhooks] = None
    repositories: Optional[List[Repository7]] = Field(
        None, description="An array of repository objects that the installation can access."
    )
    repository: Optional[RepositoryWebhooks] = None
    requester: Optional[Requester] = Field(None, title="User")
    sender: SimpleUserWebhooks


class WebhookInstallationDeleted(BaseModel):
    action: Action3
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Installation
    organization: Optional[OrganizationSimpleWebhooks] = None
    repositories: Optional[List[Repository7]] = Field(
        None, description="An array of repository objects that the installation can access."
    )
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks


class Action60(Enum):
    new_permissions_accepted = "new_permissions_accepted"


class WebhookInstallationNewPermissionsAccepted(BaseModel):
    action: Action60
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Installation
    organization: Optional[OrganizationSimpleWebhooks] = None
    repositories: Optional[List[Repository7]] = Field(
        None, description="An array of repository objects that the installation can access."
    )
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks


class Action61(Enum):
    added = "added"


class RepositoriesAddedItem(Repository1):
    pass


class RepositoriesRemovedItem(BaseModel):
    full_name: Optional[str] = None
    id: Optional[int] = Field(None, description="Unique identifier of the repository")
    name: Optional[str] = Field(None, description="The name of the repository.")
    node_id: Optional[str] = None
    private: Optional[bool] = Field(
        None, description="Whether the repository is private or public."
    )


class Requester1(Optional[AnswerChosenBy]):
    pass


class WebhookInstallationRepositoriesAdded(BaseModel):
    action: Action61
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Installation
    organization: Optional[OrganizationSimpleWebhooks] = None
    repositories_added: List[RepositoriesAddedItem] = Field(
        ..., description="An array of repository objects, which were added to the installation."
    )
    repositories_removed: List[RepositoriesRemovedItem] = Field(
        ..., description="An array of repository objects, which were removed from the installation."
    )
    repository: Optional[RepositoryWebhooks] = None
    repository_selection: RepositorySelection = Field(
        ...,
        description="Describe whether all repositories have been selected or there's a selection involved",
    )
    requester: Optional[Requester1] = Field(..., title="User")
    sender: SimpleUserWebhooks


class Action62(Enum):
    removed = "removed"


class RepositoriesRemovedItem1(Repository1):
    pass


class Requester2(Optional[AnswerChosenBy]):
    pass


class WebhookInstallationRepositoriesRemoved(BaseModel):
    action: Action62
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Installation
    organization: Optional[OrganizationSimpleWebhooks] = None
    repositories_added: List[RepositoriesAddedItem] = Field(
        ..., description="An array of repository objects, which were added to the installation."
    )
    repositories_removed: List[RepositoriesRemovedItem1] = Field(
        ..., description="An array of repository objects, which were removed from the installation."
    )
    repository: Optional[RepositoryWebhooks] = None
    repository_selection: RepositorySelection = Field(
        ...,
        description="Describe whether all repositories have been selected or there's a selection involved",
    )
    requester: Optional[Requester2] = Field(..., title="User")
    sender: SimpleUserWebhooks


class Action63(Enum):
    suspend = "suspend"


class WebhookInstallationSuspend(BaseModel):
    action: Action63
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Installation
    organization: Optional[OrganizationSimpleWebhooks] = None
    repositories: Optional[List[Repository7]] = Field(
        None, description="An array of repository objects that the installation can access."
    )
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks


class Account(BaseModel):
    archived_at: Optional[str] = None
    avatar_url: str
    created_at: Optional[str] = None
    events_url: Optional[str] = None
    followers: Optional[int] = None
    followers_url: Optional[str] = None
    following: Optional[int] = None
    following_url: Optional[str] = None
    gists_url: Optional[str] = None
    gravatar_id: Optional[str] = None
    has_organization_projects: Optional[bool] = None
    has_repository_projects: Optional[bool] = None
    hooks_url: Optional[str] = None
    html_url: str
    id: int
    is_verified: Optional[bool] = None
    issues_url: Optional[str] = None
    login: Optional[str] = None
    members_url: Optional[str] = None
    name: Optional[str] = None
    node_id: str
    organizations_url: Optional[str] = None
    public_gists: Optional[int] = None
    public_members_url: Optional[str] = None
    public_repos: Optional[int] = None
    received_events_url: Optional[str] = None
    repos_url: Optional[str] = None
    site_admin: Optional[bool] = None
    slug: Optional[str] = None
    starred_url: Optional[str] = None
    subscriptions_url: Optional[str] = None
    type: Optional[str] = None
    updated_at: Optional[str] = None
    url: Optional[str] = None


class Action64(Enum):
    renamed = "renamed"


class Login(Body):
    pass


class Slug(Body):
    pass


class Changes5(BaseModel):
    login: Optional[Login] = None
    slug: Optional[Slug] = None


class WebhookInstallationTargetRenamed(BaseModel):
    account: Account
    action: Action64
    changes: Changes5
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: SimpleInstallation
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: Optional[RepositoryWebhooks] = None
    sender: Optional[SimpleUserWebhooks] = None
    target_type: str


class Action65(Enum):
    unsuspend = "unsuspend"


class WebhookInstallationUnsuspend(BaseModel):
    action: Action65
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Installation
    organization: Optional[OrganizationSimpleWebhooks] = None
    repositories: Optional[List[Repository7]] = Field(
        None, description="An array of repository objects that the installation can access."
    )
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks


class User11(Optional[AnswerChosenBy]):
    pass


class Comment4(BaseModel):
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: str = Field(..., description="Contents of the issue comment")
    created_at: AwareDatetime
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the issue comment")
    issue_url: AnyUrl
    node_id: str
    performed_via_github_app: Optional[Integration] = None
    reactions: Reactions7 = Field(..., title="Reactions")
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the issue comment")
    user: Optional[User11] = Field(..., title="User")


class ActiveLockReason(Enum):
    resolved = "resolved"
    off_topic = "off-topic"
    too_heated = "too heated"
    spam = "spam"
    NoneType_None = None


class Type73(Enum):
    Bot = "Bot"
    User = "User"
    Organization = "Organization"
    Mannequin = "Mannequin"


class Assignee(BaseModel):
    avatar_url: Optional[AnyUrl] = None
    deleted: Optional[bool] = None
    email: Optional[str] = None
    events_url: Optional[str] = None
    followers_url: Optional[AnyUrl] = None
    following_url: Optional[str] = None
    gists_url: Optional[str] = None
    gravatar_id: Optional[str] = None
    html_url: Optional[AnyUrl] = None
    id: int
    login: str
    name: Optional[str] = None
    node_id: Optional[str] = None
    organizations_url: Optional[AnyUrl] = None
    received_events_url: Optional[AnyUrl] = None
    repos_url: Optional[AnyUrl] = None
    site_admin: Optional[bool] = None
    starred_url: Optional[str] = None
    subscriptions_url: Optional[AnyUrl] = None
    type: Optional[Type73] = None
    url: Optional[AnyUrl] = None


class Assignee1(Optional[Assignee]):
    pass


class Creator3(Optional[Assignee]):
    pass


class Milestone3(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator3] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class Event7(Enum):
    branch_protection_rule = "branch_protection_rule"
    check_run = "check_run"
    check_suite = "check_suite"
    code_scanning_alert = "code_scanning_alert"
    commit_comment = "commit_comment"
    content_reference = "content_reference"
    create = "create"
    delete = "delete"
    deployment = "deployment"
    deployment_review = "deployment_review"
    deployment_status = "deployment_status"
    deploy_key = "deploy_key"
    discussion = "discussion"
    discussion_comment = "discussion_comment"
    fork = "fork"
    gollum = "gollum"
    issues = "issues"
    issue_comment = "issue_comment"
    label = "label"
    member = "member"
    membership = "membership"
    milestone = "milestone"
    organization = "organization"
    org_block = "org_block"
    page_build = "page_build"
    project = "project"
    project_card = "project_card"
    project_column = "project_column"
    public = "public"
    pull_request = "pull_request"
    pull_request_review = "pull_request_review"
    pull_request_review_comment = "pull_request_review_comment"
    push = "push"
    registry_package = "registry_package"
    release = "release"
    repository = "repository"
    repository_dispatch = "repository_dispatch"
    secret_scanning_alert = "secret_scanning_alert"
    star = "star"
    status = "status"
    team = "team"
    team_add = "team_add"
    watch = "watch"
    workflow_dispatch = "workflow_dispatch"
    workflow_run = "workflow_run"
    reminder = "reminder"
    pull_request_review_thread = "pull_request_review_thread"


class Owner22(Optional[AnswerChosenBy]):
    pass


class Permissions26(Permissions19):
    pass


class PerformedViaGithubApp3(BaseModel):
    created_at: Optional[AwareDatetime] = None
    description: Optional[str] = None
    events: Optional[List[Event7]] = Field(
        None, description="The list of events for the GitHub app"
    )
    external_url: Optional[AnyUrl] = None
    html_url: AnyUrl
    id: Optional[int] = Field(..., description="Unique identifier of the GitHub app")
    name: str = Field(..., description="The name of the GitHub app")
    node_id: str
    owner: Optional[Owner22] = Field(..., title="User")
    permissions: Optional[Permissions26] = Field(
        None, description="The set of permissions for the GitHub app"
    )
    slug: Optional[str] = Field(None, description="The slug name of the GitHub app")
    updated_at: Optional[AwareDatetime] = None


class PullRequest14(BaseModel):
    diff_url: Optional[AnyUrl] = None
    html_url: Optional[AnyUrl] = None
    merged_at: Optional[AwareDatetime] = None
    patch_url: Optional[AnyUrl] = None
    url: Optional[AnyUrl] = None


class Reactions9(Reactions6):
    pass


class User12(Owner9):
    pass


class Issue1(BaseModel):
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee] = Field(None, title="User")
    assignees: List[Optional[Assignee1]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: Optional[str] = Field(..., description="Contents of the issue")
    closed_at: Optional[AwareDatetime] = None
    comments: int
    comments_url: AnyUrl
    created_at: AwareDatetime
    draft: Optional[bool] = None
    events_url: AnyUrl
    html_url: AnyUrl
    id: int
    labels: Optional[List[Label6]] = None
    labels_url: str
    locked: Optional[bool] = None
    milestone: Optional[Milestone3] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    performed_via_github_app: Optional[PerformedViaGithubApp3] = Field(
        None,
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        title="App",
    )
    pull_request: Optional[PullRequest14] = None
    reactions: Reactions9 = Field(..., title="Reactions")
    repository_url: AnyUrl
    state: Optional[State1] = Field(
        None, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Optional[str] = None
    timeline_url: Optional[AnyUrl] = None
    title: str = Field(..., description="Title of the issue")
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the issue")
    user: User12 = Field(..., title="User")


class WebhookIssueCommentCreated(BaseModel):
    action: Action2
    comment: Comment4 = Field(
        ...,
        description="The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself.",
        title="issue comment",
    )
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    issue: Issue1 = Field(
        ...,
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment belongs to.",
    )
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Reactions10(Reactions):
    pass


class User13(Optional[Assignee]):
    pass


class Comment5(BaseModel):
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: str = Field(..., description="Contents of the issue comment")
    created_at: AwareDatetime
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the issue comment")
    issue_url: AnyUrl
    node_id: str
    performed_via_github_app: Optional[Integration] = None
    reactions: Reactions10 = Field(..., title="Reactions")
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the issue comment")
    user: Optional[User13] = Field(..., title="User")


class Assignee2(Optional[Assignee]):
    pass


class Assignee3(Optional[Assignee]):
    pass


class Creator4(Optional[Assignee]):
    pass


class Milestone4(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator4] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class Event8(Enum):
    branch_protection_rule = "branch_protection_rule"
    check_run = "check_run"
    check_suite = "check_suite"
    code_scanning_alert = "code_scanning_alert"
    commit_comment = "commit_comment"
    content_reference = "content_reference"
    create = "create"
    delete = "delete"
    deployment = "deployment"
    deployment_review = "deployment_review"
    deployment_status = "deployment_status"
    deploy_key = "deploy_key"
    discussion = "discussion"
    discussion_comment = "discussion_comment"
    fork = "fork"
    gollum = "gollum"
    issues = "issues"
    issue_comment = "issue_comment"
    label = "label"
    member = "member"
    membership = "membership"
    milestone = "milestone"
    organization = "organization"
    org_block = "org_block"
    page_build = "page_build"
    project = "project"
    project_card = "project_card"
    project_column = "project_column"
    public = "public"
    pull_request = "pull_request"
    pull_request_review = "pull_request_review"
    pull_request_review_comment = "pull_request_review_comment"
    push = "push"
    registry_package = "registry_package"
    release = "release"
    repository = "repository"
    repository_dispatch = "repository_dispatch"
    secret_scanning_alert = "secret_scanning_alert"
    star = "star"
    status = "status"
    team = "team"
    team_add = "team_add"
    watch = "watch"
    workflow_dispatch = "workflow_dispatch"
    workflow_run = "workflow_run"


class Owner23(Optional[AnswerChosenBy]):
    pass


class Permissions27(Permissions22):
    pass


class PerformedViaGithubApp4(BaseModel):
    created_at: Optional[AwareDatetime] = None
    description: Optional[str] = None
    events: Optional[List[Event8]] = Field(
        None, description="The list of events for the GitHub app"
    )
    external_url: Optional[AnyUrl] = None
    html_url: AnyUrl
    id: Optional[int] = Field(..., description="Unique identifier of the GitHub app")
    name: str = Field(..., description="The name of the GitHub app")
    node_id: str
    owner: Optional[Owner23] = Field(..., title="User")
    permissions: Optional[Permissions27] = Field(
        None, description="The set of permissions for the GitHub app"
    )
    slug: Optional[str] = Field(None, description="The slug name of the GitHub app")
    updated_at: Optional[AwareDatetime] = None


class Reactions11(Reactions6):
    pass


class User14(Owner9):
    pass


class Issue2(BaseModel):
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee2] = Field(None, title="User")
    assignees: List[Optional[Assignee3]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: Optional[str] = Field(..., description="Contents of the issue")
    closed_at: Optional[AwareDatetime] = None
    comments: int
    comments_url: AnyUrl
    created_at: AwareDatetime
    draft: Optional[bool] = None
    events_url: AnyUrl
    html_url: AnyUrl
    id: int
    labels: Optional[List[Label6]] = None
    labels_url: str
    locked: Optional[bool] = None
    milestone: Optional[Milestone4] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    performed_via_github_app: Optional[PerformedViaGithubApp4] = Field(
        None,
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        title="App",
    )
    pull_request: Optional[PullRequest14] = None
    reactions: Reactions11 = Field(..., title="Reactions")
    repository_url: AnyUrl
    state: Optional[State1] = Field(
        None, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Optional[str] = None
    timeline_url: Optional[AnyUrl] = None
    title: str = Field(..., description="Title of the issue")
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the issue")
    user: User14 = Field(..., title="User")


class WebhookIssueCommentDeleted(BaseModel):
    action: Action3
    comment: Comment5 = Field(
        ...,
        description="The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself.",
        title="issue comment",
    )
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    issue: Issue2 = Field(
        ...,
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment belongs to.",
    )
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Body2(BaseModel):
    from_: str = Field(..., alias="from", description="The previous version of the body.")


class Changes6(BaseModel):
    body: Optional[Body2] = None


class Reactions12(Reactions):
    pass


class User15(Optional[Assignee]):
    pass


class Comment6(BaseModel):
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: str = Field(..., description="Contents of the issue comment")
    created_at: AwareDatetime
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the issue comment")
    issue_url: AnyUrl
    node_id: str
    performed_via_github_app: Optional[Integration] = None
    reactions: Reactions12 = Field(..., title="Reactions")
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the issue comment")
    user: Optional[User15] = Field(..., title="User")


class Assignee4(Optional[Assignee]):
    pass


class Assignee5(Optional[Assignee]):
    pass


class Creator5(Optional[Assignee]):
    pass


class Milestone5(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator5] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class Owner24(Optional[AnswerChosenBy]):
    pass


class Permissions28(BaseModel):
    actions: Optional[Actions] = None
    administration: Optional[Actions] = None
    checks: Optional[Actions] = None
    content_references: Optional[Actions] = None
    contents: Optional[Actions] = None
    deployments: Optional[Actions] = None
    discussions: Optional[Actions] = None
    emails: Optional[Actions] = None
    environments: Optional[Actions] = None
    issues: Optional[Actions] = None
    keys: Optional[Actions] = None
    members: Optional[Actions] = None
    metadata: Optional[Actions] = None
    organization_administration: Optional[Actions] = None
    organization_hooks: Optional[Actions] = None
    organization_packages: Optional[Actions] = None
    organization_plan: Optional[Actions] = None
    organization_projects: Optional[RepositoryProjects] = None
    organization_secrets: Optional[Actions] = None
    organization_self_hosted_runners: Optional[Actions] = None
    organization_user_blocking: Optional[Actions] = None
    packages: Optional[Actions] = None
    pages: Optional[Actions] = None
    pull_requests: Optional[Actions] = None
    repository_hooks: Optional[Actions] = None
    repository_projects: Optional[Actions] = None
    secret_scanning_alerts: Optional[Actions] = None
    secrets: Optional[Actions] = None
    security_events: Optional[Actions] = None
    security_scanning_alert: Optional[Actions] = None
    single_file: Optional[Actions] = None
    statuses: Optional[Actions] = None
    team_discussions: Optional[Actions] = None
    vulnerability_alerts: Optional[Actions] = None
    workflows: Optional[Actions] = None


class PerformedViaGithubApp5(BaseModel):
    created_at: Optional[AwareDatetime] = None
    description: Optional[str] = None
    events: Optional[List[Event7]] = Field(
        None, description="The list of events for the GitHub app"
    )
    external_url: Optional[AnyUrl] = None
    html_url: AnyUrl
    id: Optional[int] = Field(..., description="Unique identifier of the GitHub app")
    name: str = Field(..., description="The name of the GitHub app")
    node_id: str
    owner: Optional[Owner24] = Field(..., title="User")
    permissions: Optional[Permissions28] = Field(
        None, description="The set of permissions for the GitHub app"
    )
    slug: Optional[str] = Field(None, description="The slug name of the GitHub app")
    updated_at: Optional[AwareDatetime] = None


class Reactions13(Reactions6):
    pass


class User16(Owner9):
    pass


class Issue3(BaseModel):
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee4] = Field(None, title="User")
    assignees: List[Optional[Assignee5]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: Optional[str] = Field(..., description="Contents of the issue")
    closed_at: Optional[AwareDatetime] = None
    comments: int
    comments_url: AnyUrl
    created_at: AwareDatetime
    draft: Optional[bool] = None
    events_url: AnyUrl
    html_url: AnyUrl
    id: int
    labels: Optional[List[Label6]] = None
    labels_url: str
    locked: Optional[bool] = None
    milestone: Optional[Milestone5] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    performed_via_github_app: Optional[PerformedViaGithubApp5] = Field(
        None,
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        title="App",
    )
    pull_request: Optional[PullRequest14] = None
    reactions: Reactions13 = Field(..., title="Reactions")
    repository_url: AnyUrl
    state: Optional[State1] = Field(
        None, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Optional[str] = None
    timeline_url: Optional[AnyUrl] = None
    title: str = Field(..., description="Title of the issue")
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the issue")
    user: User16 = Field(..., title="User")


class WebhookIssueCommentEdited(BaseModel):
    action: Action4
    changes: Changes6 = Field(..., description="The changes to the comment.")
    comment: Comment6 = Field(
        ...,
        description="The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself.",
        title="issue comment",
    )
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    issue: Issue3 = Field(
        ...,
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment belongs to.",
    )
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action69(Enum):
    assigned = "assigned"


class Assignee6(Optional[AnswerChosenBy]):
    pass


class Assignee7(Optional[Assignee]):
    pass


class Assignee8(Optional[Assignee]):
    pass


class Creator6(Optional[Assignee]):
    pass


class Milestone6(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator6] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class Owner25(Optional[AnswerChosenBy]):
    pass


class Permissions29(Permissions28):
    pass


class PerformedViaGithubApp6(BaseModel):
    created_at: Optional[AwareDatetime] = None
    description: Optional[str] = None
    events: Optional[List[Event7]] = Field(
        None, description="The list of events for the GitHub app"
    )
    external_url: Optional[AnyUrl] = None
    html_url: AnyUrl
    id: Optional[int] = Field(..., description="Unique identifier of the GitHub app")
    name: str = Field(..., description="The name of the GitHub app")
    node_id: str
    owner: Optional[Owner25] = Field(..., title="User")
    permissions: Optional[Permissions29] = Field(
        None, description="The set of permissions for the GitHub app"
    )
    slug: Optional[str] = Field(None, description="The slug name of the GitHub app")
    updated_at: Optional[AwareDatetime] = None


class Reactions14(Reactions):
    pass


class User17(Optional[Assignee]):
    pass


class Issue4(BaseModel):
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee7] = Field(None, title="User")
    assignees: List[Optional[Assignee8]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: Optional[str] = Field(..., description="Contents of the issue")
    closed_at: Optional[AwareDatetime] = None
    comments: int
    comments_url: AnyUrl
    created_at: AwareDatetime
    draft: Optional[bool] = None
    events_url: AnyUrl
    html_url: AnyUrl
    id: int
    labels: Optional[List[Label6]] = None
    labels_url: str
    locked: Optional[bool] = None
    milestone: Optional[Milestone6] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    performed_via_github_app: Optional[PerformedViaGithubApp6] = Field(
        None,
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        title="App",
    )
    pull_request: Optional[PullRequest14] = None
    reactions: Reactions14 = Field(..., title="Reactions")
    repository_url: AnyUrl
    state: Optional[State1] = Field(
        None, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Optional[str] = None
    timeline_url: Optional[AnyUrl] = None
    title: str = Field(..., description="Title of the issue")
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the issue")
    user: Optional[User17] = Field(..., title="User")


class WebhookIssuesAssigned(BaseModel):
    action: Action69 = Field(..., description="The action that was performed.")
    assignee: Optional[Assignee6] = Field(None, title="User")
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    issue: Issue4 = Field(
        ...,
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.",
        title="Issue",
    )
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Assignee9(Optional[Assignee]):
    pass


class Assignee10(Optional[Assignee]):
    pass


class Creator7(Optional[Assignee]):
    pass


class Milestone7(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator7] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class Event11(Enum):
    branch_protection_rule = "branch_protection_rule"
    check_run = "check_run"
    check_suite = "check_suite"
    code_scanning_alert = "code_scanning_alert"
    commit_comment = "commit_comment"
    content_reference = "content_reference"
    create = "create"
    delete = "delete"
    deployment = "deployment"
    deployment_review = "deployment_review"
    deployment_status = "deployment_status"
    deploy_key = "deploy_key"
    discussion = "discussion"
    discussion_comment = "discussion_comment"
    fork = "fork"
    gollum = "gollum"
    issues = "issues"
    issue_comment = "issue_comment"
    label = "label"
    member = "member"
    membership = "membership"
    milestone = "milestone"
    organization = "organization"
    org_block = "org_block"
    page_build = "page_build"
    project = "project"
    project_card = "project_card"
    project_column = "project_column"
    public = "public"
    pull_request = "pull_request"
    pull_request_review = "pull_request_review"
    pull_request_review_comment = "pull_request_review_comment"
    push = "push"
    registry_package = "registry_package"
    release = "release"
    repository = "repository"
    repository_dispatch = "repository_dispatch"
    secret_scanning_alert = "secret_scanning_alert"
    star = "star"
    status = "status"
    team = "team"
    team_add = "team_add"
    watch = "watch"
    workflow_dispatch = "workflow_dispatch"
    workflow_run = "workflow_run"
    security_and_analysis = "security_and_analysis"
    reminder = "reminder"
    pull_request_review_thread = "pull_request_review_thread"


class Owner26(Optional[AnswerChosenBy]):
    pass


class Permissions30(Permissions28):
    pass


class PerformedViaGithubApp7(BaseModel):
    created_at: Optional[AwareDatetime] = None
    description: Optional[str] = None
    events: Optional[List[Event11]] = Field(
        None, description="The list of events for the GitHub app"
    )
    external_url: Optional[AnyUrl] = None
    html_url: AnyUrl
    id: Optional[int] = Field(..., description="Unique identifier of the GitHub app")
    name: str = Field(..., description="The name of the GitHub app")
    node_id: str
    owner: Optional[Owner26] = Field(..., title="User")
    permissions: Optional[Permissions30] = Field(
        None, description="The set of permissions for the GitHub app"
    )
    slug: Optional[str] = Field(None, description="The slug name of the GitHub app")
    updated_at: Optional[AwareDatetime] = None


class Reactions15(Reactions6):
    pass


class State42(Enum):
    closed = "closed"
    open = "open"


class User18(Owner9):
    pass


class Issue5(BaseModel):
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee9] = Field(None, title="User")
    assignees: List[Optional[Assignee10]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: Optional[str] = Field(..., description="Contents of the issue")
    closed_at: Optional[AwareDatetime] = None
    comments: int
    comments_url: AnyUrl
    created_at: AwareDatetime
    draft: Optional[bool] = None
    events_url: AnyUrl
    html_url: AnyUrl
    id: int
    labels: Optional[List[Label6]] = None
    labels_url: str
    locked: Optional[bool] = None
    milestone: Optional[Milestone7] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    performed_via_github_app: Optional[PerformedViaGithubApp7] = Field(
        None,
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        title="App",
    )
    pull_request: Optional[PullRequest14] = None
    reactions: Reactions15 = Field(..., title="Reactions")
    repository_url: AnyUrl
    state: Optional[State42] = Field(
        None, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Optional[str] = None
    timeline_url: Optional[AnyUrl] = None
    title: str = Field(..., description="Title of the issue")
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the issue")
    user: User18 = Field(..., title="User")


class WebhookIssuesClosed(BaseModel):
    action: Action40 = Field(..., description="The action that was performed.")
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    issue: Issue5 = Field(
        ...,
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.",
    )
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Assignee11(Optional[AnswerChosenBy]):
    pass


class Assignee12(Optional[AnswerChosenBy]):
    pass


class Creator8(Optional[AnswerChosenBy]):
    pass


class Milestone8(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator8] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class Event12(Enum):
    branch_protection_rule = "branch_protection_rule"
    check_run = "check_run"
    check_suite = "check_suite"
    code_scanning_alert = "code_scanning_alert"
    commit_comment = "commit_comment"
    content_reference = "content_reference"
    create = "create"
    delete = "delete"
    deployment = "deployment"
    deployment_review = "deployment_review"
    deployment_status = "deployment_status"
    deploy_key = "deploy_key"
    discussion = "discussion"
    discussion_comment = "discussion_comment"
    fork = "fork"
    gollum = "gollum"
    issues = "issues"
    issue_comment = "issue_comment"
    label = "label"
    member = "member"
    membership = "membership"
    milestone = "milestone"
    organization = "organization"
    org_block = "org_block"
    page_build = "page_build"
    project = "project"
    project_card = "project_card"
    project_column = "project_column"
    public = "public"
    pull_request = "pull_request"
    pull_request_review = "pull_request_review"
    pull_request_review_comment = "pull_request_review_comment"
    push = "push"
    registry_package = "registry_package"
    release = "release"
    repository = "repository"
    repository_dispatch = "repository_dispatch"
    secret_scanning_alert = "secret_scanning_alert"
    star = "star"
    status = "status"
    team = "team"
    team_add = "team_add"
    watch = "watch"
    workflow_dispatch = "workflow_dispatch"
    workflow_run = "workflow_run"
    reminder = "reminder"


class Owner27(Optional[AnswerChosenBy]):
    pass


class Permissions31(Permissions22):
    pass


class PerformedViaGithubApp8(BaseModel):
    created_at: Optional[AwareDatetime] = None
    description: Optional[str] = None
    events: Optional[List[Event12]] = Field(
        None, description="The list of events for the GitHub app"
    )
    external_url: Optional[AnyUrl] = None
    html_url: AnyUrl
    id: Optional[int] = Field(..., description="Unique identifier of the GitHub app")
    name: str = Field(..., description="The name of the GitHub app")
    node_id: str
    owner: Optional[Owner27] = Field(..., title="User")
    permissions: Optional[Permissions31] = Field(
        None, description="The set of permissions for the GitHub app"
    )
    slug: Optional[str] = Field(None, description="The slug name of the GitHub app")
    updated_at: Optional[AwareDatetime] = None


class Reactions16(Reactions):
    pass


class User19(Optional[AnswerChosenBy]):
    pass


class Issue6(BaseModel):
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee11] = Field(None, title="User")
    assignees: List[Optional[Assignee12]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: Optional[str] = Field(..., description="Contents of the issue")
    closed_at: Optional[AwareDatetime] = None
    comments: int
    comments_url: AnyUrl
    created_at: AwareDatetime
    draft: Optional[bool] = None
    events_url: AnyUrl
    html_url: AnyUrl
    id: int
    labels: Optional[List[Label6]] = None
    labels_url: str
    locked: Optional[bool] = None
    milestone: Optional[Milestone8] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    performed_via_github_app: Optional[PerformedViaGithubApp8] = Field(
        None,
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        title="App",
    )
    pull_request: Optional[PullRequest14] = None
    reactions: Reactions16 = Field(..., title="Reactions")
    repository_url: AnyUrl
    state: Optional[State1] = Field(
        None, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Optional[str] = None
    timeline_url: Optional[AnyUrl] = None
    title: str = Field(..., description="Title of the issue")
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the issue")
    user: Optional[User19] = Field(..., title="User")


class WebhookIssuesDeleted(BaseModel):
    action: Action3
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    issue: Issue6 = Field(
        ...,
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.",
        title="Issue",
    )
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action72(Enum):
    demilestoned = "demilestoned"


class Assignee13(Optional[Assignee]):
    pass


class Assignee14(Optional[Assignee]):
    pass


class Creator9(Optional[Assignee]):
    pass


class Milestone9(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator9] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class Owner28(Optional[AnswerChosenBy]):
    pass


class Permissions32(Permissions28):
    pass


class PerformedViaGithubApp9(BaseModel):
    created_at: Optional[AwareDatetime] = None
    description: Optional[str] = None
    events: Optional[List[Event8]] = Field(
        None, description="The list of events for the GitHub app"
    )
    external_url: Optional[AnyUrl] = None
    html_url: AnyUrl
    id: Optional[int] = Field(..., description="Unique identifier of the GitHub app")
    name: str = Field(..., description="The name of the GitHub app")
    node_id: str
    owner: Optional[Owner28] = Field(..., title="User")
    permissions: Optional[Permissions32] = Field(
        None, description="The set of permissions for the GitHub app"
    )
    slug: Optional[str] = Field(None, description="The slug name of the GitHub app")
    updated_at: Optional[AwareDatetime] = None


class Reactions17(Reactions6):
    pass


class User20(Owner9):
    pass


class Issue7(BaseModel):
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee13] = Field(None, title="User")
    assignees: List[Optional[Assignee14]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: Optional[str] = Field(..., description="Contents of the issue")
    closed_at: Optional[AwareDatetime] = None
    comments: int
    comments_url: AnyUrl
    created_at: AwareDatetime
    draft: Optional[bool] = None
    events_url: AnyUrl
    html_url: AnyUrl
    id: int
    labels: Optional[List[Label6]] = None
    labels_url: str
    locked: Optional[bool] = None
    milestone: Optional[Milestone9] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    performed_via_github_app: Optional[PerformedViaGithubApp9] = Field(
        None,
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        title="App",
    )
    pull_request: Optional[PullRequest14] = None
    reactions: Reactions17 = Field(..., title="Reactions")
    repository_url: AnyUrl
    state: Optional[State1] = Field(
        None, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Optional[str] = None
    timeline_url: Optional[AnyUrl] = None
    title: str = Field(..., description="Title of the issue")
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the issue")
    user: User20 = Field(..., title="User")


class Creator10(Optional[Assignee]):
    pass


class Milestone10(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator10] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class WebhookIssuesDemilestoned(BaseModel):
    action: Action72
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    issue: Issue7
    milestone: Optional[Milestone10] = Field(
        None, description="A collection of related issues and pull requests.", title="Milestone"
    )
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Title1(BaseModel):
    from_: str = Field(..., alias="from", description="The previous version of the title.")


class Changes7(BaseModel):
    body: Optional[Body2] = None
    title: Optional[Title1] = None


class Assignee15(Optional[Assignee]):
    pass


class Assignee16(Optional[Assignee]):
    pass


class Creator11(Optional[Assignee]):
    pass


class Milestone11(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator11] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class Event14(Enum):
    branch_protection_rule = "branch_protection_rule"
    check_run = "check_run"
    check_suite = "check_suite"
    code_scanning_alert = "code_scanning_alert"
    commit_comment = "commit_comment"
    content_reference = "content_reference"
    create = "create"
    delete = "delete"
    deployment = "deployment"
    deployment_review = "deployment_review"
    deployment_status = "deployment_status"
    deploy_key = "deploy_key"
    discussion = "discussion"
    discussion_comment = "discussion_comment"
    fork = "fork"
    gollum = "gollum"
    issues = "issues"
    issue_comment = "issue_comment"
    label = "label"
    member = "member"
    membership = "membership"
    milestone = "milestone"
    organization = "organization"
    org_block = "org_block"
    page_build = "page_build"
    project = "project"
    project_card = "project_card"
    project_column = "project_column"
    public = "public"
    pull_request = "pull_request"
    pull_request_review = "pull_request_review"
    pull_request_review_comment = "pull_request_review_comment"
    push = "push"
    registry_package = "registry_package"
    release = "release"
    repository = "repository"
    repository_dispatch = "repository_dispatch"
    secret_scanning_alert = "secret_scanning_alert"
    star = "star"
    status = "status"
    team = "team"
    team_add = "team_add"
    watch = "watch"
    workflow_dispatch = "workflow_dispatch"
    workflow_run = "workflow_run"
    security_and_analysis = "security_and_analysis"
    pull_request_review_thread = "pull_request_review_thread"
    reminder = "reminder"


class Owner29(Optional[AnswerChosenBy]):
    pass


class Permissions33(Permissions28):
    pass


class PerformedViaGithubApp10(BaseModel):
    created_at: Optional[AwareDatetime] = None
    description: Optional[str] = None
    events: Optional[List[Event14]] = Field(
        None, description="The list of events for the GitHub app"
    )
    external_url: Optional[AnyUrl] = None
    html_url: AnyUrl
    id: Optional[int] = Field(..., description="Unique identifier of the GitHub app")
    name: str = Field(..., description="The name of the GitHub app")
    node_id: str
    owner: Optional[Owner29] = Field(..., title="User")
    permissions: Optional[Permissions33] = Field(
        None, description="The set of permissions for the GitHub app"
    )
    slug: Optional[str] = Field(None, description="The slug name of the GitHub app")
    updated_at: Optional[AwareDatetime] = None


class Reactions18(Reactions):
    pass


class User21(Optional[Assignee]):
    pass


class Issue8(BaseModel):
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee15] = Field(None, title="User")
    assignees: List[Optional[Assignee16]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: Optional[str] = Field(..., description="Contents of the issue")
    closed_at: Optional[AwareDatetime] = None
    comments: int
    comments_url: AnyUrl
    created_at: AwareDatetime
    draft: Optional[bool] = None
    events_url: AnyUrl
    html_url: AnyUrl
    id: int
    labels: Optional[List[Label6]] = None
    labels_url: str
    locked: Optional[bool] = None
    milestone: Optional[Milestone11] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    performed_via_github_app: Optional[PerformedViaGithubApp10] = Field(
        None,
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        title="App",
    )
    pull_request: Optional[PullRequest14] = None
    reactions: Reactions18 = Field(..., title="Reactions")
    repository_url: AnyUrl
    state: Optional[State1] = Field(
        None, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Optional[str] = None
    timeline_url: Optional[AnyUrl] = None
    title: str = Field(..., description="Title of the issue")
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the issue")
    user: Optional[User21] = Field(..., title="User")


class WebhookIssuesEdited(BaseModel):
    action: Action4
    changes: Changes7 = Field(..., description="The changes to the issue.")
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    issue: Issue8 = Field(
        ...,
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.",
        title="Issue",
    )
    label: Optional[Label6] = Field(None, title="Label")
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Assignee17(Optional[Assignee]):
    pass


class Assignee18(Optional[Assignee]):
    pass


class Creator12(Optional[Assignee]):
    pass


class Milestone12(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator12] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class Event15(Enum):
    branch_protection_rule = "branch_protection_rule"
    check_run = "check_run"
    check_suite = "check_suite"
    code_scanning_alert = "code_scanning_alert"
    commit_comment = "commit_comment"
    content_reference = "content_reference"
    create = "create"
    delete = "delete"
    deployment = "deployment"
    deployment_review = "deployment_review"
    deployment_status = "deployment_status"
    deploy_key = "deploy_key"
    discussion = "discussion"
    discussion_comment = "discussion_comment"
    fork = "fork"
    gollum = "gollum"
    issues = "issues"
    issue_comment = "issue_comment"
    label = "label"
    member = "member"
    membership = "membership"
    milestone = "milestone"
    organization = "organization"
    org_block = "org_block"
    page_build = "page_build"
    project = "project"
    project_card = "project_card"
    project_column = "project_column"
    public = "public"
    pull_request = "pull_request"
    pull_request_review = "pull_request_review"
    pull_request_review_comment = "pull_request_review_comment"
    push = "push"
    registry_package = "registry_package"
    release = "release"
    repository = "repository"
    repository_dispatch = "repository_dispatch"
    secret_scanning_alert = "secret_scanning_alert"
    star = "star"
    status = "status"
    team = "team"
    team_add = "team_add"
    watch = "watch"
    workflow_dispatch = "workflow_dispatch"
    workflow_run = "workflow_run"
    pull_request_review_thread = "pull_request_review_thread"
    reminder = "reminder"


class Owner30(Optional[AnswerChosenBy]):
    pass


class Permissions34(Permissions28):
    pass


class PerformedViaGithubApp11(BaseModel):
    created_at: Optional[AwareDatetime] = None
    description: Optional[str] = None
    events: Optional[List[Event15]] = Field(
        None, description="The list of events for the GitHub app"
    )
    external_url: Optional[AnyUrl] = None
    html_url: AnyUrl
    id: Optional[int] = Field(..., description="Unique identifier of the GitHub app")
    name: str = Field(..., description="The name of the GitHub app")
    node_id: str
    owner: Optional[Owner30] = Field(..., title="User")
    permissions: Optional[Permissions34] = Field(
        None, description="The set of permissions for the GitHub app"
    )
    slug: Optional[str] = Field(None, description="The slug name of the GitHub app")
    updated_at: Optional[AwareDatetime] = None


class User22(Optional[Assignee]):
    pass


class Issue9(BaseModel):
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee17] = Field(None, title="User")
    assignees: List[Optional[Assignee18]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: Optional[str] = Field(..., description="Contents of the issue")
    closed_at: Optional[AwareDatetime] = None
    comments: int
    comments_url: AnyUrl
    created_at: AwareDatetime
    draft: Optional[bool] = None
    events_url: AnyUrl
    html_url: AnyUrl
    id: int
    labels: Optional[List[Label6]] = None
    labels_url: str
    locked: Optional[bool] = None
    milestone: Optional[Milestone12] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    performed_via_github_app: Optional[PerformedViaGithubApp11] = Field(
        None,
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        title="App",
    )
    pull_request: Optional[PullRequest14] = None
    reactions: Reactions18 = Field(..., title="Reactions")
    repository_url: AnyUrl
    state: Optional[State1] = Field(
        None, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Optional[str] = None
    timeline_url: Optional[AnyUrl] = None
    title: str = Field(..., description="Title of the issue")
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the issue")
    user: Optional[User22] = Field(..., title="User")


class WebhookIssuesLabeled(BaseModel):
    action: Action47
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    issue: Issue9 = Field(
        ...,
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.",
        title="Issue",
    )
    label: Optional[Label6] = Field(None, title="Label")
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Assignee19(Optional[AnswerChosenBy]):
    pass


class Assignee20(Optional[AnswerChosenBy]):
    pass


class Creator13(Optional[AnswerChosenBy]):
    pass


class Milestone13(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator13] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class Event16(Enum):
    branch_protection_rule = "branch_protection_rule"
    check_run = "check_run"
    check_suite = "check_suite"
    code_scanning_alert = "code_scanning_alert"
    commit_comment = "commit_comment"
    content_reference = "content_reference"
    create = "create"
    delete = "delete"
    deployment = "deployment"
    deployment_review = "deployment_review"
    deployment_status = "deployment_status"
    deploy_key = "deploy_key"
    discussion = "discussion"
    discussion_comment = "discussion_comment"
    fork = "fork"
    gollum = "gollum"
    issues = "issues"
    issue_comment = "issue_comment"
    label = "label"
    member = "member"
    membership = "membership"
    milestone = "milestone"
    organization = "organization"
    org_block = "org_block"
    page_build = "page_build"
    project = "project"
    project_card = "project_card"
    project_column = "project_column"
    public = "public"
    pull_request = "pull_request"
    pull_request_review = "pull_request_review"
    pull_request_review_comment = "pull_request_review_comment"
    push = "push"
    registry_package = "registry_package"
    release = "release"
    repository = "repository"
    repository_dispatch = "repository_dispatch"
    secret_scanning_alert = "secret_scanning_alert"
    star = "star"
    status = "status"
    team = "team"
    team_add = "team_add"
    watch = "watch"
    workflow_dispatch = "workflow_dispatch"
    workflow_run = "workflow_run"
    reminder = "reminder"
    security_and_analysis = "security_and_analysis"


class Owner31(Optional[AnswerChosenBy]):
    pass


class Permissions35(Permissions22):
    pass


class PerformedViaGithubApp12(BaseModel):
    created_at: Optional[AwareDatetime] = None
    description: Optional[str] = None
    events: Optional[List[Event16]] = Field(
        None, description="The list of events for the GitHub app"
    )
    external_url: Optional[AnyUrl] = None
    html_url: AnyUrl
    id: Optional[int] = Field(..., description="Unique identifier of the GitHub app")
    name: str = Field(..., description="The name of the GitHub app")
    node_id: str
    owner: Optional[Owner31] = Field(..., title="User")
    permissions: Optional[Permissions35] = Field(
        None, description="The set of permissions for the GitHub app"
    )
    slug: Optional[str] = Field(None, description="The slug name of the GitHub app")
    updated_at: Optional[AwareDatetime] = None


class Reactions20(Reactions6):
    pass


class User23(Owner9):
    pass


class Issue10(BaseModel):
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee19] = Field(None, title="User")
    assignees: List[Optional[Assignee20]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: Optional[str] = Field(..., description="Contents of the issue")
    closed_at: Optional[AwareDatetime] = None
    comments: int
    comments_url: AnyUrl
    created_at: AwareDatetime
    draft: Optional[bool] = None
    events_url: AnyUrl
    html_url: AnyUrl
    id: int
    labels: Optional[List[Label6]] = None
    labels_url: str
    locked: Optional[bool] = None
    milestone: Optional[Milestone13] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    performed_via_github_app: Optional[PerformedViaGithubApp12] = Field(
        None,
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        title="App",
    )
    pull_request: Optional[PullRequest14] = None
    reactions: Reactions20 = Field(..., title="Reactions")
    repository_url: AnyUrl
    state: Optional[State1] = Field(
        None, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Optional[str] = None
    timeline_url: Optional[AnyUrl] = None
    title: str = Field(..., description="Title of the issue")
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the issue")
    user: User23 = Field(..., title="User")


class WebhookIssuesLocked(BaseModel):
    action: Action48
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    issue: Issue10
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action76(Enum):
    milestoned = "milestoned"


class Assignee21(Optional[AnswerChosenBy]):
    pass


class Assignee22(Optional[AnswerChosenBy]):
    pass


class Creator14(Optional[Assignee]):
    pass


class Milestone14(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator14] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class Owner32(Optional[AnswerChosenBy]):
    pass


class Permissions36(Permissions28):
    pass


class PerformedViaGithubApp13(BaseModel):
    created_at: Optional[AwareDatetime] = None
    description: Optional[str] = None
    events: Optional[List[Event12]] = Field(
        None, description="The list of events for the GitHub app"
    )
    external_url: Optional[AnyUrl] = None
    html_url: AnyUrl
    id: Optional[int] = Field(..., description="Unique identifier of the GitHub app")
    name: str = Field(..., description="The name of the GitHub app")
    node_id: str
    owner: Optional[Owner32] = Field(..., title="User")
    permissions: Optional[Permissions36] = Field(
        None, description="The set of permissions for the GitHub app"
    )
    slug: Optional[str] = Field(None, description="The slug name of the GitHub app")
    updated_at: Optional[AwareDatetime] = None


class Issue11(BaseModel):
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee21] = Field(None, title="User")
    assignees: List[Optional[Assignee22]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: Optional[str] = Field(..., description="Contents of the issue")
    closed_at: Optional[AwareDatetime] = None
    comments: int
    comments_url: AnyUrl
    created_at: AwareDatetime
    draft: Optional[bool] = None
    events_url: AnyUrl
    html_url: AnyUrl
    id: int
    labels: Optional[List[Label6]] = None
    labels_url: str
    locked: Optional[bool] = None
    milestone: Milestone14 = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    performed_via_github_app: Optional[PerformedViaGithubApp13] = Field(
        None,
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        title="App",
    )
    pull_request: Optional[PullRequest14] = None
    reactions: Reactions20 = Field(..., title="Reactions")
    repository_url: AnyUrl
    state: Optional[State1] = Field(
        None, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Optional[str] = None
    timeline_url: Optional[AnyUrl] = None
    title: str = Field(..., description="Title of the issue")
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the issue")
    user: User23 = Field(..., title="User")


class Creator15(Optional[Assignee]):
    pass


class Milestone15(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator15] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class WebhookIssuesMilestoned(BaseModel):
    action: Action76
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    issue: Issue11
    milestone: Milestone15 = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action77(Enum):
    opened = "opened"


class Assignee23(Optional[AnswerChosenBy]):
    pass


class Assignee24(Optional[AnswerChosenBy]):
    pass


class Creator16(Optional[AnswerChosenBy]):
    pass


class Milestone16(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator16] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class Owner33(Optional[AnswerChosenBy]):
    pass


class Permissions37(Permissions22):
    pass


class PerformedViaGithubApp14(BaseModel):
    created_at: Optional[AwareDatetime] = None
    description: Optional[str] = None
    events: Optional[List[Event8]] = Field(
        None, description="The list of events for the GitHub app"
    )
    external_url: Optional[AnyUrl] = None
    html_url: AnyUrl
    id: Optional[int] = Field(..., description="Unique identifier of the GitHub app")
    name: str = Field(..., description="The name of the GitHub app")
    node_id: str
    owner: Optional[Owner33] = Field(..., title="User")
    permissions: Optional[Permissions37] = Field(
        None, description="The set of permissions for the GitHub app"
    )
    slug: Optional[str] = Field(None, description="The slug name of the GitHub app")
    updated_at: Optional[AwareDatetime] = None


class Reactions22(Reactions):
    pass


class User25(Optional[AnswerChosenBy]):
    pass


class OldIssue(BaseModel):
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee23] = Field(None, title="User")
    assignees: List[Optional[Assignee24]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: Optional[str] = Field(..., description="Contents of the issue")
    closed_at: Optional[AwareDatetime] = None
    comments: int
    comments_url: AnyUrl
    created_at: AwareDatetime
    draft: Optional[bool] = None
    events_url: AnyUrl
    html_url: AnyUrl
    id: int
    labels: Optional[List[Label6]] = None
    labels_url: str
    locked: Optional[bool] = None
    milestone: Optional[Milestone16] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    performed_via_github_app: Optional[PerformedViaGithubApp14] = Field(
        None,
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        title="App",
    )
    pull_request: Optional[PullRequest14] = None
    reactions: Reactions22 = Field(..., title="Reactions")
    repository_url: AnyUrl
    state: Optional[State1] = Field(
        None, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Optional[str] = None
    timeline_url: Optional[AnyUrl] = None
    title: str = Field(..., description="Title of the issue")
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the issue")
    user: Optional[User25] = Field(..., title="User")


class Owner34(Optional[AnswerChosenBy]):
    pass


class Permissions38(Permissions25):
    pass


class OldRepository(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    custom_properties: Optional[Dict[str, Any]] = Field(
        None,
        description="The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.",
    )
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_discussions: Optional[bool] = Field(
        None, description="Whether the repository has discussions enabled."
    )
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner34] = Field(..., title="User")
    permissions: Optional[Permissions38] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require commit signoff."
    )


class Changes8(BaseModel):
    old_issue: Optional[OldIssue] = Field(
        ...,
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.",
        title="Issue",
    )
    old_repository: OldRepository = Field(..., description="A git repository", title="Repository")


class Assignee25(Optional[AnswerChosenBy]):
    pass


class Assignee26(Optional[AnswerChosenBy]):
    pass


class Creator17(Optional[Assignee]):
    pass


class Milestone17(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator17] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class Owner35(Optional[AnswerChosenBy]):
    pass


class Permissions39(Permissions28):
    pass


class PerformedViaGithubApp15(BaseModel):
    created_at: Optional[AwareDatetime] = None
    description: Optional[str] = None
    events: Optional[List[Event14]] = Field(
        None, description="The list of events for the GitHub app"
    )
    external_url: Optional[AnyUrl] = None
    html_url: AnyUrl
    id: Optional[int] = Field(..., description="Unique identifier of the GitHub app")
    name: str = Field(..., description="The name of the GitHub app")
    node_id: str
    owner: Optional[Owner35] = Field(..., title="User")
    permissions: Optional[Permissions39] = Field(
        None, description="The set of permissions for the GitHub app"
    )
    slug: Optional[str] = Field(None, description="The slug name of the GitHub app")
    updated_at: Optional[AwareDatetime] = None


class User26(Optional[AnswerChosenBy]):
    pass


class Issue12(BaseModel):
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee25] = Field(None, title="User")
    assignees: List[Optional[Assignee26]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: Optional[str] = Field(..., description="Contents of the issue")
    closed_at: Optional[AwareDatetime] = None
    comments: int
    comments_url: AnyUrl
    created_at: AwareDatetime
    draft: Optional[bool] = None
    events_url: AnyUrl
    html_url: AnyUrl
    id: int
    labels: Optional[List[Label6]] = None
    labels_url: str
    locked: Optional[bool] = None
    milestone: Optional[Milestone17] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    performed_via_github_app: Optional[PerformedViaGithubApp15] = Field(
        None,
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        title="App",
    )
    pull_request: Optional[PullRequest14] = None
    reactions: Reactions22 = Field(..., title="Reactions")
    repository_url: AnyUrl
    state: Optional[State1] = Field(
        None, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Optional[str] = None
    timeline_url: Optional[AnyUrl] = None
    title: str = Field(..., description="Title of the issue")
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the issue")
    user: Optional[User26] = Field(..., title="User")


class WebhookIssuesOpened(BaseModel):
    action: Action77
    changes: Optional[Changes8] = None
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    issue: Issue12 = Field(
        ...,
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.",
        title="Issue",
    )
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Assignee27(Optional[AnswerChosenBy]):
    pass


class Assignee28(Optional[AnswerChosenBy]):
    pass


class Creator18(Optional[AnswerChosenBy]):
    pass


class Milestone18(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator18] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class Owner36(Optional[AnswerChosenBy]):
    pass


class Permissions40(Permissions22):
    pass


class PerformedViaGithubApp16(BaseModel):
    created_at: Optional[AwareDatetime] = None
    description: Optional[str] = None
    events: Optional[List[Event8]] = Field(
        None, description="The list of events for the GitHub app"
    )
    external_url: Optional[AnyUrl] = None
    html_url: AnyUrl
    id: Optional[int] = Field(..., description="Unique identifier of the GitHub app")
    name: str = Field(..., description="The name of the GitHub app")
    node_id: str
    owner: Optional[Owner36] = Field(..., title="User")
    permissions: Optional[Permissions40] = Field(
        None, description="The set of permissions for the GitHub app"
    )
    slug: Optional[str] = Field(None, description="The slug name of the GitHub app")
    updated_at: Optional[AwareDatetime] = None


class User27(Optional[AnswerChosenBy]):
    pass


class Issue13(BaseModel):
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee27] = Field(None, title="User")
    assignees: List[Optional[Assignee28]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: Optional[str] = Field(..., description="Contents of the issue")
    closed_at: Optional[AwareDatetime] = None
    comments: int
    comments_url: AnyUrl
    created_at: AwareDatetime
    draft: Optional[bool] = None
    events_url: AnyUrl
    html_url: AnyUrl
    id: int
    labels: Optional[List[Label6]] = None
    labels_url: str
    locked: Optional[bool] = None
    milestone: Optional[Milestone18] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    performed_via_github_app: Optional[PerformedViaGithubApp16] = Field(
        None,
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        title="App",
    )
    pull_request: Optional[PullRequest14] = None
    reactions: Reactions22 = Field(..., title="Reactions")
    repository_url: AnyUrl
    state: Optional[State1] = Field(
        None, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Optional[str] = None
    timeline_url: Optional[AnyUrl] = None
    title: str = Field(..., description="Title of the issue")
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the issue")
    user: Optional[User27] = Field(..., title="User")


class WebhookIssuesPinned(BaseModel):
    action: Action49
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    issue: Issue13 = Field(
        ...,
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.",
        title="Issue",
    )
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Assignee29(Optional[AnswerChosenBy]):
    pass


class Assignee30(Optional[Assignee]):
    pass


class Creator19(Optional[Assignee]):
    pass


class Milestone19(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator19] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class Owner37(Optional[AnswerChosenBy]):
    pass


class Permissions41(Permissions19):
    pass


class PerformedViaGithubApp17(BaseModel):
    created_at: Optional[AwareDatetime] = None
    description: Optional[str] = None
    events: Optional[List[Event15]] = Field(
        None, description="The list of events for the GitHub app"
    )
    external_url: Optional[AnyUrl] = None
    html_url: AnyUrl
    id: Optional[int] = Field(..., description="Unique identifier of the GitHub app")
    name: str = Field(..., description="The name of the GitHub app")
    node_id: str
    owner: Optional[Owner37] = Field(..., title="User")
    permissions: Optional[Permissions41] = Field(
        None, description="The set of permissions for the GitHub app"
    )
    slug: Optional[str] = Field(None, description="The slug name of the GitHub app")
    updated_at: Optional[AwareDatetime] = None


class Reactions25(Reactions6):
    pass


class User28(Owner9):
    pass


class Issue14(BaseModel):
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee29] = Field(None, title="User")
    assignees: List[Optional[Assignee30]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: Optional[str] = Field(..., description="Contents of the issue")
    closed_at: Optional[AwareDatetime] = None
    comments: int
    comments_url: AnyUrl
    created_at: AwareDatetime
    draft: Optional[bool] = None
    events_url: AnyUrl
    html_url: AnyUrl
    id: int
    labels: Optional[List[Label6]] = None
    labels_url: str
    locked: Optional[bool] = None
    milestone: Optional[Milestone19] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    performed_via_github_app: Optional[PerformedViaGithubApp17] = Field(
        None,
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        title="App",
    )
    pull_request: Optional[PullRequest14] = None
    reactions: Reactions25 = Field(..., title="Reactions")
    repository_url: AnyUrl
    state: Optional[State1] = Field(
        None, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Optional[str] = None
    timeline_url: Optional[AnyUrl] = None
    title: str = Field(..., description="Title of the issue")
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the issue")
    user: User28 = Field(..., title="User")


class WebhookIssuesReopened(BaseModel):
    action: Action16
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    issue: Issue14
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Assignee31(Optional[AnswerChosenBy]):
    pass


class Assignee32(Optional[AnswerChosenBy]):
    pass


class Creator20(Optional[AnswerChosenBy]):
    pass


class Milestone20(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator20] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class Owner38(Optional[AnswerChosenBy]):
    pass


class Permissions42(Permissions22):
    pass


class PerformedViaGithubApp18(BaseModel):
    created_at: Optional[AwareDatetime] = None
    description: Optional[str] = None
    events: Optional[List[Event8]] = Field(
        None, description="The list of events for the GitHub app"
    )
    external_url: Optional[AnyUrl] = None
    html_url: AnyUrl
    id: Optional[int] = Field(..., description="Unique identifier of the GitHub app")
    name: str = Field(..., description="The name of the GitHub app")
    node_id: str
    owner: Optional[Owner38] = Field(..., title="User")
    permissions: Optional[Permissions42] = Field(
        None, description="The set of permissions for the GitHub app"
    )
    slug: Optional[str] = Field(None, description="The slug name of the GitHub app")
    updated_at: Optional[AwareDatetime] = None


class Reactions26(Reactions):
    pass


class User29(Optional[AnswerChosenBy]):
    pass


class NewIssue(BaseModel):
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee31] = Field(None, title="User")
    assignees: List[Optional[Assignee32]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: Optional[str] = Field(..., description="Contents of the issue")
    closed_at: Optional[AwareDatetime] = None
    comments: int
    comments_url: AnyUrl
    created_at: AwareDatetime
    draft: Optional[bool] = None
    events_url: AnyUrl
    html_url: AnyUrl
    id: int
    labels: Optional[List[Label6]] = None
    labels_url: str
    locked: Optional[bool] = None
    milestone: Optional[Milestone20] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    performed_via_github_app: Optional[PerformedViaGithubApp18] = Field(
        None,
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        title="App",
    )
    pull_request: Optional[PullRequest14] = None
    reactions: Reactions26 = Field(..., title="Reactions")
    repository_url: AnyUrl
    state: Optional[State1] = Field(
        None, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Optional[str] = None
    timeline_url: Optional[AnyUrl] = None
    title: str = Field(..., description="Title of the issue")
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the issue")
    user: Optional[User29] = Field(..., title="User")


class Owner39(Optional[AnswerChosenBy]):
    pass


class Permissions43(Permissions25):
    pass


class NewRepository(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    custom_properties: Optional[Dict[str, Any]] = Field(
        None,
        description="The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.",
    )
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner39] = Field(..., title="User")
    permissions: Optional[Permissions43] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class Changes9(BaseModel):
    new_issue: NewIssue = Field(
        ...,
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.",
        title="Issue",
    )
    new_repository: NewRepository = Field(..., description="A git repository", title="Repository")


class Assignee33(Optional[AnswerChosenBy]):
    pass


class Assignee34(Optional[AnswerChosenBy]):
    pass


class Creator21(Optional[AnswerChosenBy]):
    pass


class Milestone21(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator21] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class Owner40(Optional[AnswerChosenBy]):
    pass


class Permissions44(Permissions22):
    pass


class PerformedViaGithubApp19(BaseModel):
    created_at: Optional[AwareDatetime] = None
    description: Optional[str] = None
    events: Optional[List[Event8]] = Field(
        None, description="The list of events for the GitHub app"
    )
    external_url: Optional[AnyUrl] = None
    html_url: AnyUrl
    id: Optional[int] = Field(..., description="Unique identifier of the GitHub app")
    name: str = Field(..., description="The name of the GitHub app")
    node_id: str
    owner: Optional[Owner40] = Field(..., title="User")
    permissions: Optional[Permissions44] = Field(
        None, description="The set of permissions for the GitHub app"
    )
    slug: Optional[str] = Field(None, description="The slug name of the GitHub app")
    updated_at: Optional[AwareDatetime] = None


class User30(Optional[AnswerChosenBy]):
    pass


class Issue15(BaseModel):
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee33] = Field(None, title="User")
    assignees: List[Optional[Assignee34]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: Optional[str] = Field(..., description="Contents of the issue")
    closed_at: Optional[AwareDatetime] = None
    comments: int
    comments_url: AnyUrl
    created_at: AwareDatetime
    draft: Optional[bool] = None
    events_url: AnyUrl
    html_url: AnyUrl
    id: int
    labels: Optional[List[Label6]] = None
    labels_url: str
    locked: Optional[bool] = None
    milestone: Optional[Milestone21] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    performed_via_github_app: Optional[PerformedViaGithubApp19] = Field(
        None,
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        title="App",
    )
    pull_request: Optional[PullRequest14] = None
    reactions: Reactions26 = Field(..., title="Reactions")
    repository_url: AnyUrl
    state: Optional[State1] = Field(
        None, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Optional[str] = None
    timeline_url: Optional[AnyUrl] = None
    title: str = Field(..., description="Title of the issue")
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the issue")
    user: Optional[User30] = Field(..., title="User")


class WebhookIssuesTransferred(BaseModel):
    action: Action51
    changes: Changes9
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    issue: Issue15 = Field(
        ...,
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.",
        title="Issue",
    )
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action81(Enum):
    unassigned = "unassigned"


class Assignee35(Optional[Assignee]):
    pass


class Assignee36(Optional[Assignee]):
    pass


class Assignee37(Optional[Assignee]):
    pass


class Creator22(Optional[Assignee]):
    pass


class Milestone22(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator22] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class Owner41(Optional[AnswerChosenBy]):
    pass


class Permissions45(Permissions28):
    pass


class PerformedViaGithubApp20(BaseModel):
    created_at: Optional[AwareDatetime] = None
    description: Optional[str] = None
    events: Optional[List[Event7]] = Field(
        None, description="The list of events for the GitHub app"
    )
    external_url: Optional[AnyUrl] = None
    html_url: AnyUrl
    id: Optional[int] = Field(..., description="Unique identifier of the GitHub app")
    name: str = Field(..., description="The name of the GitHub app")
    node_id: str
    owner: Optional[Owner41] = Field(..., title="User")
    permissions: Optional[Permissions45] = Field(
        None, description="The set of permissions for the GitHub app"
    )
    slug: Optional[str] = Field(None, description="The slug name of the GitHub app")
    updated_at: Optional[AwareDatetime] = None


class User31(Optional[Assignee]):
    pass


class Issue16(BaseModel):
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee36] = Field(None, title="User")
    assignees: List[Optional[Assignee37]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: Optional[str] = Field(..., description="Contents of the issue")
    closed_at: Optional[AwareDatetime] = None
    comments: int
    comments_url: AnyUrl
    created_at: AwareDatetime
    draft: Optional[bool] = None
    events_url: AnyUrl
    html_url: AnyUrl
    id: int
    labels: Optional[List[Label6]] = None
    labels_url: str
    locked: Optional[bool] = None
    milestone: Optional[Milestone22] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    performed_via_github_app: Optional[PerformedViaGithubApp20] = Field(
        None,
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        title="App",
    )
    pull_request: Optional[PullRequest14] = None
    reactions: Reactions26 = Field(..., title="Reactions")
    repository_url: AnyUrl
    state: Optional[State1] = Field(
        None, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Optional[str] = None
    timeline_url: Optional[AnyUrl] = None
    title: str = Field(..., description="Title of the issue")
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the issue")
    user: Optional[User31] = Field(..., title="User")


class WebhookIssuesUnassigned(BaseModel):
    action: Action81 = Field(..., description="The action that was performed.")
    assignee: Optional[Assignee35] = Field(None, title="User")
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    issue: Issue16 = Field(
        ...,
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.",
        title="Issue",
    )
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Assignee38(Optional[Assignee]):
    pass


class Assignee39(Optional[Assignee]):
    pass


class Creator23(Optional[Assignee]):
    pass


class Milestone23(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator23] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class Owner42(Optional[AnswerChosenBy]):
    pass


class Permissions46(Permissions28):
    pass


class PerformedViaGithubApp21(BaseModel):
    created_at: Optional[AwareDatetime] = None
    description: Optional[str] = None
    events: Optional[List[Event7]] = Field(
        None, description="The list of events for the GitHub app"
    )
    external_url: Optional[AnyUrl] = None
    html_url: AnyUrl
    id: Optional[int] = Field(..., description="Unique identifier of the GitHub app")
    name: str = Field(..., description="The name of the GitHub app")
    node_id: str
    owner: Optional[Owner42] = Field(..., title="User")
    permissions: Optional[Permissions46] = Field(
        None, description="The set of permissions for the GitHub app"
    )
    slug: Optional[str] = Field(None, description="The slug name of the GitHub app")
    updated_at: Optional[AwareDatetime] = None


class User32(Optional[Assignee]):
    pass


class Issue17(BaseModel):
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee38] = Field(None, title="User")
    assignees: List[Optional[Assignee39]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: Optional[str] = Field(..., description="Contents of the issue")
    closed_at: Optional[AwareDatetime] = None
    comments: int
    comments_url: AnyUrl
    created_at: AwareDatetime
    draft: Optional[bool] = None
    events_url: AnyUrl
    html_url: AnyUrl
    id: int
    labels: Optional[List[Label6]] = None
    labels_url: str
    locked: Optional[bool] = None
    milestone: Optional[Milestone23] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    performed_via_github_app: Optional[PerformedViaGithubApp21] = Field(
        None,
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        title="App",
    )
    pull_request: Optional[PullRequest14] = None
    reactions: Reactions26 = Field(..., title="Reactions")
    repository_url: AnyUrl
    state: Optional[State1] = Field(
        None, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Optional[str] = None
    timeline_url: Optional[AnyUrl] = None
    title: str = Field(..., description="Title of the issue")
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the issue")
    user: Optional[User32] = Field(..., title="User")


class WebhookIssuesUnlabeled(BaseModel):
    action: Action53
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    issue: Issue17 = Field(
        ...,
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.",
        title="Issue",
    )
    label: Optional[Label6] = Field(None, title="Label")
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Assignee40(Optional[AnswerChosenBy]):
    pass


class Assignee41(Optional[AnswerChosenBy]):
    pass


class Creator24(Optional[AnswerChosenBy]):
    pass


class Milestone24(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator24] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class Owner43(Optional[AnswerChosenBy]):
    pass


class Permissions47(Permissions22):
    pass


class PerformedViaGithubApp22(BaseModel):
    created_at: Optional[AwareDatetime] = None
    description: Optional[str] = None
    events: Optional[List[Event8]] = Field(
        None, description="The list of events for the GitHub app"
    )
    external_url: Optional[AnyUrl] = None
    html_url: AnyUrl
    id: Optional[int] = Field(..., description="Unique identifier of the GitHub app")
    name: str = Field(..., description="The name of the GitHub app")
    node_id: str
    owner: Optional[Owner43] = Field(..., title="User")
    permissions: Optional[Permissions47] = Field(
        None, description="The set of permissions for the GitHub app"
    )
    slug: Optional[str] = Field(None, description="The slug name of the GitHub app")
    updated_at: Optional[AwareDatetime] = None


class Reactions30(Reactions6):
    pass


class User33(Owner9):
    pass


class Issue18(BaseModel):
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee40] = Field(None, title="User")
    assignees: List[Optional[Assignee41]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: Optional[str] = Field(..., description="Contents of the issue")
    closed_at: Optional[AwareDatetime] = None
    comments: int
    comments_url: AnyUrl
    created_at: AwareDatetime
    draft: Optional[bool] = None
    events_url: AnyUrl
    html_url: AnyUrl
    id: int
    labels: Optional[List[Label6]] = None
    labels_url: str
    locked: Optional[bool] = None
    milestone: Optional[Milestone24] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    performed_via_github_app: Optional[PerformedViaGithubApp22] = Field(
        None,
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        title="App",
    )
    pull_request: Optional[PullRequest14] = None
    reactions: Reactions30 = Field(..., title="Reactions")
    repository_url: AnyUrl
    state: Optional[State1] = Field(
        None, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Optional[str] = None
    timeline_url: Optional[AnyUrl] = None
    title: str = Field(..., description="Title of the issue")
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the issue")
    user: User33 = Field(..., title="User")


class WebhookIssuesUnlocked(BaseModel):
    action: Action54
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    issue: Issue18
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Assignee42(Optional[AnswerChosenBy]):
    pass


class Assignee43(Optional[AnswerChosenBy]):
    pass


class Creator25(Optional[AnswerChosenBy]):
    pass


class Milestone25(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator25] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class Owner44(Optional[AnswerChosenBy]):
    pass


class Permissions48(Permissions22):
    pass


class PerformedViaGithubApp23(BaseModel):
    created_at: Optional[AwareDatetime] = None
    description: Optional[str] = None
    events: Optional[List[Event8]] = Field(
        None, description="The list of events for the GitHub app"
    )
    external_url: Optional[AnyUrl] = None
    html_url: AnyUrl
    id: Optional[int] = Field(..., description="Unique identifier of the GitHub app")
    name: str = Field(..., description="The name of the GitHub app")
    node_id: str
    owner: Optional[Owner44] = Field(..., title="User")
    permissions: Optional[Permissions48] = Field(
        None, description="The set of permissions for the GitHub app"
    )
    slug: Optional[str] = Field(None, description="The slug name of the GitHub app")
    updated_at: Optional[AwareDatetime] = None


class Reactions31(Reactions):
    pass


class User34(Optional[AnswerChosenBy]):
    pass


class Issue19(BaseModel):
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee42] = Field(None, title="User")
    assignees: List[Optional[Assignee43]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: Optional[str] = Field(..., description="Contents of the issue")
    closed_at: Optional[AwareDatetime] = None
    comments: int
    comments_url: AnyUrl
    created_at: AwareDatetime
    draft: Optional[bool] = None
    events_url: AnyUrl
    html_url: AnyUrl
    id: int
    labels: Optional[List[Label6]] = None
    labels_url: str
    locked: Optional[bool] = None
    milestone: Optional[Milestone25] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    performed_via_github_app: Optional[PerformedViaGithubApp23] = Field(
        None,
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        title="App",
    )
    pull_request: Optional[PullRequest14] = None
    reactions: Reactions31 = Field(..., title="Reactions")
    repository_url: AnyUrl
    state: Optional[State1] = Field(
        None, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Optional[str] = None
    timeline_url: Optional[AnyUrl] = None
    title: str = Field(..., description="Title of the issue")
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the issue")
    user: Optional[User34] = Field(..., title="User")


class WebhookIssuesUnpinned(BaseModel):
    action: Action55
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    issue: Issue19 = Field(
        ...,
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.",
        title="Issue",
    )
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class WebhookLabelCreated(BaseModel):
    action: Action2
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    label: Label6 = Field(..., title="Label")
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: Optional[SimpleUserWebhooks] = None


class WebhookLabelDeleted(BaseModel):
    action: Action3
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    label: Label6 = Field(..., title="Label")
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Color(BaseModel):
    from_: str = Field(
        ...,
        alias="from",
        description="The previous version of the color if the action was `edited`.",
    )


class Description(BaseModel):
    from_: str = Field(
        ...,
        alias="from",
        description="The previous version of the description if the action was `edited`.",
    )


class Name(BaseModel):
    from_: str = Field(
        ...,
        alias="from",
        description="The previous version of the name if the action was `edited`.",
    )


class Changes10(BaseModel):
    color: Optional[Color] = None
    description: Optional[Description] = None
    name: Optional[Name] = None


class WebhookLabelEdited(BaseModel):
    action: Action4
    changes: Optional[Changes10] = Field(
        None, description="The changes to the label if the action was `edited`."
    )
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    label: Label6 = Field(..., title="Label")
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action88(Enum):
    cancelled = "cancelled"


class Account1(BaseModel):
    id: Optional[int] = None
    login: Optional[str] = None
    node_id: Optional[str] = None
    organization_billing_email: Optional[str] = None
    type: Optional[str] = None


class Plan5(BaseModel):
    bullets: Optional[List[Optional[str]]] = None
    description: Optional[str] = None
    has_free_trial: Optional[bool] = None
    id: Optional[int] = None
    monthly_price_in_cents: Optional[int] = None
    name: Optional[str] = None
    price_model: Optional[PriceModel] = None
    unit_name: Optional[str] = None
    yearly_price_in_cents: Optional[int] = None


class MarketplacePurchase2(BaseModel):
    account: Account1
    billing_cycle: str
    free_trial_ends_on: Optional[str] = None
    next_billing_date: Optional[str] = None
    on_free_trial: bool
    plan: Plan5
    unit_count: int


class Account2(BaseModel):
    id: int
    login: str
    node_id: str
    organization_billing_email: Optional[str] = None
    type: str


class Plan6(BaseModel):
    bullets: List[str]
    description: str
    has_free_trial: bool
    id: int
    monthly_price_in_cents: int
    name: str
    price_model: PriceModel
    unit_name: Optional[str] = None
    yearly_price_in_cents: int


class PreviousMarketplacePurchase(BaseModel):
    account: Account2
    billing_cycle: str
    next_billing_date: Optional[str] = None
    on_free_trial: bool
    plan: Plan6
    unit_count: int


class WebhookMarketplacePurchaseCancelled(BaseModel):
    action: Action88
    effective_date: str
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    marketplace_purchase: MarketplacePurchase2
    organization: Optional[OrganizationSimpleWebhooks] = None
    previous_marketplace_purchase: Optional[PreviousMarketplacePurchase] = Field(
        None, title="Marketplace Purchase"
    )
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks


class Action89(Enum):
    changed = "changed"


class Account3(Account1):
    pass


class Plan7(Plan5):
    pass


class MarketplacePurchase3(BaseModel):
    account: Account3
    billing_cycle: str
    free_trial_ends_on: Optional[str] = None
    next_billing_date: Optional[str] = None
    on_free_trial: bool
    plan: Plan7
    unit_count: int


class Account4(Account2):
    pass


class Plan8(Plan6):
    pass


class PreviousMarketplacePurchase1(BaseModel):
    account: Account4
    billing_cycle: str
    free_trial_ends_on: Optional[str] = None
    next_billing_date: Optional[str] = None
    on_free_trial: Optional[bool] = None
    plan: Plan8
    unit_count: int


class WebhookMarketplacePurchaseChanged(BaseModel):
    action: Action89
    effective_date: str
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    marketplace_purchase: MarketplacePurchase3
    organization: Optional[OrganizationSimpleWebhooks] = None
    previous_marketplace_purchase: Optional[PreviousMarketplacePurchase1] = Field(
        None, title="Marketplace Purchase"
    )
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks


class Action90(Enum):
    pending_change = "pending_change"


class Account5(Account1):
    pass


class Plan9(Plan5):
    pass


class MarketplacePurchase4(BaseModel):
    account: Account5
    billing_cycle: str
    free_trial_ends_on: Optional[str] = None
    next_billing_date: Optional[str] = None
    on_free_trial: bool
    plan: Plan9
    unit_count: int


class Account6(Account2):
    pass


class Plan10(Plan6):
    pass


class PreviousMarketplacePurchase2(BaseModel):
    account: Account6
    billing_cycle: str
    free_trial_ends_on: Optional[str] = None
    next_billing_date: Optional[str] = None
    on_free_trial: bool
    plan: Plan10
    unit_count: int


class WebhookMarketplacePurchasePendingChange(BaseModel):
    action: Action90
    effective_date: str
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    marketplace_purchase: MarketplacePurchase4
    organization: Optional[OrganizationSimpleWebhooks] = None
    previous_marketplace_purchase: Optional[PreviousMarketplacePurchase2] = Field(
        None, title="Marketplace Purchase"
    )
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks


class Action91(Enum):
    pending_change_cancelled = "pending_change_cancelled"


class Plan11(Plan6):
    pass


class MarketplacePurchase5(BaseModel):
    account: Account6
    billing_cycle: str
    next_billing_date: Optional[str] = None
    on_free_trial: bool
    plan: Plan11
    unit_count: int


class Plan12(Plan6):
    pass


class PreviousMarketplacePurchase3(BaseModel):
    account: Account6
    billing_cycle: str
    next_billing_date: Optional[str] = None
    on_free_trial: bool
    plan: Plan12
    unit_count: int


class WebhookMarketplacePurchasePendingChangeCancelled(BaseModel):
    action: Action91
    effective_date: str
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    marketplace_purchase: MarketplacePurchase5
    organization: Optional[OrganizationSimpleWebhooks] = None
    previous_marketplace_purchase: Optional[PreviousMarketplacePurchase3] = Field(
        None, title="Marketplace Purchase"
    )
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks


class Action92(Enum):
    purchased = "purchased"


class Account9(Account1):
    pass


class Plan13(Plan5):
    pass


class MarketplacePurchase6(BaseModel):
    account: Account9
    billing_cycle: str
    free_trial_ends_on: Optional[str] = None
    next_billing_date: Optional[str] = None
    on_free_trial: bool
    plan: Plan13
    unit_count: int


class Account10(Account2):
    pass


class Plan14(Plan6):
    pass


class PreviousMarketplacePurchase4(BaseModel):
    account: Account10
    billing_cycle: str
    next_billing_date: Optional[str] = None
    on_free_trial: bool
    plan: Plan14
    unit_count: int


class WebhookMarketplacePurchasePurchased(BaseModel):
    action: Action92
    effective_date: str
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    marketplace_purchase: MarketplacePurchase6
    organization: Optional[OrganizationSimpleWebhooks] = None
    previous_marketplace_purchase: Optional[PreviousMarketplacePurchase4] = Field(
        None, title="Marketplace Purchase"
    )
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks


class To(Enum):
    write = "write"
    admin = "admin"
    read = "read"


class Permission(BaseModel):
    to: To


class Changes11(BaseModel):
    permission: Optional[Permission] = None


class Member(Optional[AnswerChosenBy]):
    pass


class WebhookMemberAdded(BaseModel):
    action: Action61
    changes: Optional[Changes11] = None
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    member: Optional[Member] = Field(..., title="User")
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class OldPermission(BaseModel):
    from_: str = Field(
        ...,
        alias="from",
        description="The previous permissions of the collaborator if the action was edited.",
    )


class Permission1(BaseModel):
    from_: Optional[str] = Field(None, alias="from")
    to: Optional[str] = None


class Changes12(BaseModel):
    old_permission: Optional[OldPermission] = None
    permission: Optional[Permission1] = None


class Member1(Optional[AnswerChosenBy]):
    pass


class WebhookMemberEdited(BaseModel):
    action: Action4
    changes: Changes12 = Field(..., description="The changes to the collaborator permissions")
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    member: Optional[Member1] = Field(..., title="User")
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Member2(Optional[AnswerChosenBy]):
    pass


class WebhookMemberRemoved(BaseModel):
    action: Action62
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    member: Optional[Member2] = Field(..., title="User")
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Member3(Optional[AnswerChosenBy]):
    pass


class Scope4(Enum):
    team = "team"


class Sender(Optional[AnswerChosenBy]):
    pass


class Privacy1(Enum):
    open = "open"
    closed = "closed"
    secret = "secret"


class Parent5(BaseModel):
    description: Optional[str] = Field(..., description="Description of the team")
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the team")
    members_url: str
    name: str = Field(..., description="Name of the team")
    node_id: str
    permission: str = Field(
        ..., description="Permission that the team will have for its repositories"
    )
    privacy: Privacy1
    notification_setting: NotificationSetting = Field(
        ...,
        description="Whether team members will receive notifications when their team is @mentioned",
    )
    repositories_url: AnyUrl
    slug: str
    url: AnyUrl = Field(..., description="URL for the team")


class Team2(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent5] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    notification_setting: Optional[NotificationSetting] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class WebhookMembershipAdded(BaseModel):
    action: Action61
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    member: Optional[Member3] = Field(..., title="User")
    organization: OrganizationSimpleWebhooks
    repository: Optional[RepositoryWebhooks] = None
    scope: Scope4 = Field(
        ..., description="The scope of the membership. Currently, can only be `team`."
    )
    sender: Optional[Sender] = Field(..., title="User")
    team: Team2 = Field(
        ...,
        description="Groups of organization members that gives permissions on specified repositories.",
        title="Team",
    )


class Member4(Optional[AnswerChosenBy]):
    pass


class Scope5(Enum):
    team = "team"
    organization = "organization"


class Sender1(Optional[AnswerChosenBy]):
    pass


class Parent6(Optional[Parent5]):
    pass


class Team3(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent6] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    notification_setting: Optional[NotificationSetting] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class WebhookMembershipRemoved(BaseModel):
    action: Action62
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    member: Optional[Member4] = Field(..., title="User")
    organization: OrganizationSimpleWebhooks
    repository: Optional[RepositoryWebhooks] = None
    scope: Scope5 = Field(
        ..., description="The scope of the membership. Currently, can only be `team`."
    )
    sender: Optional[Sender1] = Field(..., title="User")
    team: Team3 = Field(
        ...,
        description="Groups of organization members that gives permissions on specified repositories.",
        title="Team",
    )


class Action98(Enum):
    checks_requested = "checks_requested"


class WebhookMergeGroupChecksRequested(BaseModel):
    action: Action98
    installation: Optional[SimpleInstallation] = None
    merge_group: MergeGroup
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: Optional[RepositoryWebhooks] = None
    sender: Optional[SimpleUserWebhooks] = None


class Action99(Enum):
    destroyed = "destroyed"


class Reason(Enum):
    merged = "merged"
    invalidated = "invalidated"
    dequeued = "dequeued"


class WebhookMergeGroupDestroyed(BaseModel):
    action: Action99
    reason: Optional[Reason] = Field(
        None,
        description="Explains why the merge group is being destroyed. The group could have been merged, removed from the queue (dequeued), or invalidated by an earlier queue entry being dequeued (invalidated).",
    )
    installation: Optional[SimpleInstallation] = None
    merge_group: MergeGroup
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: Optional[RepositoryWebhooks] = None
    sender: Optional[SimpleUserWebhooks] = None


class ContentType(Enum):
    json = "json"
    form = "form"


class Config1(BaseModel):
    content_type: ContentType
    insecure_ssl: str
    secret: Optional[str] = None
    url: AnyUrl


class Event28(Enum):
    field_ = "*"
    branch_protection_rule = "branch_protection_rule"
    check_run = "check_run"
    check_suite = "check_suite"
    code_scanning_alert = "code_scanning_alert"
    commit_comment = "commit_comment"
    create = "create"
    delete = "delete"
    deployment = "deployment"
    deployment_status = "deployment_status"
    deploy_key = "deploy_key"
    discussion = "discussion"
    discussion_comment = "discussion_comment"
    fork = "fork"
    gollum = "gollum"
    issues = "issues"
    issue_comment = "issue_comment"
    label = "label"
    member = "member"
    membership = "membership"
    meta = "meta"
    milestone = "milestone"
    organization = "organization"
    org_block = "org_block"
    package = "package"
    page_build = "page_build"
    project = "project"
    project_card = "project_card"
    project_column = "project_column"
    public = "public"
    pull_request = "pull_request"
    pull_request_review = "pull_request_review"
    pull_request_review_comment = "pull_request_review_comment"
    pull_request_review_thread = "pull_request_review_thread"
    push = "push"
    registry_package = "registry_package"
    release = "release"
    repository = "repository"
    repository_import = "repository_import"
    repository_vulnerability_alert = "repository_vulnerability_alert"
    secret_scanning_alert = "secret_scanning_alert"
    secret_scanning_alert_location = "secret_scanning_alert_location"
    security_and_analysis = "security_and_analysis"
    star = "star"
    status = "status"
    team = "team"
    team_add = "team_add"
    watch = "watch"
    workflow_job = "workflow_job"
    workflow_run = "workflow_run"
    repository_dispatch = "repository_dispatch"
    projects_v2_item = "projects_v2_item"


class Hook1(BaseModel):
    active: bool
    config: Config1
    created_at: str
    events: List[Event28]
    id: int
    name: str
    type: str
    updated_at: str


class WebhookMetaDeleted(BaseModel):
    action: Action3
    enterprise: Optional[EnterpriseWebhooks] = None
    hook: Hook1 = Field(
        ...,
        description="The modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.",
    )
    hook_id: int = Field(..., description="The id of the modified webhook.")
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: Optional[RepositoryWebhooks] = None
    sender: Optional[SimpleUserWebhooks] = None


class Creator26(Optional[Assignee]):
    pass


class Milestone26(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator26] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class WebhookMilestoneClosed(BaseModel):
    action: Action40
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    milestone: Milestone26 = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Creator27(Optional[AnswerChosenBy]):
    pass


class Milestone27(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator27] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class WebhookMilestoneCreated(BaseModel):
    action: Action2
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    milestone: Milestone27 = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Creator28(Optional[Assignee]):
    pass


class Milestone28(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator28] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class WebhookMilestoneDeleted(BaseModel):
    action: Action3
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    milestone: Milestone28 = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class DueOn(BaseModel):
    from_: str = Field(
        ...,
        alias="from",
        description="The previous version of the due date if the action was `edited`.",
    )


class Title2(BaseModel):
    from_: str = Field(
        ...,
        alias="from",
        description="The previous version of the title if the action was `edited`.",
    )


class Changes13(BaseModel):
    description: Optional[Description] = None
    due_on: Optional[DueOn] = None
    title: Optional[Title2] = None


class Creator29(Optional[Assignee]):
    pass


class Milestone29(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator29] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class WebhookMilestoneEdited(BaseModel):
    action: Action4
    changes: Changes13 = Field(
        ..., description="The changes to the milestone if the action was `edited`."
    )
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    milestone: Milestone29 = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Creator30(Optional[AnswerChosenBy]):
    pass


class Milestone30(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator30] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class WebhookMilestoneOpened(BaseModel):
    action: Action77
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    milestone: Milestone30 = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action106(Enum):
    blocked = "blocked"


class BlockedUser(Optional[AnswerChosenBy]):
    pass


class WebhookOrgBlockBlocked(BaseModel):
    action: Action106
    blocked_user: Optional[BlockedUser] = Field(..., title="User")
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: OrganizationSimpleWebhooks
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks


class Action107(Enum):
    unblocked = "unblocked"


class BlockedUser1(Optional[AnswerChosenBy]):
    pass


class WebhookOrgBlockUnblocked(BaseModel):
    action: Action107
    blocked_user: Optional[BlockedUser1] = Field(..., title="User")
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: OrganizationSimpleWebhooks
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks


class User35(Optional[AnswerChosenBy]):
    pass


class Membership(BaseModel):
    organization_url: AnyUrl
    role: str
    state: str
    url: AnyUrl
    user: Optional[User35] = Field(..., title="User")


class WebhookOrganizationDeleted(BaseModel):
    action: Action3
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    membership: Optional[Membership] = Field(
        None,
        description="The membership between the user and the organization. Not present when the action is `member_invited`.",
        title="Membership",
    )
    organization: OrganizationSimpleWebhooks
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks


class Action109(Enum):
    member_added = "member_added"


class User36(Optional[AnswerChosenBy]):
    pass


class Membership1(BaseModel):
    organization_url: AnyUrl
    role: str
    state: str
    url: AnyUrl
    user: Optional[User36] = Field(..., title="User")


class WebhookOrganizationMemberAdded(BaseModel):
    action: Action109
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    membership: Membership1 = Field(
        ...,
        description="The membership between the user and the organization. Not present when the action is `member_invited`.",
        title="Membership",
    )
    organization: OrganizationSimpleWebhooks
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks


class Action110(Enum):
    member_invited = "member_invited"


class Inviter(Optional[AnswerChosenBy]):
    pass


class Invitation(BaseModel):
    created_at: AwareDatetime
    email: Optional[str] = None
    failed_at: Optional[AwareDatetime] = None
    failed_reason: Optional[str] = None
    id: float
    invitation_teams_url: AnyUrl
    inviter: Optional[Inviter] = Field(..., title="User")
    login: Optional[str] = None
    node_id: str
    role: str
    team_count: float
    invitation_source: Optional[str] = None


class User37(Optional[AnswerChosenBy]):
    pass


class WebhookOrganizationMemberInvited(BaseModel):
    action: Action110
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    invitation: Invitation = Field(
        ..., description="The invitation for the user or email if the action is `member_invited`."
    )
    organization: OrganizationSimpleWebhooks
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks
    user: Optional[User37] = Field(None, title="User")


class Action111(Enum):
    member_removed = "member_removed"


class User38(Optional[AnswerChosenBy]):
    pass


class Membership2(BaseModel):
    organization_url: AnyUrl
    role: str
    state: str
    url: AnyUrl
    user: Optional[User38] = Field(..., title="User")


class WebhookOrganizationMemberRemoved(BaseModel):
    action: Action111
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    membership: Membership2 = Field(
        ...,
        description="The membership between the user and the organization. Not present when the action is `member_invited`.",
        title="Membership",
    )
    organization: OrganizationSimpleWebhooks
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks


class Login1(BaseModel):
    from_: Optional[str] = Field(None, alias="from")


class Changes14(BaseModel):
    login: Optional[Login1] = None


class User39(Optional[AnswerChosenBy]):
    pass


class Membership3(BaseModel):
    organization_url: AnyUrl
    role: str
    state: str
    url: AnyUrl
    user: Optional[User39] = Field(..., title="User")


class WebhookOrganizationRenamed(BaseModel):
    action: Action64
    changes: Optional[Changes14] = None
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    membership: Optional[Membership3] = Field(
        None,
        description="The membership between the user and the organization. Not present when the action is `member_invited`.",
        title="Membership",
    )
    organization: OrganizationSimpleWebhooks
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks


class VersionInfo(BaseModel):
    version: Optional[str] = None


class WebhookRubygemsMetadata(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    readme: Optional[str] = None
    homepage: Optional[str] = None
    version_info: Optional[VersionInfo] = None
    platform: Optional[str] = None
    metadata: Optional[Dict[str, str]] = None
    repo: Optional[str] = None
    dependencies: Optional[List[Dict[str, str]]] = None
    commit_oid: Optional[str] = None


class Action113(Enum):
    published = "published"


class Owner45(Optional[AnswerChosenBy]):
    pass


class Author8(Optional[AnswerChosenBy]):
    pass


class Tag1(BaseModel):
    digest: Optional[str] = None
    name: Optional[str] = None


class ContainerMetadata(BaseModel):
    labels: Optional[Dict[str, Any]] = None
    manifest: Optional[Dict[str, Any]] = None
    tag: Optional[Tag1] = None


class DockerMetadatum(BaseModel):
    tags: Optional[List[str]] = None


class NpmMetadata(BaseModel):
    name: Optional[str] = None
    version: Optional[str] = None
    npm_user: Optional[str] = None
    author: Optional[Dict[str, Any]] = None
    bugs: Optional[Dict[str, Any]] = None
    dependencies: Optional[Dict[str, Any]] = None
    dev_dependencies: Optional[Dict[str, Any]] = None
    peer_dependencies: Optional[Dict[str, Any]] = None
    optional_dependencies: Optional[Dict[str, Any]] = None
    description: Optional[str] = None
    dist: Optional[Dict[str, Any]] = None
    git_head: Optional[str] = None
    homepage: Optional[str] = None
    license: Optional[str] = None
    main: Optional[str] = None
    repository: Optional[Dict[str, Any]] = None
    scripts: Optional[Dict[str, Any]] = None
    id: Optional[str] = None
    node_version: Optional[str] = None
    npm_version: Optional[str] = None
    has_shrinkwrap: Optional[bool] = None
    maintainers: Optional[List[Dict[str, Any]]] = None
    contributors: Optional[List[Dict[str, Any]]] = None
    engines: Optional[Dict[str, Any]] = None
    keywords: Optional[List[str]] = None
    files: Optional[List[str]] = None
    bin: Optional[Dict[str, Any]] = None
    man: Optional[Dict[str, Any]] = None
    directories: Optional[Dict[str, Any]] = None
    os: Optional[List[str]] = None
    cpu: Optional[List[str]] = None
    readme: Optional[str] = None
    installation_command: Optional[str] = None
    release_id: Optional[int] = None
    commit_oid: Optional[str] = None
    published_via_actions: Optional[bool] = None
    deleted_by_id: Optional[int] = None


class Value(BaseModel):
    url: Optional[str] = None
    branch: Optional[str] = None
    commit: Optional[str] = None
    type: Optional[str] = None


class NugetMetadatum(BaseModel):
    id: Optional[Union[int, str]] = None
    name: Optional[str] = None
    value: Optional[Union[bool, str, int, Value]] = None


class PackageFile(BaseModel):
    content_type: str
    created_at: str
    download_url: AnyUrl
    id: int
    md5: Optional[str] = None
    name: str
    sha1: Optional[str] = None
    sha256: Optional[str] = None
    size: int
    state: Optional[str] = None
    updated_at: str


class Author9(Optional[AnswerChosenBy]):
    pass


class Release1(BaseModel):
    author: Optional[Author9] = Field(..., title="User")
    created_at: str
    draft: bool
    html_url: AnyUrl
    id: int
    name: Optional[str] = None
    prerelease: bool
    published_at: str
    tag_name: str
    target_commitish: str
    url: AnyUrl


class PackageVersion1(BaseModel):
    author: Optional[Author8] = Field(None, title="User")
    body: Optional[Union[str, Dict[str, Any]]] = None
    body_html: Optional[str] = None
    container_metadata: Optional[ContainerMetadata] = None
    created_at: Optional[str] = None
    description: str
    docker_metadata: Optional[List[DockerMetadatum]] = None
    draft: Optional[bool] = None
    html_url: AnyUrl
    id: int
    installation_command: str
    manifest: Optional[str] = None
    metadata: List[Dict[str, Any]]
    name: str
    npm_metadata: Optional[NpmMetadata] = None
    nuget_metadata: Optional[List[NugetMetadatum]] = None
    package_files: List[PackageFile]
    package_url: Optional[str] = None
    prerelease: Optional[bool] = None
    release: Optional[Release1] = None
    rubygems_metadata: Optional[List[WebhookRubygemsMetadata]] = None
    source_url: Optional[str] = None
    summary: str
    tag_name: Optional[str] = None
    target_commitish: Optional[str] = None
    target_oid: Optional[str] = None
    updated_at: Optional[str] = None
    version: str


class Registry(BaseModel):
    about_url: AnyUrl
    name: str
    type: str
    url: AnyUrl
    vendor: str


class Package7(BaseModel):
    created_at: Optional[str] = None
    description: Optional[str] = None
    ecosystem: str
    html_url: AnyUrl
    id: int
    name: str
    namespace: str
    owner: Optional[Owner45] = Field(..., title="User")
    package_type: str
    package_version: Optional[PackageVersion1] = None
    registry: Optional[Registry] = None
    updated_at: Optional[str] = None


class WebhookPackagePublished(BaseModel):
    action: Action113
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    package: Package7 = Field(..., description="Information about the package.")
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks


class Owner46(Optional[AnswerChosenBy]):
    pass


class Author10(Optional[AnswerChosenBy]):
    pass


class PackageFile1(BaseModel):
    content_type: str
    created_at: str
    download_url: AnyUrl
    id: int
    md5: Optional[str] = None
    name: str
    sha1: Optional[str] = None
    sha256: str
    size: int
    state: str
    updated_at: str


class Author11(Optional[AnswerChosenBy]):
    pass


class Release2(BaseModel):
    author: Optional[Author11] = Field(..., title="User")
    created_at: str
    draft: bool
    html_url: AnyUrl
    id: int
    name: str
    prerelease: bool
    published_at: str
    tag_name: str
    target_commitish: str
    url: AnyUrl


class PackageVersion2(BaseModel):
    author: Optional[Author10] = Field(..., title="User")
    body: str
    body_html: str
    created_at: str
    description: str
    docker_metadata: Optional[List[DockerMetadatum]] = None
    draft: Optional[bool] = None
    html_url: AnyUrl
    id: int
    installation_command: str
    manifest: Optional[str] = None
    metadata: List[Dict[str, Any]]
    name: str
    package_files: List[PackageFile1]
    package_url: Optional[str] = None
    prerelease: Optional[bool] = None
    release: Optional[Release2] = None
    rubygems_metadata: Optional[List[WebhookRubygemsMetadata]] = None
    source_url: Optional[AnyUrl] = None
    summary: str
    tag_name: Optional[str] = None
    target_commitish: str
    target_oid: str
    updated_at: str
    version: str


class Package8(BaseModel):
    created_at: str
    description: Optional[str] = None
    ecosystem: str
    html_url: AnyUrl
    id: int
    name: str
    namespace: str
    owner: Optional[Owner46] = Field(..., title="User")
    package_type: str
    package_version: PackageVersion2
    registry: Optional[Registry] = None
    updated_at: str


class WebhookPackageUpdated(BaseModel):
    action: Action21
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    package: Package8 = Field(..., description="Information about the package.")
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Pusher(Optional[AnswerChosenBy]):
    pass


class Build(BaseModel):
    commit: Optional[str] = None
    created_at: str
    duration: int
    error: Error2
    pusher: Optional[Pusher] = Field(..., title="User")
    status: str
    updated_at: str
    url: AnyUrl


class WebhookPageBuild(BaseModel):
    build: Build = Field(
        ...,
        description="The [List GitHub Pages builds](https://docs.github.com/rest/pages/pages#list-github-pages-builds) itself.",
    )
    enterprise: Optional[EnterpriseWebhooks] = None
    id: int
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class WebhookPersonalAccessTokenRequestApproved(BaseModel):
    action: Action34
    personal_access_token_request: PersonalAccessTokenRequest
    organization: OrganizationSimpleWebhooks
    sender: SimpleUserWebhooks
    installation: SimpleInstallation


class WebhookPersonalAccessTokenRequestCancelled(BaseModel):
    action: Action88
    personal_access_token_request: PersonalAccessTokenRequest
    organization: OrganizationSimpleWebhooks
    sender: SimpleUserWebhooks
    installation: SimpleInstallation


class WebhookPersonalAccessTokenRequestCreated(BaseModel):
    action: Action2
    personal_access_token_request: PersonalAccessTokenRequest
    organization: OrganizationSimpleWebhooks
    sender: SimpleUserWebhooks
    installation: SimpleInstallation


class Action118(Enum):
    denied = "denied"


class WebhookPersonalAccessTokenRequestDenied(BaseModel):
    action: Action118
    personal_access_token_request: PersonalAccessTokenRequest
    organization: OrganizationSimpleWebhooks
    sender: SimpleUserWebhooks
    installation: SimpleInstallation


class Config2(BaseModel):
    content_type: Optional[WebhookConfigContentType] = None
    insecure_ssl: Optional[WebhookConfigInsecureSsl] = None
    secret: Optional[WebhookConfigSecret] = None
    url: Optional[WebhookConfigUrl] = None


class Name1(Enum):
    web = "web"


class Hook2(BaseModel):
    active: bool = Field(
        ...,
        description="Determines whether the hook is actually triggered for the events it subscribes to.",
    )
    app_id: Optional[int] = Field(
        None,
        description="Only included for GitHub Apps. When you register a new GitHub App, GitHub sends a ping event to the webhook URL you specified during registration. The GitHub App ID sent in this field is required for authenticating an app.",
    )
    config: Config2
    created_at: AwareDatetime
    deliveries_url: Optional[AnyUrl] = None
    events: List[str] = Field(
        ..., description="Determines what events the hook is triggered for. Default: ['push']."
    )
    id: int = Field(..., description="Unique identifier of the webhook.")
    last_response: Optional[HookResponse] = None
    name: Name1 = Field(..., description="The type of webhook. The only valid value is 'web'.")
    ping_url: Optional[AnyUrl] = None
    test_url: Optional[AnyUrl] = None
    type: str
    updated_at: AwareDatetime
    url: Optional[AnyUrl] = None


class WebhookPing(BaseModel):
    hook: Optional[Hook2] = Field(
        None, description="The webhook that is being pinged", title="Webhook"
    )
    hook_id: Optional[int] = Field(
        None, description="The ID of the webhook that triggered the ping."
    )
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: Optional[RepositoryWebhooks] = None
    sender: Optional[SimpleUserWebhooks] = None
    zen: Optional[str] = Field(None, description="Random string of GitHub zen.")


class WebhookPingFormEncoded(BaseModel):
    payload: str = Field(
        ...,
        description="A URL-encoded string of the ping JSON payload. The decoded payload is a JSON object.",
    )


class Action119(Enum):
    converted = "converted"


class Note(Body):
    pass


class Changes15(BaseModel):
    note: Note


class Creator31(Optional[AnswerChosenBy]):
    pass


class ProjectCard5(BaseModel):
    after_id: Optional[int] = None
    archived: bool = Field(..., description="Whether or not the card is archived")
    column_id: int
    column_url: AnyUrl
    content_url: Optional[AnyUrl] = None
    created_at: AwareDatetime
    creator: Optional[Creator31] = Field(..., title="User")
    id: int = Field(..., description="The project card's ID")
    node_id: str
    note: Optional[str] = None
    project_url: AnyUrl
    updated_at: AwareDatetime
    url: AnyUrl


class WebhookProjectCardConverted(BaseModel):
    action: Action119
    changes: Changes15
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    project_card: ProjectCard5 = Field(..., title="Project Card")
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks


class Creator32(Optional[AnswerChosenBy]):
    pass


class ProjectCard6(BaseModel):
    after_id: Optional[int] = None
    archived: bool = Field(..., description="Whether or not the card is archived")
    column_id: int
    column_url: AnyUrl
    content_url: Optional[AnyUrl] = None
    created_at: AwareDatetime
    creator: Optional[Creator32] = Field(..., title="User")
    id: int = Field(..., description="The project card's ID")
    node_id: str
    note: Optional[str] = None
    project_url: AnyUrl
    updated_at: AwareDatetime
    url: AnyUrl


class WebhookProjectCardCreated(BaseModel):
    action: Action2
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    project_card: ProjectCard6 = Field(..., title="Project Card")
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks


class Creator33(Optional[Assignee]):
    pass


class ProjectCard7(BaseModel):
    after_id: Optional[int] = None
    archived: bool = Field(..., description="Whether or not the card is archived")
    column_id: Optional[int] = None
    column_url: AnyUrl
    content_url: Optional[AnyUrl] = None
    created_at: AwareDatetime
    creator: Optional[Creator33] = Field(..., title="User")
    id: int = Field(..., description="The project card's ID")
    node_id: str
    note: Optional[str] = None
    project_url: AnyUrl
    updated_at: AwareDatetime
    url: AnyUrl


class WebhookProjectCardDeleted(BaseModel):
    action: Action3
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    project_card: ProjectCard7 = Field(..., title="Project Card")
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks


class Note1(BaseModel):
    from_: Optional[str] = Field(..., alias="from")


class Changes16(BaseModel):
    note: Note1


class Creator34(Optional[AnswerChosenBy]):
    pass


class ProjectCard8(BaseModel):
    after_id: Optional[int] = None
    archived: bool = Field(..., description="Whether or not the card is archived")
    column_id: int
    column_url: AnyUrl
    content_url: Optional[AnyUrl] = None
    created_at: AwareDatetime
    creator: Optional[Creator34] = Field(..., title="User")
    id: int = Field(..., description="The project card's ID")
    node_id: str
    note: Optional[str] = None
    project_url: AnyUrl
    updated_at: AwareDatetime
    url: AnyUrl


class WebhookProjectCardEdited(BaseModel):
    action: Action4
    changes: Changes16
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    project_card: ProjectCard8 = Field(..., title="Project Card")
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks


class Action123(Enum):
    moved = "moved"


class ColumnId(BaseModel):
    from_: int = Field(..., alias="from")


class Changes17(BaseModel):
    column_id: ColumnId


class Creator35(Owner9):
    pass


class ProjectCard9(BaseModel):
    after_id: Optional[int] = None
    archived: bool = Field(..., description="Whether or not the card is archived")
    column_id: int
    column_url: AnyUrl
    content_url: Optional[AnyUrl] = None
    created_at: AwareDatetime
    creator: Optional[Creator35] = Field(..., title="User")
    id: int = Field(..., description="The project card's ID")
    node_id: str
    note: Optional[str] = None
    project_url: AnyUrl
    updated_at: AwareDatetime
    url: AnyUrl


class WebhookProjectCardMoved(BaseModel):
    action: Action123
    changes: Optional[Changes17] = None
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    project_card: ProjectCard9
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks


class Creator36(Optional[AnswerChosenBy]):
    pass


class Project1(BaseModel):
    body: Optional[str] = Field(..., description="Body of the project")
    columns_url: AnyUrl
    created_at: AwareDatetime
    creator: Optional[Creator36] = Field(..., title="User")
    html_url: AnyUrl
    id: int
    name: str = Field(..., description="Name of the project")
    node_id: str
    number: int
    owner_url: AnyUrl
    state: State1 = Field(..., description="State of the project; either 'open' or 'closed'")
    updated_at: AwareDatetime
    url: AnyUrl


class WebhookProjectClosed(BaseModel):
    action: Action40
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    project: Project1 = Field(..., title="Project")
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks


class ProjectColumn1(BaseModel):
    after_id: Optional[int] = None
    cards_url: AnyUrl
    created_at: AwareDatetime
    id: int = Field(..., description="The unique identifier of the project column")
    name: str = Field(..., description="Name of the project column")
    node_id: str
    project_url: AnyUrl
    updated_at: AwareDatetime
    url: AnyUrl


class WebhookProjectColumnCreated(BaseModel):
    action: Action2
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    project_column: ProjectColumn1 = Field(..., title="Project Column")
    repository: Optional[RepositoryWebhooks] = None
    sender: Optional[SimpleUserWebhooks] = None


class WebhookProjectColumnDeleted(BaseModel):
    action: Action3
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    project_column: ProjectColumn1 = Field(..., title="Project Column")
    repository: Optional[RepositoryWebhooks] = None
    sender: Optional[SimpleUserWebhooks] = None


class Name2(Body):
    pass


class Changes18(BaseModel):
    name: Optional[Name2] = None


class WebhookProjectColumnEdited(BaseModel):
    action: Action4
    changes: Changes18
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    project_column: ProjectColumn1 = Field(..., title="Project Column")
    repository: Optional[RepositoryWebhooks] = None
    sender: Optional[SimpleUserWebhooks] = None


class WebhookProjectColumnMoved(BaseModel):
    action: Action123
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    project_column: ProjectColumn1 = Field(..., title="Project Column")
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks


class Creator37(Optional[AnswerChosenBy]):
    pass


class Project2(BaseModel):
    body: Optional[str] = Field(..., description="Body of the project")
    columns_url: AnyUrl
    created_at: AwareDatetime
    creator: Optional[Creator37] = Field(..., title="User")
    html_url: AnyUrl
    id: int
    name: str = Field(..., description="Name of the project")
    node_id: str
    number: int
    owner_url: AnyUrl
    state: State1 = Field(..., description="State of the project; either 'open' or 'closed'")
    updated_at: AwareDatetime
    url: AnyUrl


class WebhookProjectCreated(BaseModel):
    action: Action2
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    project: Project2 = Field(..., title="Project")
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks


class Creator38(Optional[AnswerChosenBy]):
    pass


class Project3(BaseModel):
    body: Optional[str] = Field(..., description="Body of the project")
    columns_url: AnyUrl
    created_at: AwareDatetime
    creator: Optional[Creator38] = Field(..., title="User")
    html_url: AnyUrl
    id: int
    name: str = Field(..., description="Name of the project")
    node_id: str
    number: int
    owner_url: AnyUrl
    state: State1 = Field(..., description="State of the project; either 'open' or 'closed'")
    updated_at: AwareDatetime
    url: AnyUrl


class WebhookProjectDeleted(BaseModel):
    action: Action3
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    project: Project3 = Field(..., title="Project")
    repository: Optional[RepositoryWebhooks] = None
    sender: Optional[SimpleUserWebhooks] = None


class Body4(BaseModel):
    from_: str = Field(
        ...,
        alias="from",
        description="The previous version of the body if the action was `edited`.",
    )


class Name3(BaseModel):
    from_: str = Field(
        ..., alias="from", description="The changes to the project if the action was `edited`."
    )


class Changes19(BaseModel):
    body: Optional[Body4] = None
    name: Optional[Name3] = None


class Creator39(Optional[AnswerChosenBy]):
    pass


class Project4(BaseModel):
    body: Optional[str] = Field(..., description="Body of the project")
    columns_url: AnyUrl
    created_at: AwareDatetime
    creator: Optional[Creator39] = Field(..., title="User")
    html_url: AnyUrl
    id: int
    name: str = Field(..., description="Name of the project")
    node_id: str
    number: int
    owner_url: AnyUrl
    state: State1 = Field(..., description="State of the project; either 'open' or 'closed'")
    updated_at: AwareDatetime
    url: AnyUrl


class WebhookProjectEdited(BaseModel):
    action: Action4
    changes: Optional[Changes19] = Field(
        None, description="The changes to the project if the action was `edited`."
    )
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    project: Project4 = Field(..., title="Project")
    repository: Optional[RepositoryWebhooks] = None
    sender: Optional[SimpleUserWebhooks] = None


class Creator40(Optional[AnswerChosenBy]):
    pass


class Project5(BaseModel):
    body: Optional[str] = Field(..., description="Body of the project")
    columns_url: AnyUrl
    created_at: AwareDatetime
    creator: Optional[Creator40] = Field(..., title="User")
    html_url: AnyUrl
    id: int
    name: str = Field(..., description="Name of the project")
    node_id: str
    number: int
    owner_url: AnyUrl
    state: State1 = Field(..., description="State of the project; either 'open' or 'closed'")
    updated_at: AwareDatetime
    url: AnyUrl


class WebhookProjectReopened(BaseModel):
    action: Action16
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    project: Project5 = Field(..., title="Project")
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks


class WebhookProjectsV2ProjectClosed(BaseModel):
    action: Action40
    installation: Optional[SimpleInstallation] = None
    organization: OrganizationSimpleWebhooks
    projects_v2: ProjectsV2
    sender: SimpleUserWebhooks


class WebhookProjectsV2ProjectCreated(BaseModel):
    action: Action2
    installation: Optional[SimpleInstallation] = None
    organization: OrganizationSimpleWebhooks
    projects_v2: ProjectsV2
    sender: SimpleUserWebhooks


class WebhookProjectsV2ProjectDeleted(BaseModel):
    action: Action3
    installation: Optional[SimpleInstallation] = None
    organization: OrganizationSimpleWebhooks
    projects_v2: ProjectsV2
    sender: SimpleUserWebhooks


class Description2(Permission1):
    pass


class Public(BaseModel):
    from_: Optional[bool] = Field(None, alias="from")
    to: Optional[bool] = None


class ShortDescription(Permission1):
    pass


class Title3(BaseModel):
    from_: Optional[str] = Field(None, alias="from")
    to: Optional[str] = None


class Changes20(BaseModel):
    description: Optional[Description2] = None
    public: Optional[Public] = None
    short_description: Optional[ShortDescription] = None
    title: Optional[Title3] = None


class WebhookProjectsV2ProjectEdited(BaseModel):
    action: Action4
    changes: Changes20
    installation: Optional[SimpleInstallation] = None
    organization: OrganizationSimpleWebhooks
    projects_v2: ProjectsV2
    sender: SimpleUserWebhooks


class Action137(Enum):
    archived = "archived"


class ArchivedAt(BaseModel):
    from_: Optional[AwareDatetime] = Field(None, alias="from")
    to: Optional[AwareDatetime] = None


class Changes21(BaseModel):
    archived_at: Optional[ArchivedAt] = None


class WebhookProjectsV2ItemArchived(BaseModel):
    action: Action137
    changes: Changes21
    installation: Optional[SimpleInstallation] = None
    organization: OrganizationSimpleWebhooks
    projects_v2_item: ProjectsV2Item
    sender: SimpleUserWebhooks


class ContentType1(BaseModel):
    from_: Optional[str] = Field(None, alias="from")
    to: Optional[str] = None


class Changes22(BaseModel):
    content_type: Optional[ContentType1] = None


class WebhookProjectsV2ItemConverted(BaseModel):
    action: Action119
    changes: Changes22
    installation: Optional[SimpleInstallation] = None
    organization: OrganizationSimpleWebhooks
    projects_v2_item: ProjectsV2Item
    sender: SimpleUserWebhooks


class WebhookProjectsV2ItemCreated(BaseModel):
    action: Action2
    installation: Optional[SimpleInstallation] = None
    organization: OrganizationSimpleWebhooks
    projects_v2_item: ProjectsV2Item
    sender: SimpleUserWebhooks


class WebhookProjectsV2ItemDeleted(BaseModel):
    action: Action3
    installation: Optional[SimpleInstallation] = None
    organization: OrganizationSimpleWebhooks
    projects_v2_item: ProjectsV2Item
    sender: SimpleUserWebhooks


class FieldValue(BaseModel):
    field_node_id: Optional[str] = None
    field_type: Optional[str] = None


class Changes23(BaseModel):
    field_value: FieldValue


class Body5(Permission1):
    pass


class Changes24(BaseModel):
    body: Body5


class WebhookProjectsV2ItemEdited(BaseModel):
    action: Action4
    changes: Optional[Union[Changes23, Changes24]] = None
    installation: Optional[SimpleInstallation] = None
    organization: OrganizationSimpleWebhooks
    projects_v2_item: ProjectsV2Item
    sender: SimpleUserWebhooks


class Action142(Enum):
    reordered = "reordered"


class PreviousProjectsV2ItemNodeId(Permission1):
    pass


class Changes25(BaseModel):
    previous_projects_v2_item_node_id: Optional[PreviousProjectsV2ItemNodeId] = None


class WebhookProjectsV2ItemReordered(BaseModel):
    action: Action142
    changes: Changes25
    installation: Optional[SimpleInstallation] = None
    organization: OrganizationSimpleWebhooks
    projects_v2_item: ProjectsV2Item
    sender: SimpleUserWebhooks


class Action143(Enum):
    restored = "restored"


class Changes26(Changes21):
    pass


class WebhookProjectsV2ItemRestored(BaseModel):
    action: Action143
    changes: Changes26
    installation: Optional[SimpleInstallation] = None
    organization: OrganizationSimpleWebhooks
    projects_v2_item: ProjectsV2Item
    sender: SimpleUserWebhooks


class WebhookProjectsV2ProjectReopened(BaseModel):
    action: Action16
    installation: Optional[SimpleInstallation] = None
    organization: OrganizationSimpleWebhooks
    projects_v2: ProjectsV2
    sender: SimpleUserWebhooks


class WebhookPublic(BaseModel):
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Assignee44(Optional[AnswerChosenBy]):
    pass


class Comments(Link):
    pass


class Commits(Link):
    pass


class Issue20(Link):
    pass


class ReviewComment1(Link):
    pass


class ReviewComments(Link):
    pass


class Self2(Link):
    pass


class Statuses28(Link):
    pass


class FieldLinks17(BaseModel):
    comments: Comments = Field(..., title="Link")
    commits: Commits = Field(..., title="Link")
    html: Html3 = Field(..., title="Link")
    issue: Issue20 = Field(..., title="Link")
    review_comment: ReviewComment1 = Field(..., title="Link")
    review_comments: ReviewComments = Field(..., title="Link")
    self: Self2 = Field(..., title="Link")
    statuses: Statuses28 = Field(..., title="Link")


class Assignee45(Optional[Assignee]):
    pass


class Assignee46(Optional[Assignee]):
    pass


class EnabledBy(Optional[AnswerChosenBy]):
    pass


class AutoMerge1(BaseModel):
    commit_message: Optional[str] = Field(..., description="Commit message for the merge commit.")
    commit_title: Optional[str] = Field(..., description="Title for the merge commit message.")
    enabled_by: Optional[EnabledBy] = Field(..., title="User")
    merge_method: MergeMethod = Field(..., description="The merge method to use.")


class Owner47(Optional[AnswerChosenBy]):
    pass


class Permissions49(Permissions25):
    pass


class Repo21(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner47] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User40(Optional[AnswerChosenBy]):
    pass


class Base11(BaseModel):
    label: str
    ref: str
    repo: Repo21 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User40] = Field(..., title="User")


class Owner48(Optional[AnswerChosenBy]):
    pass


class Repo22(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner48] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User41(Optional[AnswerChosenBy]):
    pass


class Head11(BaseModel):
    label: Optional[str] = None
    ref: str
    repo: Optional[Repo22] = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User41] = Field(..., title="User")


class MergedBy(Optional[AnswerChosenBy]):
    pass


class Creator41(Optional[Assignee]):
    pass


class Milestone31(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator41] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class RequestedReviewers(Optional[Assignee]):
    pass


class Parent7(BaseModel):
    description: Optional[str] = Field(..., description="Description of the team")
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the team")
    members_url: str
    name: str = Field(..., description="Name of the team")
    node_id: str
    permission: str = Field(
        ..., description="Permission that the team will have for its repositories"
    )
    privacy: Privacy1
    repositories_url: AnyUrl
    slug: str
    url: AnyUrl = Field(..., description="URL for the team")


class RequestedReviewers1(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(..., description="Description of the team")
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the team")
    members_url: str
    name: str = Field(..., description="Name of the team")
    node_id: str
    parent: Optional[Parent7] = None
    permission: str = Field(
        ..., description="Permission that the team will have for its repositories"
    )
    privacy: Privacy1
    repositories_url: AnyUrl
    slug: str
    url: AnyUrl = Field(..., description="URL for the team")


class Parent8(Optional[Parent7]):
    pass


class RequestedTeam(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent8] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class User42(Optional[Assignee]):
    pass


class PullRequest35(BaseModel):
    field_links: FieldLinks17 = Field(..., alias="_links")
    active_lock_reason: ActiveLockReason
    additions: Optional[int] = None
    assignee: Optional[Assignee45] = Field(..., title="User")
    assignees: List[Optional[Assignee46]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    auto_merge: Optional[AutoMerge1] = Field(
        ..., description="The status of auto merging a pull request.", title="PullRequestAutoMerge"
    )
    base: Base11
    body: Optional[str] = None
    changed_files: Optional[int] = None
    closed_at: Optional[AwareDatetime] = None
    comments: Optional[int] = None
    comments_url: AnyUrl
    commits: Optional[int] = None
    commits_url: AnyUrl
    created_at: AwareDatetime
    deletions: Optional[int] = None
    diff_url: AnyUrl
    draft: bool = Field(..., description="Indicates whether or not the pull request is a draft.")
    head: Head11
    html_url: AnyUrl
    id: int
    issue_url: AnyUrl
    labels: List[Label6]
    locked: bool
    maintainer_can_modify: Optional[bool] = Field(
        None, description="Indicates whether maintainers can modify the pull request."
    )
    merge_commit_sha: Optional[str] = None
    mergeable: Optional[bool] = None
    mergeable_state: Optional[str] = None
    merged: Optional[bool] = None
    merged_at: Optional[AwareDatetime] = None
    merged_by: Optional[MergedBy] = Field(None, title="User")
    milestone: Optional[Milestone31] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int = Field(
        ..., description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: AnyUrl
    rebaseable: Optional[bool] = None
    requested_reviewers: List[Union[Optional[RequestedReviewers], RequestedReviewers1]]
    requested_teams: List[RequestedTeam]
    review_comment_url: str
    review_comments: Optional[int] = None
    review_comments_url: AnyUrl
    state: State1 = Field(..., description="State of this Pull Request. Either `open` or `closed`.")
    statuses_url: AnyUrl
    title: str = Field(..., description="The title of the pull request.")
    updated_at: AwareDatetime
    url: AnyUrl
    user: Optional[User42] = Field(..., title="User")


class WebhookPullRequestAssigned(BaseModel):
    action: Action69
    assignee: Optional[Assignee44] = Field(..., title="User")
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    number: int = Field(..., description="The pull request number.")
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest35 = Field(..., title="Pull Request")
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action146(Enum):
    auto_merge_disabled = "auto_merge_disabled"


class FieldLinks18(FieldLinks17):
    pass


class Assignee47(Optional[AnswerChosenBy]):
    pass


class Assignee48(Optional[AnswerChosenBy]):
    pass


class EnabledBy1(Optional[AnswerChosenBy]):
    pass


class AutoMerge2(BaseModel):
    commit_message: Optional[str] = Field(..., description="Commit message for the merge commit.")
    commit_title: Optional[str] = Field(..., description="Title for the merge commit message.")
    enabled_by: Optional[EnabledBy1] = Field(..., title="User")
    merge_method: MergeMethod = Field(..., description="The merge method to use.")


class Owner49(Optional[AnswerChosenBy]):
    pass


class Repo23(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner49] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User43(Optional[AnswerChosenBy]):
    pass


class Base12(BaseModel):
    label: str
    ref: str
    repo: Repo23 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User43] = Field(..., title="User")


class Owner50(Optional[AnswerChosenBy]):
    pass


class Repo24(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner50] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User44(Optional[AnswerChosenBy]):
    pass


class Head12(BaseModel):
    label: str
    ref: str
    repo: Repo24 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User44] = Field(..., title="User")


class MergedBy1(Optional[AnswerChosenBy]):
    pass


class Creator42(Optional[AnswerChosenBy]):
    pass


class Milestone32(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator42] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class RequestedReviewers2(Optional[Assignee]):
    pass


class Parent9(Optional[Parent7]):
    pass


class RequestedReviewers3(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(..., description="Description of the team")
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the team")
    members_url: str
    name: str = Field(..., description="Name of the team")
    node_id: str
    parent: Optional[Parent9] = None
    permission: str = Field(
        ..., description="Permission that the team will have for its repositories"
    )
    privacy: Privacy1
    repositories_url: AnyUrl
    slug: str
    url: AnyUrl = Field(..., description="URL for the team")


class Parent10(Optional[Parent7]):
    pass


class RequestedTeam1(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent10] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class User45(Optional[Assignee]):
    pass


class PullRequest36(BaseModel):
    field_links: FieldLinks18 = Field(..., alias="_links")
    active_lock_reason: ActiveLockReason
    additions: Optional[int] = None
    assignee: Optional[Assignee47] = Field(..., title="User")
    assignees: List[Optional[Assignee48]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    auto_merge: Optional[AutoMerge2] = Field(
        ..., description="The status of auto merging a pull request.", title="PullRequestAutoMerge"
    )
    base: Base12
    body: Optional[str] = None
    changed_files: Optional[int] = None
    closed_at: Optional[AwareDatetime] = None
    comments: Optional[int] = None
    comments_url: AnyUrl
    commits: Optional[int] = None
    commits_url: AnyUrl
    created_at: AwareDatetime
    deletions: Optional[int] = None
    diff_url: AnyUrl
    draft: bool = Field(..., description="Indicates whether or not the pull request is a draft.")
    head: Head12
    html_url: AnyUrl
    id: int
    issue_url: AnyUrl
    labels: List[Label6]
    locked: bool
    maintainer_can_modify: Optional[bool] = Field(
        None, description="Indicates whether maintainers can modify the pull request."
    )
    merge_commit_sha: Optional[str] = None
    mergeable: Optional[bool] = None
    mergeable_state: Optional[str] = None
    merged: Optional[bool] = None
    merged_at: Optional[AwareDatetime] = None
    merged_by: Optional[MergedBy1] = Field(None, title="User")
    milestone: Optional[Milestone32] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int = Field(
        ..., description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: AnyUrl
    rebaseable: Optional[bool] = None
    requested_reviewers: List[Union[Optional[RequestedReviewers2], RequestedReviewers3]]
    requested_teams: List[RequestedTeam1]
    review_comment_url: str
    review_comments: Optional[int] = None
    review_comments_url: AnyUrl
    state: State1 = Field(..., description="State of this Pull Request. Either `open` or `closed`.")
    statuses_url: AnyUrl
    title: str = Field(..., description="The title of the pull request.")
    updated_at: AwareDatetime
    url: AnyUrl
    user: Optional[User45] = Field(..., title="User")


class WebhookPullRequestAutoMergeDisabled(BaseModel):
    action: Action146
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    number: int
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest36 = Field(..., title="Pull Request")
    reason: str
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action147(Enum):
    auto_merge_enabled = "auto_merge_enabled"


class FieldLinks19(FieldLinks17):
    pass


class Assignee49(Optional[AnswerChosenBy]):
    pass


class Assignee50(Optional[AnswerChosenBy]):
    pass


class EnabledBy2(Optional[AnswerChosenBy]):
    pass


class AutoMerge3(BaseModel):
    commit_message: Optional[str] = Field(..., description="Commit message for the merge commit.")
    commit_title: Optional[str] = Field(..., description="Title for the merge commit message.")
    enabled_by: Optional[EnabledBy2] = Field(..., title="User")
    merge_method: MergeMethod = Field(..., description="The merge method to use.")


class Owner51(Optional[AnswerChosenBy]):
    pass


class Repo25(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner51] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User46(Optional[AnswerChosenBy]):
    pass


class Base13(BaseModel):
    label: str
    ref: str
    repo: Repo25 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User46] = Field(..., title="User")


class Owner52(Optional[AnswerChosenBy]):
    pass


class Repo26(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner52] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User47(Optional[AnswerChosenBy]):
    pass


class Head13(BaseModel):
    label: str
    ref: str
    repo: Repo26 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User47] = Field(..., title="User")


class MergedBy2(Optional[AnswerChosenBy]):
    pass


class Creator43(Optional[Assignee]):
    pass


class Milestone33(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator43] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class RequestedReviewers4(Optional[Assignee]):
    pass


class Parent11(Optional[Parent7]):
    pass


class RequestedReviewers5(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(..., description="Description of the team")
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the team")
    members_url: str
    name: str = Field(..., description="Name of the team")
    node_id: str
    parent: Optional[Parent11] = None
    permission: str = Field(
        ..., description="Permission that the team will have for its repositories"
    )
    privacy: Privacy1
    repositories_url: AnyUrl
    slug: str
    url: AnyUrl = Field(..., description="URL for the team")


class Parent12(Optional[Parent7]):
    pass


class RequestedTeam2(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent12] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class User48(Optional[Assignee]):
    pass


class PullRequest37(BaseModel):
    field_links: FieldLinks19 = Field(..., alias="_links")
    active_lock_reason: ActiveLockReason
    additions: Optional[int] = None
    assignee: Optional[Assignee49] = Field(..., title="User")
    assignees: List[Optional[Assignee50]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    auto_merge: Optional[AutoMerge3] = Field(
        ..., description="The status of auto merging a pull request.", title="PullRequestAutoMerge"
    )
    base: Base13
    body: Optional[str] = None
    changed_files: Optional[int] = None
    closed_at: Optional[AwareDatetime] = None
    comments: Optional[int] = None
    comments_url: AnyUrl
    commits: Optional[int] = None
    commits_url: AnyUrl
    created_at: AwareDatetime
    deletions: Optional[int] = None
    diff_url: AnyUrl
    draft: bool = Field(..., description="Indicates whether or not the pull request is a draft.")
    head: Head13
    html_url: AnyUrl
    id: int
    issue_url: AnyUrl
    labels: List[Label6]
    locked: bool
    maintainer_can_modify: Optional[bool] = Field(
        None, description="Indicates whether maintainers can modify the pull request."
    )
    merge_commit_sha: Optional[str] = None
    mergeable: Optional[bool] = None
    mergeable_state: Optional[str] = None
    merged: Optional[bool] = None
    merged_at: Optional[AwareDatetime] = None
    merged_by: Optional[MergedBy2] = Field(None, title="User")
    milestone: Optional[Milestone33] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int = Field(
        ..., description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: AnyUrl
    rebaseable: Optional[bool] = None
    requested_reviewers: List[Union[Optional[RequestedReviewers4], RequestedReviewers5]]
    requested_teams: List[RequestedTeam2]
    review_comment_url: str
    review_comments: Optional[int] = None
    review_comments_url: AnyUrl
    state: State1 = Field(..., description="State of this Pull Request. Either `open` or `closed`.")
    statuses_url: AnyUrl
    title: str = Field(..., description="The title of the pull request.")
    updated_at: AwareDatetime
    url: AnyUrl
    user: Optional[User48] = Field(..., title="User")


class WebhookPullRequestAutoMergeEnabled(BaseModel):
    action: Action147
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    number: int
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest37 = Field(..., title="Pull Request")
    reason: Optional[str] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class PullRequest38(PullRequest3):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_update_branch: Optional[bool] = Field(
        None, description="Whether to allow updating the pull request's branch."
    )
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged."
    )
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description='The default value for a merge commit title.\n- `PR_TITLE` - default to the pull request\'s title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").',
    )
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**",
    )


class WebhookPullRequestClosed(BaseModel):
    action: Action40
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    number: int = Field(..., description="The pull request number.")
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest38
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action149(Enum):
    converted_to_draft = "converted_to_draft"


class PullRequest39(PullRequest38):
    pass


class WebhookPullRequestConvertedToDraft(BaseModel):
    action: Action149
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    number: int = Field(..., description="The pull request number.")
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest39
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class FieldLinks20(FieldLinks17):
    pass


class Assignee51(Optional[Assignee]):
    pass


class Assignee52(Optional[Assignee]):
    pass


class EnabledBy3(Optional[AnswerChosenBy]):
    pass


class AutoMerge4(BaseModel):
    commit_message: Optional[str] = Field(..., description="Commit message for the merge commit.")
    commit_title: Optional[str] = Field(..., description="Title for the merge commit message.")
    enabled_by: Optional[EnabledBy3] = Field(..., title="User")
    merge_method: MergeMethod = Field(..., description="The merge method to use.")


class Owner53(Optional[AnswerChosenBy]):
    pass


class Repo27(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner53] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User49(Optional[AnswerChosenBy]):
    pass


class Base14(BaseModel):
    label: str
    ref: str
    repo: Repo27 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User49] = Field(..., title="User")


class Owner54(Optional[AnswerChosenBy]):
    pass


class Repo28(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner54] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User50(Optional[AnswerChosenBy]):
    pass


class Head14(BaseModel):
    label: str
    ref: str
    repo: Repo28 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User50] = Field(..., title="User")


class MergedBy3(Optional[Assignee]):
    pass


class Creator44(Optional[Assignee]):
    pass


class Milestone34(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator44] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class RequestedReviewers6(Optional[AnswerChosenBy]):
    pass


class Parent13(Optional[Parent7]):
    pass


class RequestedReviewers7(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent13] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class Parent14(Optional[Parent7]):
    pass


class RequestedTeam3(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent14] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class User51(Optional[Assignee]):
    pass


class PullRequest40(BaseModel):
    field_links: FieldLinks20 = Field(..., alias="_links")
    active_lock_reason: ActiveLockReason
    additions: Optional[int] = None
    assignee: Optional[Assignee51] = Field(..., title="User")
    assignees: List[Optional[Assignee52]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    auto_merge: Optional[AutoMerge4] = Field(
        ..., description="The status of auto merging a pull request.", title="PullRequestAutoMerge"
    )
    base: Base14
    body: Optional[str] = None
    changed_files: Optional[int] = None
    closed_at: Optional[AwareDatetime] = None
    comments: Optional[int] = None
    comments_url: AnyUrl
    commits: Optional[int] = None
    commits_url: AnyUrl
    created_at: AwareDatetime
    deletions: Optional[int] = None
    diff_url: AnyUrl
    draft: bool = Field(..., description="Indicates whether or not the pull request is a draft.")
    head: Head14
    html_url: AnyUrl
    id: int
    issue_url: AnyUrl
    labels: List[Label6]
    locked: bool
    maintainer_can_modify: Optional[bool] = Field(
        None, description="Indicates whether maintainers can modify the pull request."
    )
    merge_commit_sha: Optional[str] = None
    mergeable: Optional[bool] = None
    mergeable_state: Optional[str] = None
    merged: Optional[bool] = None
    merged_at: Optional[AwareDatetime] = None
    merged_by: Optional[MergedBy3] = Field(None, title="User")
    milestone: Optional[Milestone34] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int = Field(
        ..., description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: AnyUrl
    rebaseable: Optional[bool] = None
    requested_reviewers: List[Union[Optional[RequestedReviewers6], RequestedReviewers7]]
    requested_teams: List[RequestedTeam3]
    review_comment_url: str
    review_comments: Optional[int] = None
    review_comments_url: AnyUrl
    state: State1 = Field(..., description="State of this Pull Request. Either `open` or `closed`.")
    statuses_url: AnyUrl
    title: str = Field(..., description="The title of the pull request.")
    updated_at: AwareDatetime
    url: AnyUrl
    user: Optional[User51] = Field(..., title="User")


class WebhookPullRequestDemilestoned(BaseModel):
    action: Action72
    enterprise: Optional[EnterpriseWebhooks] = None
    milestone: Optional[Milestone] = None
    number: int = Field(..., description="The pull request number.")
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest40 = Field(..., title="Pull Request")
    repository: RepositoryWebhooks
    sender: Optional[SimpleUserWebhooks] = None


class Action151(Enum):
    dequeued = "dequeued"


class FieldLinks21(FieldLinks17):
    pass


class Assignee53(Optional[AnswerChosenBy]):
    pass


class Assignee54(Optional[AnswerChosenBy]):
    pass


class EnabledBy4(Optional[AnswerChosenBy]):
    pass


class AutoMerge5(BaseModel):
    commit_message: Optional[str] = Field(..., description="Commit message for the merge commit.")
    commit_title: Optional[str] = Field(..., description="Title for the merge commit message.")
    enabled_by: Optional[EnabledBy4] = Field(..., title="User")
    merge_method: MergeMethod = Field(..., description="The merge method to use.")


class Owner55(Optional[AnswerChosenBy]):
    pass


class Repo29(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner55] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User52(Optional[AnswerChosenBy]):
    pass


class Base15(BaseModel):
    label: str
    ref: str
    repo: Repo29 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User52] = Field(..., title="User")


class Owner56(Optional[AnswerChosenBy]):
    pass


class Repo30(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner56] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User53(Optional[AnswerChosenBy]):
    pass


class Head15(BaseModel):
    label: str
    ref: str
    repo: Repo30 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User53] = Field(..., title="User")


class MergedBy4(Optional[AnswerChosenBy]):
    pass


class Creator45(Optional[Assignee]):
    pass


class Milestone35(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator45] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class RequestedReviewers8(Optional[AnswerChosenBy]):
    pass


class Parent15(Optional[Parent7]):
    pass


class RequestedReviewers9(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent15] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class Parent16(Optional[Parent7]):
    pass


class RequestedTeam4(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent16] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class User54(Optional[Assignee]):
    pass


class PullRequest41(BaseModel):
    field_links: FieldLinks21 = Field(..., alias="_links")
    active_lock_reason: ActiveLockReason
    additions: Optional[int] = None
    assignee: Optional[Assignee53] = Field(..., title="User")
    assignees: List[Optional[Assignee54]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    auto_merge: Optional[AutoMerge5] = Field(
        ..., description="The status of auto merging a pull request.", title="PullRequestAutoMerge"
    )
    base: Base15
    body: Optional[str] = None
    changed_files: Optional[int] = None
    closed_at: Optional[AwareDatetime] = None
    comments: Optional[int] = None
    comments_url: AnyUrl
    commits: Optional[int] = None
    commits_url: AnyUrl
    created_at: AwareDatetime
    deletions: Optional[int] = None
    diff_url: AnyUrl
    draft: bool = Field(..., description="Indicates whether or not the pull request is a draft.")
    head: Head15
    html_url: AnyUrl
    id: int
    issue_url: AnyUrl
    labels: List[Label6]
    locked: bool
    maintainer_can_modify: Optional[bool] = Field(
        None, description="Indicates whether maintainers can modify the pull request."
    )
    merge_commit_sha: Optional[str] = None
    mergeable: Optional[bool] = None
    mergeable_state: Optional[str] = None
    merged: Optional[bool] = None
    merged_at: Optional[AwareDatetime] = None
    merged_by: Optional[MergedBy4] = Field(None, title="User")
    milestone: Optional[Milestone35] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int = Field(
        ..., description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: AnyUrl
    rebaseable: Optional[bool] = None
    requested_reviewers: List[Union[Optional[RequestedReviewers8], RequestedReviewers9]]
    requested_teams: List[RequestedTeam4]
    review_comment_url: str
    review_comments: Optional[int] = None
    review_comments_url: AnyUrl
    state: State1 = Field(..., description="State of this Pull Request. Either `open` or `closed`.")
    statuses_url: AnyUrl
    title: str = Field(..., description="The title of the pull request.")
    updated_at: AwareDatetime
    url: AnyUrl
    user: Optional[User54] = Field(..., title="User")


class WebhookPullRequestDequeued(BaseModel):
    action: Action151
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    number: int
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest41 = Field(..., title="Pull Request")
    reason: str
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Ref(Body):
    pass


class Sha(Body):
    pass


class Base16(BaseModel):
    ref: Ref
    sha: Sha


class Body6(Body4):
    pass


class Title4(Title2):
    pass


class Changes27(BaseModel):
    base: Optional[Base16] = None
    body: Optional[Body6] = None
    title: Optional[Title4] = None


class PullRequest42(PullRequest3):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_update_branch: Optional[bool] = Field(
        None, description="Whether to allow updating the pull request's branch."
    )
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged."
    )
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description='The default value for a merge commit title.\n- `PR_TITLE` - default to the pull request\'s title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").',
    )
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )


class WebhookPullRequestEdited(BaseModel):
    action: Action4
    changes: Changes27 = Field(
        ..., description="The changes to the comment if the action was `edited`."
    )
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    number: int = Field(..., description="The pull request number.")
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest42
    repository: RepositoryWebhooks
    sender: Optional[SimpleUserWebhooks] = None


class Action153(Enum):
    enqueued = "enqueued"


class FieldLinks22(FieldLinks17):
    pass


class Assignee55(Optional[AnswerChosenBy]):
    pass


class Assignee56(Optional[AnswerChosenBy]):
    pass


class EnabledBy5(Optional[AnswerChosenBy]):
    pass


class AutoMerge6(BaseModel):
    commit_message: Optional[str] = Field(..., description="Commit message for the merge commit.")
    commit_title: Optional[str] = Field(..., description="Title for the merge commit message.")
    enabled_by: Optional[EnabledBy5] = Field(..., title="User")
    merge_method: MergeMethod = Field(..., description="The merge method to use.")


class Owner57(Optional[AnswerChosenBy]):
    pass


class Repo31(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner57] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User55(Optional[AnswerChosenBy]):
    pass


class Base17(BaseModel):
    label: str
    ref: str
    repo: Repo31 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User55] = Field(..., title="User")


class Owner58(Optional[AnswerChosenBy]):
    pass


class Repo32(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner58] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User56(Optional[AnswerChosenBy]):
    pass


class Head16(BaseModel):
    label: str
    ref: str
    repo: Repo32 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User56] = Field(..., title="User")


class MergedBy5(Optional[AnswerChosenBy]):
    pass


class Creator46(Optional[Assignee]):
    pass


class Milestone36(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator46] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class RequestedReviewers10(Optional[AnswerChosenBy]):
    pass


class Parent17(Optional[Parent7]):
    pass


class RequestedReviewers11(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent17] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class Parent18(Optional[Parent7]):
    pass


class RequestedTeam5(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent18] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class User57(Optional[Assignee]):
    pass


class PullRequest43(BaseModel):
    field_links: FieldLinks22 = Field(..., alias="_links")
    active_lock_reason: ActiveLockReason
    additions: Optional[int] = None
    assignee: Optional[Assignee55] = Field(..., title="User")
    assignees: List[Optional[Assignee56]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    auto_merge: Optional[AutoMerge6] = Field(
        ..., description="The status of auto merging a pull request.", title="PullRequestAutoMerge"
    )
    base: Base17
    body: Optional[str] = None
    changed_files: Optional[int] = None
    closed_at: Optional[AwareDatetime] = None
    comments: Optional[int] = None
    comments_url: AnyUrl
    commits: Optional[int] = None
    commits_url: AnyUrl
    created_at: AwareDatetime
    deletions: Optional[int] = None
    diff_url: AnyUrl
    draft: bool = Field(..., description="Indicates whether or not the pull request is a draft.")
    head: Head16
    html_url: AnyUrl
    id: int
    issue_url: AnyUrl
    labels: List[Label6]
    locked: bool
    maintainer_can_modify: Optional[bool] = Field(
        None, description="Indicates whether maintainers can modify the pull request."
    )
    merge_commit_sha: Optional[str] = None
    mergeable: Optional[bool] = None
    mergeable_state: Optional[str] = None
    merged: Optional[bool] = None
    merged_at: Optional[AwareDatetime] = None
    merged_by: Optional[MergedBy5] = Field(None, title="User")
    milestone: Optional[Milestone36] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int = Field(
        ..., description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: AnyUrl
    rebaseable: Optional[bool] = None
    requested_reviewers: List[Union[Optional[RequestedReviewers10], RequestedReviewers11]]
    requested_teams: List[RequestedTeam5]
    review_comment_url: str
    review_comments: Optional[int] = None
    review_comments_url: AnyUrl
    state: State1 = Field(..., description="State of this Pull Request. Either `open` or `closed`.")
    statuses_url: AnyUrl
    title: str = Field(..., description="The title of the pull request.")
    updated_at: AwareDatetime
    url: AnyUrl
    user: Optional[User57] = Field(..., title="User")


class WebhookPullRequestEnqueued(BaseModel):
    action: Action153
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    number: int
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest43 = Field(..., title="Pull Request")
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class FieldLinks23(FieldLinks17):
    pass


class Assignee57(Optional[Assignee]):
    pass


class Assignee58(Optional[Assignee]):
    pass


class EnabledBy6(Optional[AnswerChosenBy]):
    pass


class AutoMerge7(BaseModel):
    commit_message: Optional[str] = Field(..., description="Commit message for the merge commit.")
    commit_title: Optional[str] = Field(..., description="Title for the merge commit message.")
    enabled_by: Optional[EnabledBy6] = Field(..., title="User")
    merge_method: MergeMethod = Field(..., description="The merge method to use.")


class Owner59(Optional[AnswerChosenBy]):
    pass


class Repo33(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner59] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User58(Optional[AnswerChosenBy]):
    pass


class Base18(BaseModel):
    label: str
    ref: str
    repo: Repo33 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User58] = Field(..., title="User")


class Owner60(Optional[AnswerChosenBy]):
    pass


class Repo34(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner60] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User59(Optional[AnswerChosenBy]):
    pass


class Head17(BaseModel):
    label: Optional[str] = None
    ref: str
    repo: Optional[Repo34] = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User59] = Field(..., title="User")


class MergedBy6(Optional[Assignee]):
    pass


class Creator47(Optional[Assignee]):
    pass


class Milestone37(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator47] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class RequestedReviewers12(Optional[Assignee]):
    pass


class Parent19(Optional[Parent7]):
    pass


class RequestedReviewers13(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(..., description="Description of the team")
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the team")
    members_url: str
    name: str = Field(..., description="Name of the team")
    node_id: str
    parent: Optional[Parent19] = None
    permission: str = Field(
        ..., description="Permission that the team will have for its repositories"
    )
    privacy: Privacy1
    repositories_url: AnyUrl
    slug: str
    url: AnyUrl = Field(..., description="URL for the team")


class Parent20(Optional[Parent7]):
    pass


class RequestedTeam6(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent20] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class User60(Optional[Assignee]):
    pass


class PullRequest44(BaseModel):
    field_links: FieldLinks23 = Field(..., alias="_links")
    active_lock_reason: ActiveLockReason
    additions: Optional[int] = None
    assignee: Optional[Assignee57] = Field(..., title="User")
    assignees: List[Optional[Assignee58]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    auto_merge: Optional[AutoMerge7] = Field(
        ..., description="The status of auto merging a pull request.", title="PullRequestAutoMerge"
    )
    base: Base18
    body: Optional[str] = None
    changed_files: Optional[int] = None
    closed_at: Optional[AwareDatetime] = None
    comments: Optional[int] = None
    comments_url: AnyUrl
    commits: Optional[int] = None
    commits_url: AnyUrl
    created_at: AwareDatetime
    deletions: Optional[int] = None
    diff_url: AnyUrl
    draft: bool = Field(..., description="Indicates whether or not the pull request is a draft.")
    head: Head17
    html_url: AnyUrl
    id: int
    issue_url: AnyUrl
    labels: List[Label6]
    locked: bool
    maintainer_can_modify: Optional[bool] = Field(
        None, description="Indicates whether maintainers can modify the pull request."
    )
    merge_commit_sha: Optional[str] = None
    mergeable: Optional[bool] = None
    mergeable_state: Optional[str] = None
    merged: Optional[bool] = None
    merged_at: Optional[AwareDatetime] = None
    merged_by: Optional[MergedBy6] = Field(None, title="User")
    milestone: Optional[Milestone37] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int = Field(
        ..., description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: AnyUrl
    rebaseable: Optional[bool] = None
    requested_reviewers: List[Union[Optional[RequestedReviewers12], RequestedReviewers13]]
    requested_teams: List[RequestedTeam6]
    review_comment_url: str
    review_comments: Optional[int] = None
    review_comments_url: AnyUrl
    state: State1 = Field(..., description="State of this Pull Request. Either `open` or `closed`.")
    statuses_url: AnyUrl
    title: str = Field(..., description="The title of the pull request.")
    updated_at: AwareDatetime
    url: AnyUrl
    user: Optional[User60] = Field(..., title="User")


class WebhookPullRequestLabeled(BaseModel):
    action: Action47
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    label: Optional[Label6] = Field(None, title="Label")
    number: int = Field(..., description="The pull request number.")
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest44 = Field(..., title="Pull Request")
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class FieldLinks24(FieldLinks17):
    pass


class Assignee59(Optional[AnswerChosenBy]):
    pass


class Assignee60(Optional[Assignee]):
    pass


class EnabledBy7(Optional[AnswerChosenBy]):
    pass


class AutoMerge8(BaseModel):
    commit_message: Optional[str] = Field(..., description="Commit message for the merge commit.")
    commit_title: Optional[str] = Field(..., description="Title for the merge commit message.")
    enabled_by: Optional[EnabledBy7] = Field(..., title="User")
    merge_method: MergeMethod = Field(..., description="The merge method to use.")


class Owner61(Optional[AnswerChosenBy]):
    pass


class Repo35(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner61] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User61(Optional[AnswerChosenBy]):
    pass


class Base19(BaseModel):
    label: str
    ref: str
    repo: Repo35 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User61] = Field(..., title="User")


class Owner62(Optional[AnswerChosenBy]):
    pass


class Repo36(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner62] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User62(Optional[AnswerChosenBy]):
    pass


class Head18(BaseModel):
    label: Optional[str] = None
    ref: str
    repo: Optional[Repo36] = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User62] = Field(..., title="User")


class MergedBy7(Optional[Assignee]):
    pass


class Creator48(Optional[AnswerChosenBy]):
    pass


class Milestone38(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator48] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class RequestedReviewers14(Optional[Assignee]):
    pass


class Parent21(Optional[Parent7]):
    pass


class RequestedReviewers15(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(..., description="Description of the team")
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the team")
    members_url: str
    name: str = Field(..., description="Name of the team")
    node_id: str
    parent: Optional[Parent21] = None
    permission: str = Field(
        ..., description="Permission that the team will have for its repositories"
    )
    privacy: Privacy1
    repositories_url: AnyUrl
    slug: str
    url: AnyUrl = Field(..., description="URL for the team")


class Parent22(Optional[Parent7]):
    pass


class RequestedTeam7(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent22] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class User63(Optional[Assignee]):
    pass


class PullRequest45(BaseModel):
    field_links: FieldLinks24 = Field(..., alias="_links")
    active_lock_reason: ActiveLockReason
    additions: Optional[int] = None
    assignee: Optional[Assignee59] = Field(..., title="User")
    assignees: List[Optional[Assignee60]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    auto_merge: Optional[AutoMerge8] = Field(
        ..., description="The status of auto merging a pull request.", title="PullRequestAutoMerge"
    )
    base: Base19
    body: Optional[str] = None
    changed_files: Optional[int] = None
    closed_at: Optional[AwareDatetime] = None
    comments: Optional[int] = None
    comments_url: AnyUrl
    commits: Optional[int] = None
    commits_url: AnyUrl
    created_at: AwareDatetime
    deletions: Optional[int] = None
    diff_url: AnyUrl
    draft: bool = Field(..., description="Indicates whether or not the pull request is a draft.")
    head: Head18
    html_url: AnyUrl
    id: int
    issue_url: AnyUrl
    labels: List[Label6]
    locked: bool
    maintainer_can_modify: Optional[bool] = Field(
        None, description="Indicates whether maintainers can modify the pull request."
    )
    merge_commit_sha: Optional[str] = None
    mergeable: Optional[bool] = None
    mergeable_state: Optional[str] = None
    merged: Optional[bool] = None
    merged_at: Optional[AwareDatetime] = None
    merged_by: Optional[MergedBy7] = Field(None, title="User")
    milestone: Optional[Milestone38] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int = Field(
        ..., description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: AnyUrl
    rebaseable: Optional[bool] = None
    requested_reviewers: List[Union[Optional[RequestedReviewers14], RequestedReviewers15]]
    requested_teams: List[RequestedTeam7]
    review_comment_url: str
    review_comments: Optional[int] = None
    review_comments_url: AnyUrl
    state: State1 = Field(..., description="State of this Pull Request. Either `open` or `closed`.")
    statuses_url: AnyUrl
    title: str = Field(..., description="The title of the pull request.")
    updated_at: AwareDatetime
    url: AnyUrl
    user: Optional[User63] = Field(..., title="User")


class WebhookPullRequestLocked(BaseModel):
    action: Action48
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    number: int = Field(..., description="The pull request number.")
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest45 = Field(..., title="Pull Request")
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class FieldLinks25(FieldLinks17):
    pass


class Assignee61(Optional[Assignee]):
    pass


class Assignee62(Optional[Assignee]):
    pass


class EnabledBy8(Optional[AnswerChosenBy]):
    pass


class AutoMerge9(BaseModel):
    commit_message: Optional[str] = Field(..., description="Commit message for the merge commit.")
    commit_title: Optional[str] = Field(..., description="Title for the merge commit message.")
    enabled_by: Optional[EnabledBy8] = Field(..., title="User")
    merge_method: MergeMethod = Field(..., description="The merge method to use.")


class Owner63(Optional[AnswerChosenBy]):
    pass


class Repo37(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner63] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User64(Optional[AnswerChosenBy]):
    pass


class Base20(BaseModel):
    label: str
    ref: str
    repo: Repo37 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User64] = Field(..., title="User")


class Owner64(Optional[AnswerChosenBy]):
    pass


class Repo38(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner64] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User65(Optional[AnswerChosenBy]):
    pass


class Head19(BaseModel):
    label: str
    ref: str
    repo: Repo38 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User65] = Field(..., title="User")


class MergedBy8(Optional[Assignee]):
    pass


class Creator49(Optional[Assignee]):
    pass


class Milestone39(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator49] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class RequestedReviewers16(Optional[AnswerChosenBy]):
    pass


class Parent23(Optional[Parent7]):
    pass


class RequestedReviewers17(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent23] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class Parent24(Optional[Parent7]):
    pass


class RequestedTeam8(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent24] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class User66(Optional[Assignee]):
    pass


class PullRequest46(BaseModel):
    field_links: FieldLinks25 = Field(..., alias="_links")
    active_lock_reason: ActiveLockReason
    additions: Optional[int] = None
    assignee: Optional[Assignee61] = Field(..., title="User")
    assignees: List[Optional[Assignee62]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    auto_merge: Optional[AutoMerge9] = Field(
        ..., description="The status of auto merging a pull request.", title="PullRequestAutoMerge"
    )
    base: Base20
    body: Optional[str] = None
    changed_files: Optional[int] = None
    closed_at: Optional[AwareDatetime] = None
    comments: Optional[int] = None
    comments_url: AnyUrl
    commits: Optional[int] = None
    commits_url: AnyUrl
    created_at: AwareDatetime
    deletions: Optional[int] = None
    diff_url: AnyUrl
    draft: bool = Field(..., description="Indicates whether or not the pull request is a draft.")
    head: Head19
    html_url: AnyUrl
    id: int
    issue_url: AnyUrl
    labels: List[Label6]
    locked: bool
    maintainer_can_modify: Optional[bool] = Field(
        None, description="Indicates whether maintainers can modify the pull request."
    )
    merge_commit_sha: Optional[str] = None
    mergeable: Optional[bool] = None
    mergeable_state: Optional[str] = None
    merged: Optional[bool] = None
    merged_at: Optional[AwareDatetime] = None
    merged_by: Optional[MergedBy8] = Field(None, title="User")
    milestone: Optional[Milestone39] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int = Field(
        ..., description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: AnyUrl
    rebaseable: Optional[bool] = None
    requested_reviewers: List[Union[Optional[RequestedReviewers16], RequestedReviewers17]]
    requested_teams: List[RequestedTeam8]
    review_comment_url: str
    review_comments: Optional[int] = None
    review_comments_url: AnyUrl
    state: State1 = Field(..., description="State of this Pull Request. Either `open` or `closed`.")
    statuses_url: AnyUrl
    title: str = Field(..., description="The title of the pull request.")
    updated_at: AwareDatetime
    url: AnyUrl
    user: Optional[User66] = Field(..., title="User")


class WebhookPullRequestMilestoned(BaseModel):
    action: Action76
    enterprise: Optional[EnterpriseWebhooks] = None
    milestone: Optional[Milestone] = None
    number: int = Field(..., description="The pull request number.")
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest46 = Field(..., title="Pull Request")
    repository: RepositoryWebhooks
    sender: Optional[SimpleUserWebhooks] = None


class PullRequest47(PullRequest3):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_update_branch: Optional[bool] = Field(
        None, description="Whether to allow updating the pull request's branch."
    )
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged."
    )
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**",
    )


class WebhookPullRequestOpened(BaseModel):
    action: Action77
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    number: int = Field(..., description="The pull request number.")
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest47
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action158(Enum):
    ready_for_review = "ready_for_review"


class PullRequest48(PullRequest38):
    pass


class WebhookPullRequestReadyForReview(BaseModel):
    action: Action158
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    number: int = Field(..., description="The pull request number.")
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest48
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class PullRequest49(PullRequest38):
    pass


class WebhookPullRequestReopened(BaseModel):
    action: Action16
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    number: int = Field(..., description="The pull request number.")
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest49
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class PullRequest50(Link):
    pass


class FieldLinks26(BaseModel):
    html: Html3 = Field(..., title="Link")
    pull_request: PullRequest50 = Field(..., title="Link")
    self: Self2 = Field(..., title="Link")


class User67(Optional[AnswerChosenBy]):
    pass


class Comment7(BaseModel):
    field_links: FieldLinks26 = Field(..., alias="_links")
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: str = Field(..., description="The text of the comment.")
    commit_id: str = Field(..., description="The SHA of the commit to which the comment applies.")
    created_at: AwareDatetime
    diff_hunk: str = Field(..., description="The diff of the line that the comment refers to.")
    html_url: AnyUrl = Field(..., description="HTML URL for the pull request review comment.")
    id: int = Field(..., description="The ID of the pull request review comment.")
    in_reply_to_id: Optional[int] = Field(None, description="The comment ID to reply to.")
    line: Optional[int] = Field(
        ...,
        description="The line of the blob to which the comment applies. The last line of the range for a multi-line comment",
    )
    node_id: str = Field(..., description="The node ID of the pull request review comment.")
    original_commit_id: str = Field(
        ..., description="The SHA of the original commit to which the comment applies."
    )
    original_line: Optional[int] = Field(
        ...,
        description="The line of the blob to which the comment applies. The last line of the range for a multi-line comment",
    )
    original_position: int = Field(
        ..., description="The index of the original line in the diff to which the comment applies."
    )
    original_start_line: Optional[int] = Field(
        ..., description="The first line of the range for a multi-line comment."
    )
    path: str = Field(
        ..., description="The relative path of the file to which the comment applies."
    )
    position: Optional[int] = Field(
        ..., description="The line index in the diff to which the comment applies."
    )
    pull_request_review_id: Optional[int] = Field(
        ..., description="The ID of the pull request review to which the comment belongs."
    )
    pull_request_url: AnyUrl = Field(
        ..., description="URL for the pull request that the review comment belongs to."
    )
    reactions: Reactions31 = Field(..., title="Reactions")
    side: Side = Field(
        ..., description="The side of the first line of the range for a multi-line comment."
    )
    start_line: Optional[int] = Field(
        ..., description="The first line of the range for a multi-line comment."
    )
    start_side: StartSide = Field(
        ..., description="The side of the first line of the range for a multi-line comment."
    )
    subject_type: Optional[SubjectType] = Field(
        None,
        description="The level at which the comment is targeted, can be a diff line or a file.",
    )
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the pull request review comment")
    user: Optional[User67] = Field(..., title="User")


class FieldLinks27(FieldLinks17):
    pass


class Assignee63(Optional[Assignee]):
    pass


class Assignee64(Optional[Assignee]):
    pass


class EnabledBy9(Optional[AnswerChosenBy]):
    pass


class AutoMerge10(BaseModel):
    commit_message: Optional[str] = Field(..., description="Commit message for the merge commit.")
    commit_title: Optional[str] = Field(..., description="Title for the merge commit message.")
    enabled_by: Optional[EnabledBy9] = Field(..., title="User")
    merge_method: MergeMethod = Field(..., description="The merge method to use.")


class Owner65(Optional[AnswerChosenBy]):
    pass


class Repo39(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner65] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User68(Optional[AnswerChosenBy]):
    pass


class Base21(BaseModel):
    label: str
    ref: str
    repo: Repo39 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User68] = Field(..., title="User")


class Owner66(Optional[AnswerChosenBy]):
    pass


class Repo40(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: Optional[bool] = Field(False, description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner66] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User69(Optional[AnswerChosenBy]):
    pass


class Head20(BaseModel):
    label: str
    ref: str
    repo: Optional[Repo40] = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User69] = Field(..., title="User")


class Creator50(Optional[Assignee]):
    pass


class Milestone40(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator50] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class RequestedReviewers18(Optional[Assignee]):
    pass


class Parent25(Optional[Parent7]):
    pass


class RequestedReviewers19(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(..., description="Description of the team")
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the team")
    members_url: str
    name: str = Field(..., description="Name of the team")
    node_id: str
    parent: Optional[Parent25] = None
    permission: str = Field(
        ..., description="Permission that the team will have for its repositories"
    )
    privacy: Privacy1
    repositories_url: AnyUrl
    slug: str
    url: AnyUrl = Field(..., description="URL for the team")


class Parent26(Optional[Parent7]):
    pass


class RequestedTeam9(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent26] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class User70(Optional[Assignee]):
    pass


class PullRequest51(BaseModel):
    field_links: FieldLinks27 = Field(..., alias="_links")
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee63] = Field(..., title="User")
    assignees: List[Optional[Assignee64]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    auto_merge: Optional[AutoMerge10] = Field(
        None, description="The status of auto merging a pull request.", title="PullRequestAutoMerge"
    )
    base: Base21
    body: Optional[str] = None
    closed_at: Optional[str] = None
    comments_url: AnyUrl
    commits_url: AnyUrl
    created_at: str
    diff_url: AnyUrl
    draft: Optional[bool] = None
    head: Head20
    html_url: AnyUrl
    id: int
    issue_url: AnyUrl
    labels: List[Label6]
    locked: bool
    merge_commit_sha: Optional[str] = None
    merged_at: Optional[str] = None
    milestone: Optional[Milestone40] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    patch_url: AnyUrl
    requested_reviewers: List[Union[Optional[RequestedReviewers18], RequestedReviewers19]]
    requested_teams: List[RequestedTeam9]
    review_comment_url: str
    review_comments_url: AnyUrl
    state: State1
    statuses_url: AnyUrl
    title: str
    updated_at: str
    url: AnyUrl
    user: Optional[User70] = Field(..., title="User")


class WebhookPullRequestReviewCommentCreated(BaseModel):
    action: Action2
    comment: Comment7 = Field(
        ...,
        description="The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself.",
        title="Pull Request Review Comment",
    )
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest51
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class PullRequest52(Link):
    pass


class FieldLinks28(BaseModel):
    html: Html3 = Field(..., title="Link")
    pull_request: PullRequest52 = Field(..., title="Link")
    self: Self2 = Field(..., title="Link")


class User71(Optional[AnswerChosenBy]):
    pass


class Comment8(BaseModel):
    field_links: FieldLinks28 = Field(..., alias="_links")
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: str = Field(..., description="The text of the comment.")
    commit_id: str = Field(..., description="The SHA of the commit to which the comment applies.")
    created_at: AwareDatetime
    diff_hunk: str = Field(..., description="The diff of the line that the comment refers to.")
    html_url: AnyUrl = Field(..., description="HTML URL for the pull request review comment.")
    id: int = Field(..., description="The ID of the pull request review comment.")
    in_reply_to_id: Optional[int] = Field(None, description="The comment ID to reply to.")
    line: Optional[int] = Field(
        ...,
        description="The line of the blob to which the comment applies. The last line of the range for a multi-line comment",
    )
    node_id: str = Field(..., description="The node ID of the pull request review comment.")
    original_commit_id: str = Field(
        ..., description="The SHA of the original commit to which the comment applies."
    )
    original_line: int = Field(
        ...,
        description="The line of the blob to which the comment applies. The last line of the range for a multi-line comment",
    )
    original_position: int = Field(
        ..., description="The index of the original line in the diff to which the comment applies."
    )
    original_start_line: Optional[int] = Field(
        ..., description="The first line of the range for a multi-line comment."
    )
    path: str = Field(
        ..., description="The relative path of the file to which the comment applies."
    )
    position: Optional[int] = Field(
        ..., description="The line index in the diff to which the comment applies."
    )
    pull_request_review_id: Optional[int] = Field(
        ..., description="The ID of the pull request review to which the comment belongs."
    )
    pull_request_url: AnyUrl = Field(
        ..., description="URL for the pull request that the review comment belongs to."
    )
    reactions: Reactions31 = Field(..., title="Reactions")
    side: Side = Field(
        ..., description="The side of the first line of the range for a multi-line comment."
    )
    start_line: Optional[int] = Field(
        ..., description="The first line of the range for a multi-line comment."
    )
    start_side: StartSide = Field(
        ..., description="The side of the first line of the range for a multi-line comment."
    )
    subject_type: Optional[SubjectType] = Field(
        None,
        description="The level at which the comment is targeted, can be a diff line or a file.",
    )
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the pull request review comment")
    user: Optional[User71] = Field(..., title="User")


class FieldLinks29(FieldLinks17):
    pass


class Assignee65(Optional[AnswerChosenBy]):
    pass


class Assignee66(Optional[AnswerChosenBy]):
    pass


class EnabledBy10(Optional[AnswerChosenBy]):
    pass


class AutoMerge11(BaseModel):
    commit_message: Optional[str] = Field(..., description="Commit message for the merge commit.")
    commit_title: Optional[str] = Field(..., description="Title for the merge commit message.")
    enabled_by: Optional[EnabledBy10] = Field(..., title="User")
    merge_method: MergeMethod = Field(..., description="The merge method to use.")


class Owner67(Optional[AnswerChosenBy]):
    pass


class Repo41(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner67] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User72(Optional[AnswerChosenBy]):
    pass


class Base22(BaseModel):
    label: str
    ref: str
    repo: Repo41 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User72] = Field(..., title="User")


class Owner68(Optional[AnswerChosenBy]):
    pass


class Repo42(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner68] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User73(Optional[AnswerChosenBy]):
    pass


class Head21(BaseModel):
    label: str
    ref: str
    repo: Optional[Repo42] = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User73] = Field(..., title="User")


class Creator51(Optional[AnswerChosenBy]):
    pass


class Milestone41(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator51] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class RequestedReviewers20(Optional[AnswerChosenBy]):
    pass


class Parent27(Optional[Parent7]):
    pass


class RequestedReviewers21(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent27] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class Parent28(Optional[Parent7]):
    pass


class RequestedTeam10(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent28] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class User74(Optional[Assignee]):
    pass


class PullRequest53(BaseModel):
    field_links: FieldLinks29 = Field(..., alias="_links")
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee65] = Field(..., title="User")
    assignees: List[Optional[Assignee66]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    auto_merge: Optional[AutoMerge11] = Field(
        None, description="The status of auto merging a pull request.", title="PullRequestAutoMerge"
    )
    base: Base22
    body: Optional[str] = None
    closed_at: Optional[str] = None
    comments_url: AnyUrl
    commits_url: AnyUrl
    created_at: str
    diff_url: AnyUrl
    draft: Optional[bool] = None
    head: Head21
    html_url: AnyUrl
    id: int
    issue_url: AnyUrl
    labels: List[Label6]
    locked: bool
    merge_commit_sha: Optional[str] = None
    merged_at: Optional[str] = None
    milestone: Optional[Milestone41] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    patch_url: AnyUrl
    requested_reviewers: List[Union[Optional[RequestedReviewers20], RequestedReviewers21]]
    requested_teams: List[RequestedTeam10]
    review_comment_url: str
    review_comments_url: AnyUrl
    state: State1
    statuses_url: AnyUrl
    title: str
    updated_at: str
    url: AnyUrl
    user: Optional[User74] = Field(..., title="User")


class WebhookPullRequestReviewCommentDeleted(BaseModel):
    action: Action3
    comment: Comment8 = Field(
        ...,
        description="The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself.",
        title="Pull Request Review Comment",
    )
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest53
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Body7(Body2):
    pass


class Changes28(BaseModel):
    body: Optional[Body7] = None


class PullRequest54(Link):
    pass


class FieldLinks30(BaseModel):
    html: Html3 = Field(..., title="Link")
    pull_request: PullRequest54 = Field(..., title="Link")
    self: Self2 = Field(..., title="Link")


class User75(Optional[AnswerChosenBy]):
    pass


class Comment9(BaseModel):
    field_links: FieldLinks30 = Field(..., alias="_links")
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: str = Field(..., description="The text of the comment.")
    commit_id: str = Field(..., description="The SHA of the commit to which the comment applies.")
    created_at: AwareDatetime
    diff_hunk: str = Field(..., description="The diff of the line that the comment refers to.")
    html_url: AnyUrl = Field(..., description="HTML URL for the pull request review comment.")
    id: int = Field(..., description="The ID of the pull request review comment.")
    in_reply_to_id: Optional[int] = Field(None, description="The comment ID to reply to.")
    line: Optional[int] = Field(
        ...,
        description="The line of the blob to which the comment applies. The last line of the range for a multi-line comment",
    )
    node_id: str = Field(..., description="The node ID of the pull request review comment.")
    original_commit_id: str = Field(
        ..., description="The SHA of the original commit to which the comment applies."
    )
    original_line: int = Field(
        ...,
        description="The line of the blob to which the comment applies. The last line of the range for a multi-line comment",
    )
    original_position: int = Field(
        ..., description="The index of the original line in the diff to which the comment applies."
    )
    original_start_line: Optional[int] = Field(
        ..., description="The first line of the range for a multi-line comment."
    )
    path: str = Field(
        ..., description="The relative path of the file to which the comment applies."
    )
    position: Optional[int] = Field(
        ..., description="The line index in the diff to which the comment applies."
    )
    pull_request_review_id: Optional[int] = Field(
        ..., description="The ID of the pull request review to which the comment belongs."
    )
    pull_request_url: AnyUrl = Field(
        ..., description="URL for the pull request that the review comment belongs to."
    )
    reactions: Reactions31 = Field(..., title="Reactions")
    side: Side = Field(
        ..., description="The side of the first line of the range for a multi-line comment."
    )
    start_line: Optional[int] = Field(
        ..., description="The first line of the range for a multi-line comment."
    )
    start_side: StartSide = Field(
        ..., description="The side of the first line of the range for a multi-line comment."
    )
    subject_type: Optional[SubjectType] = Field(
        None,
        description="The level at which the comment is targeted, can be a diff line or a file.",
    )
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the pull request review comment")
    user: Optional[User75] = Field(..., title="User")


class FieldLinks31(FieldLinks17):
    pass


class Assignee67(Optional[AnswerChosenBy]):
    pass


class Assignee68(Optional[AnswerChosenBy]):
    pass


class EnabledBy11(Optional[AnswerChosenBy]):
    pass


class AutoMerge12(BaseModel):
    commit_message: Optional[str] = Field(..., description="Commit message for the merge commit.")
    commit_title: Optional[str] = Field(..., description="Title for the merge commit message.")
    enabled_by: Optional[EnabledBy11] = Field(..., title="User")
    merge_method: MergeMethod = Field(..., description="The merge method to use.")


class Owner69(Optional[AnswerChosenBy]):
    pass


class Repo43(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner69] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User76(Optional[AnswerChosenBy]):
    pass


class Base23(BaseModel):
    label: str
    ref: str
    repo: Repo43 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User76] = Field(..., title="User")


class Owner70(Optional[AnswerChosenBy]):
    pass


class Repo44(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner70] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User77(Optional[AnswerChosenBy]):
    pass


class Head22(BaseModel):
    label: str
    ref: str
    repo: Optional[Repo44] = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User77] = Field(..., title="User")


class Creator52(Optional[Assignee]):
    pass


class Milestone42(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator52] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class RequestedReviewers22(Optional[AnswerChosenBy]):
    pass


class Parent29(Optional[Parent7]):
    pass


class RequestedReviewers23(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent29] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class Parent30(Optional[Parent7]):
    pass


class RequestedTeam11(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent30] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class User78(Optional[Assignee]):
    pass


class PullRequest55(BaseModel):
    field_links: FieldLinks31 = Field(..., alias="_links")
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee67] = Field(..., title="User")
    assignees: List[Optional[Assignee68]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    auto_merge: Optional[AutoMerge12] = Field(
        None, description="The status of auto merging a pull request.", title="PullRequestAutoMerge"
    )
    base: Base23
    body: Optional[str] = None
    closed_at: Optional[str] = None
    comments_url: AnyUrl
    commits_url: AnyUrl
    created_at: str
    diff_url: AnyUrl
    draft: Optional[bool] = None
    head: Head22
    html_url: AnyUrl
    id: int
    issue_url: AnyUrl
    labels: List[Label6]
    locked: bool
    merge_commit_sha: Optional[str] = None
    merged_at: Optional[str] = None
    milestone: Optional[Milestone42] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    patch_url: AnyUrl
    requested_reviewers: List[Union[Optional[RequestedReviewers22], RequestedReviewers23]]
    requested_teams: List[RequestedTeam11]
    review_comment_url: str
    review_comments_url: AnyUrl
    state: State1
    statuses_url: AnyUrl
    title: str
    updated_at: str
    url: AnyUrl
    user: Optional[User78] = Field(..., title="User")


class WebhookPullRequestReviewCommentEdited(BaseModel):
    action: Action4
    changes: Changes28 = Field(..., description="The changes to the comment.")
    comment: Comment9 = Field(
        ...,
        description="The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself.",
        title="Pull Request Review Comment",
    )
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest55
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class FieldLinks32(FieldLinks17):
    pass


class Assignee69(Optional[Assignee]):
    pass


class Assignee70(Optional[Assignee]):
    pass


class EnabledBy12(Optional[AnswerChosenBy]):
    pass


class AutoMerge13(BaseModel):
    commit_message: Optional[str] = Field(..., description="Commit message for the merge commit.")
    commit_title: Optional[str] = Field(..., description="Title for the merge commit message.")
    enabled_by: Optional[EnabledBy12] = Field(..., title="User")
    merge_method: MergeMethod = Field(..., description="The merge method to use.")


class Owner71(Optional[AnswerChosenBy]):
    pass


class Repo45(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner71] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User79(Optional[AnswerChosenBy]):
    pass


class Base24(BaseModel):
    label: str
    ref: str
    repo: Repo45 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User79] = Field(..., title="User")


class Owner72(Optional[AnswerChosenBy]):
    pass


class Repo46(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner72] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User80(Optional[AnswerChosenBy]):
    pass


class Head23(BaseModel):
    label: str
    ref: str
    repo: Optional[Repo46] = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User80] = Field(..., title="User")


class Creator53(Optional[AnswerChosenBy]):
    pass


class Milestone43(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator53] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class RequestedReviewers24(Optional[Assignee]):
    pass


class Parent31(Optional[Parent7]):
    pass


class RequestedReviewers25(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(..., description="Description of the team")
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the team")
    members_url: str
    name: str = Field(..., description="Name of the team")
    node_id: str
    parent: Optional[Parent31] = None
    permission: str = Field(
        ..., description="Permission that the team will have for its repositories"
    )
    privacy: Privacy1
    repositories_url: AnyUrl
    slug: str
    url: AnyUrl = Field(..., description="URL for the team")


class Parent32(Optional[Parent7]):
    pass


class RequestedTeam12(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent32] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class User81(Optional[Assignee]):
    pass


class PullRequest56(BaseModel):
    field_links: FieldLinks32 = Field(..., alias="_links")
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee69] = Field(..., title="User")
    assignees: List[Optional[Assignee70]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    auto_merge: Optional[AutoMerge13] = Field(
        ..., description="The status of auto merging a pull request.", title="PullRequestAutoMerge"
    )
    base: Base24
    body: Optional[str] = None
    closed_at: Optional[str] = None
    comments_url: AnyUrl
    commits_url: AnyUrl
    created_at: str
    diff_url: AnyUrl
    draft: bool
    head: Head23
    html_url: AnyUrl
    id: int
    issue_url: AnyUrl
    labels: List[Label6]
    locked: bool
    merge_commit_sha: Optional[str] = None
    merged_at: Optional[str] = None
    milestone: Optional[Milestone43] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    patch_url: AnyUrl
    requested_reviewers: List[Union[Optional[RequestedReviewers24], RequestedReviewers25]]
    requested_teams: List[RequestedTeam12]
    review_comment_url: str
    review_comments_url: AnyUrl
    state: State1
    statuses_url: AnyUrl
    title: str
    updated_at: str
    url: AnyUrl
    user: Optional[User81] = Field(..., title="User")


class PullRequest57(Link):
    pass


class FieldLinks33(BaseModel):
    html: Html3 = Field(..., title="Link")
    pull_request: PullRequest57 = Field(..., title="Link")


class State113(Enum):
    dismissed = "dismissed"
    approved = "approved"
    changes_requested = "changes_requested"


class User82(Optional[Assignee]):
    pass


class Review(BaseModel):
    field_links: FieldLinks33 = Field(..., alias="_links")
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: Optional[str] = Field(..., description="The text of the review.")
    commit_id: str = Field(..., description="A commit SHA for the review.")
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the review")
    node_id: str
    pull_request_url: AnyUrl
    state: State113
    submitted_at: AwareDatetime
    user: Optional[User82] = Field(..., title="User")


class WebhookPullRequestReviewDismissed(BaseModel):
    action: Action26
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest56 = Field(..., title="Simple Pull Request")
    repository: RepositoryWebhooks
    review: Review = Field(..., description="The review that was affected.")
    sender: SimpleUserWebhooks


class Body8(Body4):
    pass


class Changes29(BaseModel):
    body: Optional[Body8] = None


class FieldLinks34(FieldLinks17):
    pass


class Assignee71(Optional[Assignee]):
    pass


class Assignee72(Optional[Assignee]):
    pass


class EnabledBy13(Optional[AnswerChosenBy]):
    pass


class AutoMerge14(BaseModel):
    commit_message: Optional[str] = Field(..., description="Commit message for the merge commit.")
    commit_title: Optional[str] = Field(..., description="Title for the merge commit message.")
    enabled_by: Optional[EnabledBy13] = Field(..., title="User")
    merge_method: MergeMethod = Field(..., description="The merge method to use.")


class Owner73(Optional[AnswerChosenBy]):
    pass


class Repo47(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner73] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    visibility: Visibility6
    watchers: int
    watchers_count: int


class User83(Optional[AnswerChosenBy]):
    pass


class Base25(BaseModel):
    label: str
    ref: str
    repo: Repo47 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User83] = Field(..., title="User")


class Owner74(Optional[AnswerChosenBy]):
    pass


class Repo48(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner74] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    visibility: Visibility6
    watchers: int
    watchers_count: int


class User84(Optional[AnswerChosenBy]):
    pass


class Head24(BaseModel):
    label: str
    ref: str
    repo: Optional[Repo48] = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User84] = Field(..., title="User")


class Creator54(Optional[Assignee]):
    pass


class Milestone44(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator54] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class RequestedReviewers26(Optional[Assignee]):
    pass


class Parent33(Optional[Parent7]):
    pass


class RequestedReviewers27(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(..., description="Description of the team")
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the team")
    members_url: str
    name: str = Field(..., description="Name of the team")
    node_id: str
    parent: Optional[Parent33] = None
    permission: str = Field(
        ..., description="Permission that the team will have for its repositories"
    )
    privacy: Privacy1
    repositories_url: AnyUrl
    slug: str
    url: AnyUrl = Field(..., description="URL for the team")


class Parent34(Optional[Parent7]):
    pass


class RequestedTeam13(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent34] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class User85(Optional[Assignee]):
    pass


class PullRequest58(BaseModel):
    field_links: FieldLinks34 = Field(..., alias="_links")
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee71] = Field(..., title="User")
    assignees: List[Optional[Assignee72]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    auto_merge: Optional[AutoMerge14] = Field(
        ..., description="The status of auto merging a pull request.", title="PullRequestAutoMerge"
    )
    base: Base25
    body: Optional[str] = None
    closed_at: Optional[str] = None
    comments_url: AnyUrl
    commits_url: AnyUrl
    created_at: str
    diff_url: AnyUrl
    draft: bool
    head: Head24
    html_url: AnyUrl
    id: int
    issue_url: AnyUrl
    labels: List[Label6]
    locked: bool
    merge_commit_sha: Optional[str] = None
    merged_at: Optional[str] = None
    milestone: Optional[Milestone44] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    patch_url: AnyUrl
    requested_reviewers: List[Union[Optional[RequestedReviewers26], RequestedReviewers27]]
    requested_teams: List[RequestedTeam13]
    review_comment_url: str
    review_comments_url: AnyUrl
    state: State1
    statuses_url: AnyUrl
    title: str
    updated_at: str
    url: AnyUrl
    user: Optional[User85] = Field(..., title="User")


class PullRequest59(Link):
    pass


class FieldLinks35(BaseModel):
    html: Html3 = Field(..., title="Link")
    pull_request: PullRequest59 = Field(..., title="Link")


class User86(Optional[AnswerChosenBy]):
    pass


class Review1(BaseModel):
    field_links: FieldLinks35 = Field(..., alias="_links")
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: Optional[str] = Field(..., description="The text of the review.")
    commit_id: str = Field(..., description="A commit SHA for the review.")
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the review")
    node_id: str
    pull_request_url: AnyUrl
    state: str
    submitted_at: Optional[AwareDatetime] = None
    user: Optional[User86] = Field(..., title="User")


class WebhookPullRequestReviewEdited(BaseModel):
    action: Action4
    changes: Changes29
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest58 = Field(..., title="Simple Pull Request")
    repository: RepositoryWebhooks
    review: Review1 = Field(..., description="The review that was affected.")
    sender: SimpleUserWebhooks


class Action165(Enum):
    review_request_removed = "review_request_removed"


class FieldLinks36(FieldLinks17):
    pass


class Assignee73(Optional[AnswerChosenBy]):
    pass


class Assignee74(Optional[AnswerChosenBy]):
    pass


class EnabledBy14(Optional[AnswerChosenBy]):
    pass


class AutoMerge15(BaseModel):
    commit_message: Optional[str] = Field(..., description="Commit message for the merge commit.")
    commit_title: Optional[str] = Field(..., description="Title for the merge commit message.")
    enabled_by: Optional[EnabledBy14] = Field(..., title="User")
    merge_method: MergeMethod = Field(..., description="The merge method to use.")


class Owner75(Optional[AnswerChosenBy]):
    pass


class Repo49(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner75] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None, description="The default value for a squash merge commit message."
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None, description="The default value for a squash merge commit title."
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User87(Optional[AnswerChosenBy]):
    pass


class Base26(BaseModel):
    label: str
    ref: str
    repo: Repo49 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User87] = Field(..., title="User")


class Owner76(Optional[AnswerChosenBy]):
    pass


class Repo50(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner76] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User88(Optional[AnswerChosenBy]):
    pass


class Head25(BaseModel):
    label: str
    ref: str
    repo: Repo50 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User88] = Field(..., title="User")


class MergedBy9(Optional[AnswerChosenBy]):
    pass


class Creator55(Optional[AnswerChosenBy]):
    pass


class Milestone45(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator55] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class RequestedReviewers28(Optional[AnswerChosenBy]):
    pass


class Parent35(Optional[Parent7]):
    pass


class RequestedReviewers29(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(..., description="Description of the team")
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the team")
    members_url: str
    name: str = Field(..., description="Name of the team")
    node_id: str
    parent: Optional[Parent35] = None
    permission: str = Field(
        ..., description="Permission that the team will have for its repositories"
    )
    privacy: Privacy1
    repositories_url: AnyUrl
    slug: str
    url: AnyUrl = Field(..., description="URL for the team")


class Parent36(Optional[Parent7]):
    pass


class RequestedTeam14(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(..., description="Description of the team")
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the team")
    members_url: str
    name: str = Field(..., description="Name of the team")
    node_id: str
    parent: Optional[Parent36] = None
    permission: str = Field(
        ..., description="Permission that the team will have for its repositories"
    )
    privacy: Privacy1
    repositories_url: AnyUrl
    slug: str
    url: AnyUrl = Field(..., description="URL for the team")


class User89(Optional[AnswerChosenBy]):
    pass


class PullRequest60(BaseModel):
    field_links: FieldLinks36 = Field(..., alias="_links")
    active_lock_reason: ActiveLockReason
    additions: Optional[int] = None
    assignee: Optional[Assignee73] = Field(..., title="User")
    assignees: List[Optional[Assignee74]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    auto_merge: Optional[AutoMerge15] = Field(
        ..., description="The status of auto merging a pull request.", title="PullRequestAutoMerge"
    )
    base: Base26
    body: Optional[str] = None
    changed_files: Optional[int] = None
    closed_at: Optional[AwareDatetime] = None
    comments: Optional[int] = None
    comments_url: AnyUrl
    commits: Optional[int] = None
    commits_url: AnyUrl
    created_at: AwareDatetime
    deletions: Optional[int] = None
    diff_url: AnyUrl
    draft: bool = Field(..., description="Indicates whether or not the pull request is a draft.")
    head: Head25
    html_url: AnyUrl
    id: int
    issue_url: AnyUrl
    labels: List[Label6]
    locked: bool
    maintainer_can_modify: Optional[bool] = Field(
        None, description="Indicates whether maintainers can modify the pull request."
    )
    merge_commit_sha: Optional[str] = None
    mergeable: Optional[bool] = None
    mergeable_state: Optional[str] = None
    merged: Optional[bool] = None
    merged_at: Optional[AwareDatetime] = None
    merged_by: Optional[MergedBy9] = Field(None, title="User")
    milestone: Optional[Milestone45] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int = Field(
        ..., description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: AnyUrl
    rebaseable: Optional[bool] = None
    requested_reviewers: List[Union[Optional[RequestedReviewers28], RequestedReviewers29]]
    requested_teams: List[RequestedTeam14]
    review_comment_url: str
    review_comments: Optional[int] = None
    review_comments_url: AnyUrl
    state: State1 = Field(..., description="State of this Pull Request. Either `open` or `closed`.")
    statuses_url: AnyUrl
    title: str = Field(..., description="The title of the pull request.")
    updated_at: AwareDatetime
    url: AnyUrl
    user: Optional[User89] = Field(..., title="User")


class RequestedReviewer(Optional[AnswerChosenBy]):
    pass


class WebhookPullRequestReviewRequestRemoved1(BaseModel):
    action: Action165
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    number: int = Field(..., description="The pull request number.")
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest60 = Field(..., title="Pull Request")
    repository: RepositoryWebhooks
    requested_reviewer: Optional[RequestedReviewer] = Field(..., title="User")
    sender: SimpleUserWebhooks


class FieldLinks37(FieldLinks17):
    pass


class Assignee75(Optional[AnswerChosenBy]):
    pass


class Assignee76(Optional[AnswerChosenBy]):
    pass


class EnabledBy15(Optional[AnswerChosenBy]):
    pass


class AutoMerge16(BaseModel):
    commit_message: Optional[str] = Field(..., description="Commit message for the merge commit.")
    commit_title: Optional[str] = Field(..., description="Title for the merge commit message.")
    enabled_by: Optional[EnabledBy15] = Field(..., title="User")
    merge_method: MergeMethod = Field(..., description="The merge method to use.")


class Owner77(Optional[AnswerChosenBy]):
    pass


class Repo51(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner77] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User90(Optional[AnswerChosenBy]):
    pass


class Base27(BaseModel):
    label: str
    ref: str
    repo: Repo51 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User90] = Field(..., title="User")


class Owner78(Optional[AnswerChosenBy]):
    pass


class Repo52(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner78] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User91(Optional[AnswerChosenBy]):
    pass


class Head26(BaseModel):
    label: str
    ref: str
    repo: Repo52 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User91] = Field(..., title="User")


class MergedBy10(Optional[AnswerChosenBy]):
    pass


class Creator56(Optional[AnswerChosenBy]):
    pass


class Milestone46(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator56] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class RequestedReviewers30(Optional[AnswerChosenBy]):
    pass


class Parent37(Optional[Parent7]):
    pass


class RequestedReviewers31(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(..., description="Description of the team")
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the team")
    members_url: str
    name: str = Field(..., description="Name of the team")
    node_id: str
    parent: Optional[Parent37] = None
    permission: str = Field(
        ..., description="Permission that the team will have for its repositories"
    )
    privacy: Privacy1
    repositories_url: AnyUrl
    slug: str
    url: AnyUrl = Field(..., description="URL for the team")


class Parent38(Optional[Parent7]):
    pass


class RequestedTeam15(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(..., description="Description of the team")
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the team")
    members_url: str
    name: str = Field(..., description="Name of the team")
    node_id: str
    parent: Optional[Parent38] = None
    permission: str = Field(
        ..., description="Permission that the team will have for its repositories"
    )
    privacy: Privacy1
    repositories_url: AnyUrl
    slug: str
    url: AnyUrl = Field(..., description="URL for the team")


class User92(Optional[AnswerChosenBy]):
    pass


class PullRequest61(BaseModel):
    field_links: FieldLinks37 = Field(..., alias="_links")
    active_lock_reason: ActiveLockReason
    additions: Optional[int] = None
    assignee: Optional[Assignee75] = Field(..., title="User")
    assignees: List[Optional[Assignee76]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    auto_merge: Optional[AutoMerge16] = Field(
        ..., description="The status of auto merging a pull request.", title="PullRequestAutoMerge"
    )
    base: Base27
    body: Optional[str] = None
    changed_files: Optional[int] = None
    closed_at: Optional[AwareDatetime] = None
    comments: Optional[int] = None
    comments_url: AnyUrl
    commits: Optional[int] = None
    commits_url: AnyUrl
    created_at: AwareDatetime
    deletions: Optional[int] = None
    diff_url: AnyUrl
    draft: bool = Field(..., description="Indicates whether or not the pull request is a draft.")
    head: Head26
    html_url: AnyUrl
    id: int
    issue_url: AnyUrl
    labels: List[Label6]
    locked: bool
    maintainer_can_modify: Optional[bool] = Field(
        None, description="Indicates whether maintainers can modify the pull request."
    )
    merge_commit_sha: Optional[str] = None
    mergeable: Optional[bool] = None
    mergeable_state: Optional[str] = None
    merged: Optional[bool] = None
    merged_at: Optional[AwareDatetime] = None
    merged_by: Optional[MergedBy10] = Field(None, title="User")
    milestone: Optional[Milestone46] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int = Field(
        ..., description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: AnyUrl
    rebaseable: Optional[bool] = None
    requested_reviewers: List[Union[Optional[RequestedReviewers30], RequestedReviewers31]]
    requested_teams: List[RequestedTeam15]
    review_comment_url: str
    review_comments: Optional[int] = None
    review_comments_url: AnyUrl
    state: State1 = Field(..., description="State of this Pull Request. Either `open` or `closed`.")
    statuses_url: AnyUrl
    title: str = Field(..., description="The title of the pull request.")
    updated_at: AwareDatetime
    url: AnyUrl
    user: Optional[User92] = Field(..., title="User")


class Parent39(Optional[Parent7]):
    pass


class RequestedTeam16(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(..., description="Description of the team")
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the team")
    members_url: str
    name: str = Field(..., description="Name of the team")
    node_id: str
    parent: Optional[Parent39] = None
    permission: str = Field(
        ..., description="Permission that the team will have for its repositories"
    )
    privacy: Privacy1
    repositories_url: AnyUrl
    slug: str
    url: AnyUrl = Field(..., description="URL for the team")


class WebhookPullRequestReviewRequestRemoved2(BaseModel):
    action: Action165
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    number: int = Field(..., description="The pull request number.")
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest61 = Field(..., title="Pull Request")
    repository: RepositoryWebhooks
    requested_team: RequestedTeam16 = Field(
        ...,
        description="Groups of organization members that gives permissions on specified repositories.",
        title="Team",
    )
    sender: SimpleUserWebhooks


class WebhookPullRequestReviewRequestRemoved(
    RootModel[
        Union[WebhookPullRequestReviewRequestRemoved1, WebhookPullRequestReviewRequestRemoved2]
    ]
):
    root: Union[
        WebhookPullRequestReviewRequestRemoved1, WebhookPullRequestReviewRequestRemoved2
    ] = Field(..., title="pull_request review_request_removed event")


class Action167(Enum):
    review_requested = "review_requested"


class FieldLinks38(FieldLinks17):
    pass


class Assignee77(Optional[Assignee]):
    pass


class Assignee78(Optional[Assignee]):
    pass


class EnabledBy16(Optional[AnswerChosenBy]):
    pass


class AutoMerge17(BaseModel):
    commit_message: Optional[str] = Field(..., description="Commit message for the merge commit.")
    commit_title: Optional[str] = Field(..., description="Title for the merge commit message.")
    enabled_by: Optional[EnabledBy16] = Field(..., title="User")
    merge_method: MergeMethod = Field(..., description="The merge method to use.")


class Owner79(Optional[AnswerChosenBy]):
    pass


class Repo53(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner79] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User93(Optional[AnswerChosenBy]):
    pass


class Base28(BaseModel):
    label: str
    ref: str
    repo: Repo53 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User93] = Field(..., title="User")


class Owner80(Optional[AnswerChosenBy]):
    pass


class Repo54(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner80] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User94(Optional[AnswerChosenBy]):
    pass


class Head27(BaseModel):
    label: str
    ref: str
    repo: Repo54 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User94] = Field(..., title="User")


class MergedBy11(Optional[AnswerChosenBy]):
    pass


class Creator57(Optional[Assignee]):
    pass


class Milestone47(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator57] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class RequestedReviewers32(Optional[AnswerChosenBy]):
    pass


class Parent40(Optional[Parent7]):
    pass


class RequestedReviewers33(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(..., description="Description of the team")
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the team")
    members_url: str
    name: str = Field(..., description="Name of the team")
    node_id: str
    parent: Optional[Parent40] = None
    permission: str = Field(
        ..., description="Permission that the team will have for its repositories"
    )
    privacy: Privacy1
    repositories_url: AnyUrl
    slug: str
    url: AnyUrl = Field(..., description="URL for the team")


class Parent41(Optional[Parent7]):
    pass


class RequestedTeam17(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent41] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class User95(Optional[Assignee]):
    pass


class PullRequest62(BaseModel):
    field_links: FieldLinks38 = Field(..., alias="_links")
    active_lock_reason: ActiveLockReason
    additions: Optional[int] = None
    assignee: Optional[Assignee77] = Field(..., title="User")
    assignees: List[Optional[Assignee78]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    auto_merge: Optional[AutoMerge17] = Field(
        ..., description="The status of auto merging a pull request.", title="PullRequestAutoMerge"
    )
    base: Base28
    body: Optional[str] = None
    changed_files: Optional[int] = None
    closed_at: Optional[AwareDatetime] = None
    comments: Optional[int] = None
    comments_url: AnyUrl
    commits: Optional[int] = None
    commits_url: AnyUrl
    created_at: AwareDatetime
    deletions: Optional[int] = None
    diff_url: AnyUrl
    draft: bool = Field(..., description="Indicates whether or not the pull request is a draft.")
    head: Head27
    html_url: AnyUrl
    id: int
    issue_url: AnyUrl
    labels: List[Label6]
    locked: bool
    maintainer_can_modify: Optional[bool] = Field(
        None, description="Indicates whether maintainers can modify the pull request."
    )
    merge_commit_sha: Optional[str] = None
    mergeable: Optional[bool] = None
    mergeable_state: Optional[str] = None
    merged: Optional[bool] = None
    merged_at: Optional[AwareDatetime] = None
    merged_by: Optional[MergedBy11] = Field(None, title="User")
    milestone: Optional[Milestone47] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int = Field(
        ..., description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: AnyUrl
    rebaseable: Optional[bool] = None
    requested_reviewers: List[Union[Optional[RequestedReviewers32], RequestedReviewers33]]
    requested_teams: List[RequestedTeam17]
    review_comment_url: str
    review_comments: Optional[int] = None
    review_comments_url: AnyUrl
    state: State1 = Field(..., description="State of this Pull Request. Either `open` or `closed`.")
    statuses_url: AnyUrl
    title: str = Field(..., description="The title of the pull request.")
    updated_at: AwareDatetime
    url: AnyUrl
    user: Optional[User95] = Field(..., title="User")


class RequestedReviewer1(Optional[Assignee]):
    pass


class WebhookPullRequestReviewRequested1(BaseModel):
    action: Action167
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    number: int = Field(..., description="The pull request number.")
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest62 = Field(..., title="Pull Request")
    repository: RepositoryWebhooks
    requested_reviewer: Optional[RequestedReviewer1] = Field(..., title="User")
    sender: SimpleUserWebhooks


class FieldLinks39(FieldLinks17):
    pass


class Assignee79(Optional[Assignee]):
    pass


class Assignee80(Optional[Assignee]):
    pass


class EnabledBy17(Optional[AnswerChosenBy]):
    pass


class AutoMerge18(BaseModel):
    commit_message: Optional[str] = Field(..., description="Commit message for the merge commit.")
    commit_title: Optional[str] = Field(..., description="Title for the merge commit message.")
    enabled_by: Optional[EnabledBy17] = Field(..., title="User")
    merge_method: MergeMethod = Field(..., description="The merge method to use.")


class Owner81(Optional[AnswerChosenBy]):
    pass


class Repo55(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner81] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User96(Optional[AnswerChosenBy]):
    pass


class Base29(BaseModel):
    label: str
    ref: str
    repo: Repo55 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User96] = Field(..., title="User")


class Owner82(Optional[AnswerChosenBy]):
    pass


class Repo56(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner82] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User97(Optional[AnswerChosenBy]):
    pass


class Head28(BaseModel):
    label: str
    ref: str
    repo: Repo56 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User97] = Field(..., title="User")


class MergedBy12(Optional[AnswerChosenBy]):
    pass


class Creator58(Optional[Assignee]):
    pass


class Milestone48(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator58] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class RequestedReviewers34(Optional[AnswerChosenBy]):
    pass


class Parent42(Optional[Parent7]):
    pass


class RequestedReviewers35(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent42] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class Parent43(Optional[Parent7]):
    pass


class RequestedTeam18(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent43] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class User98(Optional[Assignee]):
    pass


class PullRequest63(BaseModel):
    field_links: FieldLinks39 = Field(..., alias="_links")
    active_lock_reason: ActiveLockReason
    additions: Optional[int] = None
    assignee: Optional[Assignee79] = Field(..., title="User")
    assignees: List[Optional[Assignee80]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    auto_merge: Optional[AutoMerge18] = Field(
        ..., description="The status of auto merging a pull request.", title="PullRequestAutoMerge"
    )
    base: Base29
    body: Optional[str] = None
    changed_files: Optional[int] = None
    closed_at: Optional[AwareDatetime] = None
    comments: Optional[int] = None
    comments_url: AnyUrl
    commits: Optional[int] = None
    commits_url: AnyUrl
    created_at: AwareDatetime
    deletions: Optional[int] = None
    diff_url: AnyUrl
    draft: bool = Field(..., description="Indicates whether or not the pull request is a draft.")
    head: Head28
    html_url: AnyUrl
    id: int
    issue_url: AnyUrl
    labels: List[Label6]
    locked: bool
    maintainer_can_modify: Optional[bool] = Field(
        None, description="Indicates whether maintainers can modify the pull request."
    )
    merge_commit_sha: Optional[str] = None
    mergeable: Optional[bool] = None
    mergeable_state: Optional[str] = None
    merged: Optional[bool] = None
    merged_at: Optional[AwareDatetime] = None
    merged_by: Optional[MergedBy12] = Field(None, title="User")
    milestone: Optional[Milestone48] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int = Field(
        ..., description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: AnyUrl
    rebaseable: Optional[bool] = None
    requested_reviewers: List[Union[Optional[RequestedReviewers34], RequestedReviewers35]]
    requested_teams: List[RequestedTeam18]
    review_comment_url: str
    review_comments: Optional[int] = None
    review_comments_url: AnyUrl
    state: State1 = Field(..., description="State of this Pull Request. Either `open` or `closed`.")
    statuses_url: AnyUrl
    title: str = Field(..., description="The title of the pull request.")
    updated_at: AwareDatetime
    url: AnyUrl
    user: Optional[User98] = Field(..., title="User")


class Parent44(Optional[Parent7]):
    pass


class RequestedTeam19(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent44] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class WebhookPullRequestReviewRequested2(BaseModel):
    action: Action167
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    number: int = Field(..., description="The pull request number.")
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest63 = Field(..., title="Pull Request")
    repository: RepositoryWebhooks
    requested_team: RequestedTeam19 = Field(
        ...,
        description="Groups of organization members that gives permissions on specified repositories.",
        title="Team",
    )
    sender: SimpleUserWebhooks


class WebhookPullRequestReviewRequested(
    RootModel[Union[WebhookPullRequestReviewRequested1, WebhookPullRequestReviewRequested2]]
):
    root: Union[WebhookPullRequestReviewRequested1, WebhookPullRequestReviewRequested2] = Field(
        ..., title="pull_request review_requested event"
    )


class Action169(Enum):
    submitted = "submitted"


class FieldLinks40(FieldLinks17):
    pass


class Assignee81(Optional[Assignee]):
    pass


class Assignee82(Optional[Assignee]):
    pass


class EnabledBy18(Optional[AnswerChosenBy]):
    pass


class AutoMerge19(BaseModel):
    commit_message: Optional[str] = Field(..., description="Commit message for the merge commit.")
    commit_title: Optional[str] = Field(..., description="Title for the merge commit message.")
    enabled_by: Optional[EnabledBy18] = Field(..., title="User")
    merge_method: MergeMethod = Field(..., description="The merge method to use.")


class Owner83(Optional[AnswerChosenBy]):
    pass


class Repo57(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner83] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User99(Optional[AnswerChosenBy]):
    pass


class Base30(BaseModel):
    label: str
    ref: str
    repo: Repo57 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User99] = Field(..., title="User")


class Owner84(Optional[AnswerChosenBy]):
    pass


class Repo58(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner84] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User100(Optional[AnswerChosenBy]):
    pass


class Head29(BaseModel):
    label: Optional[str] = None
    ref: str
    repo: Optional[Repo58] = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User100] = Field(..., title="User")


class Creator59(Optional[Assignee]):
    pass


class Milestone49(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator59] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class RequestedReviewers36(Optional[Assignee]):
    pass


class Parent45(Optional[Parent7]):
    pass


class RequestedReviewers37(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(..., description="Description of the team")
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the team")
    members_url: str
    name: str = Field(..., description="Name of the team")
    node_id: str
    parent: Optional[Parent45] = None
    permission: str = Field(
        ..., description="Permission that the team will have for its repositories"
    )
    privacy: Privacy1
    repositories_url: AnyUrl
    slug: str
    url: AnyUrl = Field(..., description="URL for the team")


class Parent46(Optional[Parent7]):
    pass


class RequestedTeam20(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent46] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class User101(Optional[Assignee]):
    pass


class PullRequest64(BaseModel):
    field_links: FieldLinks40 = Field(..., alias="_links")
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee81] = Field(..., title="User")
    assignees: List[Optional[Assignee82]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    auto_merge: Optional[AutoMerge19] = Field(
        ..., description="The status of auto merging a pull request.", title="PullRequestAutoMerge"
    )
    base: Base30
    body: Optional[str] = None
    closed_at: Optional[str] = None
    comments_url: AnyUrl
    commits_url: AnyUrl
    created_at: str
    diff_url: AnyUrl
    draft: bool
    head: Head29
    html_url: AnyUrl
    id: int
    issue_url: AnyUrl
    labels: List[Label6]
    locked: bool
    merge_commit_sha: Optional[str] = None
    merged_at: Optional[str] = None
    milestone: Optional[Milestone49] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    patch_url: AnyUrl
    requested_reviewers: List[Union[Optional[RequestedReviewers36], RequestedReviewers37]]
    requested_teams: List[RequestedTeam20]
    review_comment_url: str
    review_comments_url: AnyUrl
    state: State1
    statuses_url: AnyUrl
    title: str
    updated_at: str
    url: AnyUrl
    user: Optional[User101] = Field(..., title="User")


class PullRequest65(Link):
    pass


class FieldLinks41(BaseModel):
    html: Html3 = Field(..., title="Link")
    pull_request: PullRequest65 = Field(..., title="Link")


class User102(Optional[AnswerChosenBy]):
    pass


class Review2(BaseModel):
    field_links: FieldLinks41 = Field(..., alias="_links")
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: Optional[str] = Field(..., description="The text of the review.")
    commit_id: str = Field(..., description="A commit SHA for the review.")
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the review")
    node_id: str
    pull_request_url: AnyUrl
    state: str
    submitted_at: Optional[AwareDatetime] = None
    user: Optional[User102] = Field(..., title="User")


class WebhookPullRequestReviewSubmitted(BaseModel):
    action: Action169
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest64 = Field(..., title="Simple Pull Request")
    repository: RepositoryWebhooks
    review: Review2 = Field(..., description="The review that was affected.")
    sender: SimpleUserWebhooks


class Action170(Enum):
    resolved = "resolved"


class FieldLinks42(FieldLinks17):
    pass


class Assignee83(Optional[AnswerChosenBy]):
    pass


class Assignee84(Optional[AnswerChosenBy]):
    pass


class EnabledBy19(Optional[AnswerChosenBy]):
    pass


class AutoMerge20(BaseModel):
    commit_message: Optional[str] = Field(..., description="Commit message for the merge commit.")
    commit_title: Optional[str] = Field(..., description="Title for the merge commit message.")
    enabled_by: Optional[EnabledBy19] = Field(..., title="User")
    merge_method: MergeMethod = Field(..., description="The merge method to use.")


class Owner85(Optional[AnswerChosenBy]):
    pass


class Repo59(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner85] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User103(Optional[AnswerChosenBy]):
    pass


class Base31(BaseModel):
    label: str
    ref: str
    repo: Repo59 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User103] = Field(..., title="User")


class Owner86(Optional[AnswerChosenBy]):
    pass


class Repo60(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner86] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User104(Optional[AnswerChosenBy]):
    pass


class Head30(BaseModel):
    label: Optional[str] = None
    ref: str
    repo: Optional[Repo60] = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User104] = Field(..., title="User")


class Creator60(Optional[AnswerChosenBy]):
    pass


class Milestone50(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator60] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class RequestedReviewers38(Optional[Assignee]):
    pass


class Parent47(Optional[Parent7]):
    pass


class RequestedReviewers39(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(..., description="Description of the team")
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the team")
    members_url: str
    name: str = Field(..., description="Name of the team")
    node_id: str
    parent: Optional[Parent47] = None
    permission: str = Field(
        ..., description="Permission that the team will have for its repositories"
    )
    privacy: Privacy1
    repositories_url: AnyUrl
    slug: str
    url: AnyUrl = Field(..., description="URL for the team")


class Parent48(Optional[Parent7]):
    pass


class RequestedTeam21(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent48] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class User105(Optional[Assignee]):
    pass


class PullRequest66(BaseModel):
    field_links: FieldLinks42 = Field(..., alias="_links")
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee83] = Field(..., title="User")
    assignees: List[Optional[Assignee84]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    auto_merge: Optional[AutoMerge20] = Field(
        ..., description="The status of auto merging a pull request.", title="PullRequestAutoMerge"
    )
    base: Base31
    body: Optional[str] = None
    closed_at: Optional[str] = None
    comments_url: AnyUrl
    commits_url: AnyUrl
    created_at: str
    diff_url: AnyUrl
    draft: bool
    head: Head30
    html_url: AnyUrl
    id: int
    issue_url: AnyUrl
    labels: List[Label6]
    locked: bool
    merge_commit_sha: Optional[str] = None
    merged_at: Optional[str] = None
    milestone: Optional[Milestone50] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    patch_url: AnyUrl
    requested_reviewers: List[Union[Optional[RequestedReviewers38], RequestedReviewers39]]
    requested_teams: List[RequestedTeam21]
    review_comment_url: str
    review_comments_url: AnyUrl
    state: State1
    statuses_url: AnyUrl
    title: str
    updated_at: str
    url: AnyUrl
    user: Optional[User105] = Field(..., title="User")


class PullRequest67(Link):
    pass


class FieldLinks43(BaseModel):
    html: Html3 = Field(..., title="Link")
    pull_request: PullRequest67 = Field(..., title="Link")
    self: Self2 = Field(..., title="Link")


class User106(Optional[Assignee]):
    pass


class Comment10(BaseModel):
    field_links: FieldLinks43 = Field(..., alias="_links")
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: str = Field(..., description="The text of the comment.")
    commit_id: str = Field(..., description="The SHA of the commit to which the comment applies.")
    created_at: AwareDatetime
    diff_hunk: str = Field(..., description="The diff of the line that the comment refers to.")
    html_url: AnyUrl = Field(..., description="HTML URL for the pull request review comment.")
    id: int = Field(..., description="The ID of the pull request review comment.")
    in_reply_to_id: Optional[int] = Field(None, description="The comment ID to reply to.")
    line: Optional[int] = Field(
        ...,
        description="The line of the blob to which the comment applies. The last line of the range for a multi-line comment",
    )
    node_id: str = Field(..., description="The node ID of the pull request review comment.")
    original_commit_id: str = Field(
        ..., description="The SHA of the original commit to which the comment applies."
    )
    original_line: Optional[int] = Field(
        ...,
        description="The line of the blob to which the comment applies. The last line of the range for a multi-line comment",
    )
    original_position: int = Field(
        ..., description="The index of the original line in the diff to which the comment applies."
    )
    original_start_line: Optional[int] = Field(
        ..., description="The first line of the range for a multi-line comment."
    )
    path: str = Field(
        ..., description="The relative path of the file to which the comment applies."
    )
    position: Optional[int] = Field(
        ..., description="The line index in the diff to which the comment applies."
    )
    pull_request_review_id: Optional[int] = Field(
        ..., description="The ID of the pull request review to which the comment belongs."
    )
    pull_request_url: AnyUrl = Field(
        ..., description="URL for the pull request that the review comment belongs to."
    )
    reactions: Reactions31 = Field(..., title="Reactions")
    side: Side = Field(
        ..., description="The side of the first line of the range for a multi-line comment."
    )
    start_line: Optional[int] = Field(
        ..., description="The first line of the range for a multi-line comment."
    )
    start_side: StartSide = Field(
        ..., description="The side of the first line of the range for a multi-line comment."
    )
    subject_type: Optional[SubjectType] = Field(
        None,
        description="The level at which the comment is targeted, can be a diff line or a file.",
    )
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the pull request review comment")
    user: Optional[User106] = Field(..., title="User")


class Thread1(BaseModel):
    comments: List[Comment10]
    node_id: str


class WebhookPullRequestReviewThreadResolved(BaseModel):
    action: Action170
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest66 = Field(..., title="Simple Pull Request")
    repository: RepositoryWebhooks
    sender: Optional[SimpleUserWebhooks] = None
    thread: Thread1


class Action171(Enum):
    unresolved = "unresolved"


class FieldLinks44(FieldLinks17):
    pass


class Assignee85(Optional[AnswerChosenBy]):
    pass


class Assignee86(Optional[AnswerChosenBy]):
    pass


class EnabledBy20(Optional[AnswerChosenBy]):
    pass


class AutoMerge21(BaseModel):
    commit_message: Optional[str] = Field(..., description="Commit message for the merge commit.")
    commit_title: str = Field(..., description="Title for the merge commit message.")
    enabled_by: Optional[EnabledBy20] = Field(..., title="User")
    merge_method: MergeMethod = Field(..., description="The merge method to use.")


class Owner87(Optional[AnswerChosenBy]):
    pass


class Repo61(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner87] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User107(Optional[AnswerChosenBy]):
    pass


class Base32(BaseModel):
    label: str
    ref: str
    repo: Repo61 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User107] = Field(..., title="User")


class Owner88(Optional[AnswerChosenBy]):
    pass


class Repo62(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner88] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User108(Optional[AnswerChosenBy]):
    pass


class Head31(BaseModel):
    label: str
    ref: str
    repo: Repo62 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User108] = Field(..., title="User")


class Creator61(Optional[AnswerChosenBy]):
    pass


class Milestone51(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator61] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class RequestedReviewers40(Optional[AnswerChosenBy]):
    pass


class Parent49(Optional[Parent7]):
    pass


class RequestedReviewers41(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent49] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class Parent50(Optional[Parent7]):
    pass


class RequestedTeam22(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent50] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class User109(Optional[AnswerChosenBy]):
    pass


class PullRequest68(BaseModel):
    field_links: FieldLinks44 = Field(..., alias="_links")
    active_lock_reason: ActiveLockReason
    assignee: Optional[Assignee85] = Field(..., title="User")
    assignees: List[Optional[Assignee86]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    auto_merge: Optional[AutoMerge21] = Field(
        ..., description="The status of auto merging a pull request.", title="PullRequestAutoMerge"
    )
    base: Base32
    body: Optional[str] = None
    closed_at: Optional[str] = None
    comments_url: AnyUrl
    commits_url: AnyUrl
    created_at: str
    diff_url: AnyUrl
    draft: bool
    head: Head31
    html_url: AnyUrl
    id: int
    issue_url: AnyUrl
    labels: List[Label6]
    locked: bool
    merge_commit_sha: Optional[str] = None
    merged_at: Optional[str] = None
    milestone: Optional[Milestone51] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int
    patch_url: AnyUrl
    requested_reviewers: List[Union[Optional[RequestedReviewers40], RequestedReviewers41]]
    requested_teams: List[RequestedTeam22]
    review_comment_url: str
    review_comments_url: AnyUrl
    state: State1
    statuses_url: AnyUrl
    title: str
    updated_at: str
    url: AnyUrl
    user: Optional[User109] = Field(..., title="User")


class PullRequest69(Link):
    pass


class FieldLinks45(BaseModel):
    html: Html3 = Field(..., title="Link")
    pull_request: PullRequest69 = Field(..., title="Link")
    self: Self2 = Field(..., title="Link")


class User110(Optional[AnswerChosenBy]):
    pass


class Comment11(BaseModel):
    field_links: FieldLinks45 = Field(..., alias="_links")
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    body: str = Field(..., description="The text of the comment.")
    commit_id: str = Field(..., description="The SHA of the commit to which the comment applies.")
    created_at: AwareDatetime
    diff_hunk: str = Field(..., description="The diff of the line that the comment refers to.")
    html_url: AnyUrl = Field(..., description="HTML URL for the pull request review comment.")
    id: int = Field(..., description="The ID of the pull request review comment.")
    in_reply_to_id: Optional[int] = Field(None, description="The comment ID to reply to.")
    line: Optional[int] = Field(
        ...,
        description="The line of the blob to which the comment applies. The last line of the range for a multi-line comment",
    )
    node_id: str = Field(..., description="The node ID of the pull request review comment.")
    original_commit_id: str = Field(
        ..., description="The SHA of the original commit to which the comment applies."
    )
    original_line: int = Field(
        ...,
        description="The line of the blob to which the comment applies. The last line of the range for a multi-line comment",
    )
    original_position: int = Field(
        ..., description="The index of the original line in the diff to which the comment applies."
    )
    original_start_line: Optional[int] = Field(
        ..., description="The first line of the range for a multi-line comment."
    )
    path: str = Field(
        ..., description="The relative path of the file to which the comment applies."
    )
    position: Optional[int] = Field(
        ..., description="The line index in the diff to which the comment applies."
    )
    pull_request_review_id: Optional[int] = Field(
        ..., description="The ID of the pull request review to which the comment belongs."
    )
    pull_request_url: AnyUrl = Field(
        ..., description="URL for the pull request that the review comment belongs to."
    )
    reactions: Reactions31 = Field(..., title="Reactions")
    side: Side = Field(
        ..., description="The side of the first line of the range for a multi-line comment."
    )
    start_line: Optional[int] = Field(
        ..., description="The first line of the range for a multi-line comment."
    )
    start_side: StartSide = Field(
        ..., description="The side of the first line of the range for a multi-line comment."
    )
    subject_type: Optional[SubjectType] = Field(
        None,
        description="The level at which the comment is targeted, can be a diff line or a file.",
    )
    updated_at: AwareDatetime
    url: AnyUrl = Field(..., description="URL for the pull request review comment")
    user: Optional[User110] = Field(..., title="User")


class Thread2(BaseModel):
    comments: List[Comment11]
    node_id: str


class WebhookPullRequestReviewThreadUnresolved(BaseModel):
    action: Action171
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest68 = Field(..., title="Simple Pull Request")
    repository: RepositoryWebhooks
    sender: Optional[SimpleUserWebhooks] = None
    thread: Thread2


class Action172(Enum):
    synchronize = "synchronize"


class FieldLinks46(FieldLinks17):
    pass


class Assignee87(Optional[Assignee]):
    pass


class Assignee88(Optional[Assignee]):
    pass


class EnabledBy21(Optional[AnswerChosenBy]):
    pass


class AutoMerge22(BaseModel):
    commit_message: Optional[str] = Field(..., description="Commit message for the merge commit.")
    commit_title: Optional[str] = Field(..., description="Title for the merge commit message.")
    enabled_by: Optional[EnabledBy21] = Field(..., title="User")
    merge_method: MergeMethod = Field(..., description="The merge method to use.")


class Owner89(Optional[AnswerChosenBy]):
    pass


class Repo63(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner89] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User111(Optional[AnswerChosenBy]):
    pass


class Base33(BaseModel):
    label: str
    ref: str
    repo: Repo63 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User111] = Field(..., title="User")


class Owner90(Optional[AnswerChosenBy]):
    pass


class Repo64(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None, description="The default value for a merge commit message."
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None, description="The default value for a merge commit message title."
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner90] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User112(Optional[AnswerChosenBy]):
    pass


class Head32(BaseModel):
    label: str
    ref: str
    repo: Repo64 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User112] = Field(..., title="User")


class MergedBy13(Optional[AnswerChosenBy]):
    pass


class Creator62(Optional[Assignee]):
    pass


class Milestone52(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator62] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class RequestedReviewers42(Optional[Assignee]):
    pass


class Parent51(Optional[Parent7]):
    pass


class RequestedReviewers43(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(..., description="Description of the team")
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the team")
    members_url: str
    name: str = Field(..., description="Name of the team")
    node_id: str
    parent: Optional[Parent51] = None
    permission: str = Field(
        ..., description="Permission that the team will have for its repositories"
    )
    privacy: Privacy1
    repositories_url: AnyUrl
    slug: str
    url: AnyUrl = Field(..., description="URL for the team")


class Parent52(Optional[Parent7]):
    pass


class RequestedTeam23(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent52] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class User113(Optional[Assignee]):
    pass


class PullRequest70(BaseModel):
    field_links: FieldLinks46 = Field(..., alias="_links")
    active_lock_reason: ActiveLockReason
    additions: Optional[int] = None
    assignee: Optional[Assignee87] = Field(..., title="User")
    assignees: List[Optional[Assignee88]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    auto_merge: Optional[AutoMerge22] = Field(
        ..., description="The status of auto merging a pull request.", title="PullRequestAutoMerge"
    )
    base: Base33
    body: Optional[str] = None
    changed_files: Optional[int] = None
    closed_at: Optional[AwareDatetime] = None
    comments: Optional[int] = None
    comments_url: AnyUrl
    commits: Optional[int] = None
    commits_url: AnyUrl
    created_at: AwareDatetime
    deletions: Optional[int] = None
    diff_url: AnyUrl
    draft: bool = Field(..., description="Indicates whether or not the pull request is a draft.")
    head: Head32
    html_url: AnyUrl
    id: int
    issue_url: AnyUrl
    labels: List[Label6]
    locked: bool
    maintainer_can_modify: Optional[bool] = Field(
        None, description="Indicates whether maintainers can modify the pull request."
    )
    merge_commit_sha: Optional[str] = None
    mergeable: Optional[bool] = None
    mergeable_state: Optional[str] = None
    merged: Optional[bool] = None
    merged_at: Optional[AwareDatetime] = None
    merged_by: Optional[MergedBy13] = Field(None, title="User")
    milestone: Optional[Milestone52] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int = Field(
        ..., description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: AnyUrl
    rebaseable: Optional[bool] = None
    requested_reviewers: List[Union[Optional[RequestedReviewers42], RequestedReviewers43]]
    requested_teams: List[RequestedTeam23]
    review_comment_url: str
    review_comments: Optional[int] = None
    review_comments_url: AnyUrl
    state: State1 = Field(..., description="State of this Pull Request. Either `open` or `closed`.")
    statuses_url: AnyUrl
    title: str = Field(..., description="The title of the pull request.")
    updated_at: AwareDatetime
    url: AnyUrl
    user: Optional[User113] = Field(..., title="User")


class WebhookPullRequestSynchronize(BaseModel):
    action: Action172
    after: str
    before: str
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    number: int = Field(..., description="The pull request number.")
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest70 = Field(..., title="Pull Request")
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Assignee89(Optional[Assignee]):
    pass


class FieldLinks47(FieldLinks17):
    pass


class Assignee90(Optional[Assignee]):
    pass


class Assignee91(Optional[Assignee]):
    pass


class EnabledBy22(Optional[AnswerChosenBy]):
    pass


class AutoMerge23(BaseModel):
    commit_message: Optional[str] = Field(..., description="Commit message for the merge commit.")
    commit_title: Optional[str] = Field(..., description="Title for the merge commit message.")
    enabled_by: Optional[EnabledBy22] = Field(..., title="User")
    merge_method: MergeMethod = Field(..., description="The merge method to use.")


class Owner91(Optional[AnswerChosenBy]):
    pass


class Repo65(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner91] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User114(Optional[AnswerChosenBy]):
    pass


class Base34(BaseModel):
    label: Optional[str] = None
    ref: str
    repo: Repo65 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User114] = Field(..., title="User")


class Owner92(Optional[AnswerChosenBy]):
    pass


class Repo66(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner92] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User115(Optional[AnswerChosenBy]):
    pass


class Head33(BaseModel):
    label: Optional[str] = None
    ref: str
    repo: Optional[Repo66] = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User115] = Field(..., title="User")


class MergedBy14(Optional[Assignee]):
    pass


class Creator63(Optional[Assignee]):
    pass


class Milestone53(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator63] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class RequestedReviewers44(Optional[Assignee]):
    pass


class Parent53(Optional[Parent7]):
    pass


class RequestedReviewers45(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(..., description="Description of the team")
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the team")
    members_url: str
    name: str = Field(..., description="Name of the team")
    node_id: str
    parent: Optional[Parent53] = None
    permission: str = Field(
        ..., description="Permission that the team will have for its repositories"
    )
    privacy: Privacy1
    repositories_url: AnyUrl
    slug: str
    url: AnyUrl = Field(..., description="URL for the team")


class Parent54(Optional[Parent7]):
    pass


class RequestedTeam24(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent54] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class User116(Optional[Assignee]):
    pass


class PullRequest71(BaseModel):
    field_links: FieldLinks47 = Field(..., alias="_links")
    active_lock_reason: ActiveLockReason
    additions: Optional[int] = None
    assignee: Optional[Assignee90] = Field(..., title="User")
    assignees: List[Optional[Assignee91]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    auto_merge: Optional[AutoMerge23] = Field(
        ..., description="The status of auto merging a pull request.", title="PullRequestAutoMerge"
    )
    base: Base34
    body: Optional[str] = None
    changed_files: Optional[int] = None
    closed_at: Optional[AwareDatetime] = None
    comments: Optional[int] = None
    comments_url: AnyUrl
    commits: Optional[int] = None
    commits_url: AnyUrl
    created_at: AwareDatetime
    deletions: Optional[int] = None
    diff_url: AnyUrl
    draft: bool = Field(..., description="Indicates whether or not the pull request is a draft.")
    head: Head33
    html_url: AnyUrl
    id: int
    issue_url: AnyUrl
    labels: List[Label6]
    locked: bool
    maintainer_can_modify: Optional[bool] = Field(
        None, description="Indicates whether maintainers can modify the pull request."
    )
    merge_commit_sha: Optional[str] = None
    mergeable: Optional[bool] = None
    mergeable_state: Optional[str] = None
    merged: Optional[bool] = None
    merged_at: Optional[AwareDatetime] = None
    merged_by: Optional[MergedBy14] = Field(None, title="User")
    milestone: Optional[Milestone53] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int = Field(
        ..., description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: AnyUrl
    rebaseable: Optional[bool] = None
    requested_reviewers: List[Union[Optional[RequestedReviewers44], RequestedReviewers45]]
    requested_teams: List[RequestedTeam24]
    review_comment_url: str
    review_comments: Optional[int] = None
    review_comments_url: AnyUrl
    state: State1 = Field(..., description="State of this Pull Request. Either `open` or `closed`.")
    statuses_url: AnyUrl
    title: str = Field(..., description="The title of the pull request.")
    updated_at: AwareDatetime
    url: AnyUrl
    user: Optional[User116] = Field(..., title="User")


class WebhookPullRequestUnassigned(BaseModel):
    action: Action81
    assignee: Optional[Assignee89] = Field(None, title="User")
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    number: int = Field(..., description="The pull request number.")
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest71 = Field(..., title="Pull Request")
    repository: RepositoryWebhooks
    sender: Optional[SimpleUserWebhooks] = None


class FieldLinks48(FieldLinks17):
    pass


class Assignee92(Optional[Assignee]):
    pass


class Assignee93(Optional[Assignee]):
    pass


class EnabledBy23(Optional[AnswerChosenBy]):
    pass


class AutoMerge24(BaseModel):
    commit_message: Optional[str] = Field(..., description="Commit message for the merge commit.")
    commit_title: Optional[str] = Field(..., description="Title for the merge commit message.")
    enabled_by: Optional[EnabledBy23] = Field(..., title="User")
    merge_method: MergeMethod = Field(..., description="The merge method to use.")


class Owner93(Optional[AnswerChosenBy]):
    pass


class Repo67(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner93] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User117(Optional[AnswerChosenBy]):
    pass


class Base35(BaseModel):
    label: str
    ref: str
    repo: Repo67 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User117] = Field(..., title="User")


class Owner94(Optional[AnswerChosenBy]):
    pass


class Repo68(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None, description="The default value for a merge commit message."
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None, description="The default value for a merge commit message title."
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner94] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User118(Optional[AnswerChosenBy]):
    pass


class Head34(BaseModel):
    label: Optional[str] = None
    ref: str
    repo: Optional[Repo68] = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User118] = Field(..., title="User")


class MergedBy15(Optional[AnswerChosenBy]):
    pass


class Creator64(Optional[Assignee]):
    pass


class Milestone54(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator64] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class RequestedReviewers46(Optional[Assignee]):
    pass


class Parent55(Optional[Parent7]):
    pass


class RequestedReviewers47(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(..., description="Description of the team")
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the team")
    members_url: str
    name: str = Field(..., description="Name of the team")
    node_id: str
    parent: Optional[Parent55] = None
    permission: str = Field(
        ..., description="Permission that the team will have for its repositories"
    )
    privacy: Privacy1
    repositories_url: AnyUrl
    slug: str
    url: AnyUrl = Field(..., description="URL for the team")


class Parent56(Optional[Parent7]):
    pass


class RequestedTeam25(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent56] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class User119(Optional[Assignee]):
    pass


class PullRequest72(BaseModel):
    field_links: FieldLinks48 = Field(..., alias="_links")
    active_lock_reason: ActiveLockReason
    additions: Optional[int] = None
    assignee: Optional[Assignee92] = Field(..., title="User")
    assignees: List[Optional[Assignee93]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    auto_merge: Optional[AutoMerge24] = Field(
        ..., description="The status of auto merging a pull request.", title="PullRequestAutoMerge"
    )
    base: Base35
    body: Optional[str] = None
    changed_files: Optional[int] = None
    closed_at: Optional[AwareDatetime] = None
    comments: Optional[int] = None
    comments_url: AnyUrl
    commits: Optional[int] = None
    commits_url: AnyUrl
    created_at: AwareDatetime
    deletions: Optional[int] = None
    diff_url: AnyUrl
    draft: bool = Field(..., description="Indicates whether or not the pull request is a draft.")
    head: Head34
    html_url: AnyUrl
    id: int
    issue_url: AnyUrl
    labels: List[Label6]
    locked: bool
    maintainer_can_modify: Optional[bool] = Field(
        None, description="Indicates whether maintainers can modify the pull request."
    )
    merge_commit_sha: Optional[str] = None
    mergeable: Optional[bool] = None
    mergeable_state: Optional[str] = None
    merged: Optional[bool] = None
    merged_at: Optional[AwareDatetime] = None
    merged_by: Optional[MergedBy15] = Field(None, title="User")
    milestone: Optional[Milestone54] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int = Field(
        ..., description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: AnyUrl
    rebaseable: Optional[bool] = None
    requested_reviewers: List[Union[Optional[RequestedReviewers46], RequestedReviewers47]]
    requested_teams: List[RequestedTeam25]
    review_comment_url: str
    review_comments: Optional[int] = None
    review_comments_url: AnyUrl
    state: State1 = Field(..., description="State of this Pull Request. Either `open` or `closed`.")
    statuses_url: AnyUrl
    title: str = Field(..., description="The title of the pull request.")
    updated_at: AwareDatetime
    url: AnyUrl
    user: Optional[User119] = Field(..., title="User")


class WebhookPullRequestUnlabeled(BaseModel):
    action: Action53
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    label: Optional[Label6] = Field(None, title="Label")
    number: int = Field(..., description="The pull request number.")
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest72 = Field(..., title="Pull Request")
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class FieldLinks49(FieldLinks17):
    pass


class Assignee94(Optional[AnswerChosenBy]):
    pass


class Assignee95(Optional[AnswerChosenBy]):
    pass


class EnabledBy24(Optional[AnswerChosenBy]):
    pass


class AutoMerge25(BaseModel):
    commit_message: Optional[str] = Field(..., description="Commit message for the merge commit.")
    commit_title: str = Field(..., description="Title for the merge commit message.")
    enabled_by: Optional[EnabledBy24] = Field(..., title="User")
    merge_method: MergeMethod = Field(..., description="The merge method to use.")


class Owner95(Optional[AnswerChosenBy]):
    pass


class Repo69(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner95] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User120(Optional[AnswerChosenBy]):
    pass


class Base36(BaseModel):
    label: str
    ref: str
    repo: Repo69 = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User120] = Field(..., title="User")


class Owner96(Optional[AnswerChosenBy]):
    pass


class Repo70(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merge_commit_message: Optional[MergeCommitMessage] = Field(
        None,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Optional[MergeCommitTitle] = Field(
        None,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner96] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    squash_merge_commit_message: Optional[SquashMergeCommitMessage] = Field(
        None,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Optional[SquashMergeCommitTitle] = Field(
        None,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    use_squash_pr_title_as_default: Optional[bool] = Field(
        False,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class User121(Optional[AnswerChosenBy]):
    pass


class Head35(BaseModel):
    label: str
    ref: str
    repo: Optional[Repo70] = Field(..., description="A git repository", title="Repository")
    sha: str
    user: Optional[User121] = Field(..., title="User")


class MergedBy16(Optional[AnswerChosenBy]):
    pass


class Creator65(Optional[AnswerChosenBy]):
    pass


class Milestone55(BaseModel):
    closed_at: Optional[AwareDatetime] = None
    closed_issues: int
    created_at: AwareDatetime
    creator: Optional[Creator65] = Field(..., title="User")
    description: Optional[str] = None
    due_on: Optional[AwareDatetime] = None
    html_url: AnyUrl
    id: int
    labels_url: AnyUrl
    node_id: str
    number: int = Field(..., description="The number of the milestone.")
    open_issues: int
    state: State1 = Field(..., description="The state of the milestone.")
    title: str = Field(..., description="The title of the milestone.")
    updated_at: AwareDatetime
    url: AnyUrl


class RequestedReviewers48(Optional[AnswerChosenBy]):
    pass


class Parent57(Optional[Parent7]):
    pass


class RequestedReviewers49(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent57] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class Parent58(Optional[Parent7]):
    pass


class RequestedTeam26(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent58] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class User122(Optional[AnswerChosenBy]):
    pass


class PullRequest73(BaseModel):
    field_links: FieldLinks49 = Field(..., alias="_links")
    active_lock_reason: ActiveLockReason
    additions: Optional[int] = None
    assignee: Optional[Assignee94] = Field(..., title="User")
    assignees: List[Optional[Assignee95]]
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        title="AuthorAssociation",
    )
    auto_merge: Optional[AutoMerge25] = Field(
        ..., description="The status of auto merging a pull request.", title="PullRequestAutoMerge"
    )
    base: Base36
    body: Optional[str] = None
    changed_files: Optional[int] = None
    closed_at: Optional[AwareDatetime] = None
    comments: Optional[int] = None
    comments_url: AnyUrl
    commits: Optional[int] = None
    commits_url: AnyUrl
    created_at: AwareDatetime
    deletions: Optional[int] = None
    diff_url: AnyUrl
    draft: bool = Field(..., description="Indicates whether or not the pull request is a draft.")
    head: Head35
    html_url: AnyUrl
    id: int
    issue_url: AnyUrl
    labels: List[Label6]
    locked: bool
    maintainer_can_modify: Optional[bool] = Field(
        None, description="Indicates whether maintainers can modify the pull request."
    )
    merge_commit_sha: Optional[str] = None
    mergeable: Optional[bool] = None
    mergeable_state: Optional[str] = None
    merged: Optional[bool] = None
    merged_at: Optional[AwareDatetime] = None
    merged_by: Optional[MergedBy16] = Field(None, title="User")
    milestone: Optional[Milestone55] = Field(
        ..., description="A collection of related issues and pull requests.", title="Milestone"
    )
    node_id: str
    number: int = Field(
        ..., description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: AnyUrl
    rebaseable: Optional[bool] = None
    requested_reviewers: List[Union[Optional[RequestedReviewers48], RequestedReviewers49]]
    requested_teams: List[RequestedTeam26]
    review_comment_url: str
    review_comments: Optional[int] = None
    review_comments_url: AnyUrl
    state: State1 = Field(..., description="State of this Pull Request. Either `open` or `closed`.")
    statuses_url: AnyUrl
    title: str = Field(..., description="The title of the pull request.")
    updated_at: AwareDatetime
    url: AnyUrl
    user: Optional[User122] = Field(..., title="User")


class WebhookPullRequestUnlocked(BaseModel):
    action: Action54
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    number: int = Field(..., description="The pull request number.")
    organization: Optional[OrganizationSimpleWebhooks] = None
    pull_request: PullRequest73 = Field(..., title="Pull Request")
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Author12(Author5):
    pass


class Commit7(BaseModel):
    added: Optional[List[str]] = Field(None, description="An array of files added in the commit.")
    author: Author12 = Field(
        ..., description="Metaproperties for Git author/committer information.", title="Committer"
    )
    committer: Committer4 = Field(
        ..., description="Metaproperties for Git author/committer information.", title="Committer"
    )
    distinct: bool = Field(
        ..., description="Whether this commit is distinct from any that have been pushed before."
    )
    id: str
    message: str = Field(..., description="The commit message.")
    modified: Optional[List[str]] = Field(
        None, description="An array of files modified by the commit."
    )
    removed: Optional[List[str]] = Field(
        None, description="An array of files removed in the commit."
    )
    timestamp: AwareDatetime = Field(..., description="The ISO 8601 timestamp of the commit.")
    tree_id: str
    url: AnyUrl = Field(..., description="URL that points to the commit API resource.")


class HeadCommit3(Commit7):
    pass


class Pusher1(BaseModel):
    date: Optional[AwareDatetime] = None
    email: Optional[EmailStr] = None
    name: str = Field(..., description="The git author's name.")
    username: Optional[str] = None


class Owner97(Optional[AnswerChosenBy]):
    pass


class Repository12(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    custom_properties: Optional[Dict[str, Any]] = Field(
        None,
        description="The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.",
    )
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    has_discussions: bool = Field(..., description="Whether discussions are enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner97] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    visibility: Visibility6
    watchers: int
    watchers_count: int
    web_commit_signoff_required: Optional[bool] = Field(
        None, description="Whether to require contributors to sign off on web-based commits"
    )


class WebhookPush(BaseModel):
    after: str = Field(
        ..., description="The SHA of the most recent commit on `ref` after the push."
    )
    base_ref: Optional[str] = None
    before: str = Field(
        ..., description="The SHA of the most recent commit on `ref` before the push."
    )
    commits: List[Commit7] = Field(
        ...,
        description="An array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the `compare` between the `before` commit and the `after` commit.) The array includes a maximum of 20 commits. If necessary, you can use the [Commits API](https://docs.github.com/rest/commits) to fetch additional commits. This limit is applied to timeline events only and isn't applied to webhook deliveries.",
    )
    compare: str = Field(
        ...,
        description="URL that shows the changes in this `ref` update, from the `before` commit to the `after` commit. For a newly created `ref` that is directly based on the default branch, this is the comparison between the head of the default branch and the `after` commit. Otherwise, this shows all commits until the `after` commit.",
    )
    created: bool = Field(..., description="Whether this push created the `ref`.")
    deleted: bool = Field(..., description="Whether this push deleted the `ref`.")
    enterprise: Optional[EnterpriseWebhooks] = None
    forced: bool = Field(..., description="Whether this push was a force push of the `ref`.")
    head_commit: Optional[HeadCommit3] = Field(..., title="Commit")
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    pusher: Pusher1 = Field(
        ..., description="Metaproperties for Git author/committer information.", title="Committer"
    )
    ref: str = Field(
        ...,
        description="The full git ref that was pushed. Example: `refs/heads/main` or `refs/tags/v3.14.1`.",
    )
    repository: Repository12 = Field(..., description="A git repository", title="Repository")
    sender: Optional[SimpleUserWebhooks] = None


class Owner98(BaseModel):
    avatar_url: str
    events_url: str
    followers_url: str
    following_url: str
    gists_url: str
    gravatar_id: str
    html_url: str
    id: int
    login: str
    node_id: str
    organizations_url: str
    received_events_url: str
    repos_url: str
    site_admin: bool
    starred_url: str
    subscriptions_url: str
    type: str
    url: str


class Author14(Owner98):
    pass


class ContainerMetadata1(Optional[ContainerMetadata]):
    pass


class NpmMetadata1(BaseModel):
    name: Optional[str] = None
    version: Optional[str] = None
    npm_user: Optional[str] = None
    author: Optional[Union[str, Dict[str, Any]]] = None
    bugs: Optional[Union[str, Dict[str, Any]]] = None
    dependencies: Optional[Dict[str, Any]] = None
    dev_dependencies: Optional[Dict[str, Any]] = None
    peer_dependencies: Optional[Dict[str, Any]] = None
    optional_dependencies: Optional[Dict[str, Any]] = None
    description: Optional[str] = None
    dist: Optional[Union[str, Dict[str, Any]]] = None
    git_head: Optional[str] = None
    homepage: Optional[str] = None
    license: Optional[str] = None
    main: Optional[str] = None
    repository: Optional[Union[str, Dict[str, Any]]] = None
    scripts: Optional[Dict[str, Any]] = None
    id: Optional[str] = None
    node_version: Optional[str] = None
    npm_version: Optional[str] = None
    has_shrinkwrap: Optional[bool] = None
    maintainers: Optional[List[str]] = None
    contributors: Optional[List[str]] = None
    engines: Optional[Dict[str, Any]] = None
    keywords: Optional[List[str]] = None
    files: Optional[List[str]] = None
    bin: Optional[Dict[str, Any]] = None
    man: Optional[Dict[str, Any]] = None
    directories: Optional[Union[str, Dict[str, Any]]] = None
    os: Optional[List[str]] = None
    cpu: Optional[List[str]] = None
    readme: Optional[str] = None
    installation_command: Optional[str] = None
    release_id: Optional[int] = None
    commit_oid: Optional[str] = None
    published_via_actions: Optional[bool] = None
    deleted_by_id: Optional[int] = None


class NugetMetadatum1(BaseModel):
    id: Optional[Union[str, Dict[str, Any], int]] = None
    name: Optional[str] = None
    value: Optional[Union[bool, str, int, Value]] = None


class PackageFile2(BaseModel):
    content_type: str
    created_at: str
    download_url: str
    id: int
    md5: Optional[str] = None
    name: str
    sha1: Optional[str] = None
    sha256: Optional[str] = None
    size: int
    state: Optional[str] = None
    updated_at: str


class Author15(Owner9):
    pass


class Release3(BaseModel):
    author: Optional[Author15] = None
    created_at: Optional[str] = None
    draft: Optional[bool] = None
    html_url: Optional[str] = None
    id: Optional[int] = None
    name: Optional[str] = None
    prerelease: Optional[bool] = None
    published_at: Optional[str] = None
    tag_name: Optional[str] = None
    target_commitish: Optional[str] = None
    url: Optional[str] = None


class PackageVersion3(BaseModel):
    author: Optional[Author14] = None
    body: Optional[Union[str, Dict[str, Any]]] = None
    body_html: Optional[str] = None
    container_metadata: Optional[ContainerMetadata1] = None
    created_at: Optional[str] = None
    description: str
    docker_metadata: Optional[List[DockerMetadatum]] = None
    draft: Optional[bool] = None
    html_url: str
    id: int
    installation_command: str
    manifest: Optional[str] = None
    metadata: List[Dict[str, Any]]
    name: str
    npm_metadata: Optional[NpmMetadata1] = None
    nuget_metadata: Optional[List[NugetMetadatum1]] = None
    package_files: List[PackageFile2]
    package_url: str
    prerelease: Optional[bool] = None
    release: Optional[Release3] = None
    rubygems_metadata: Optional[List[WebhookRubygemsMetadata]] = None
    summary: str
    tag_name: Optional[str] = None
    target_commitish: Optional[str] = None
    target_oid: Optional[str] = None
    updated_at: Optional[str] = None
    version: str


class Registry2(BaseModel):
    about_url: Optional[str] = None
    name: Optional[str] = None
    type: Optional[str] = None
    url: Optional[str] = None
    vendor: Optional[str] = None


class RegistryPackage(BaseModel):
    created_at: Optional[str] = None
    description: Optional[str] = None
    ecosystem: str
    html_url: str
    id: int
    name: str
    namespace: str
    owner: Owner98
    package_type: str
    package_version: Optional[PackageVersion3] = None
    registry: Optional[Registry2] = None
    updated_at: Optional[str] = None


class WebhookRegistryPackagePublished(BaseModel):
    action: Action113
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    registry_package: RegistryPackage
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks


class Author16(Owner98):
    pass


class PackageFile3(BaseModel):
    content_type: Optional[str] = None
    created_at: Optional[str] = None
    download_url: Optional[str] = None
    id: Optional[int] = None
    md5: Optional[str] = None
    name: Optional[str] = None
    sha1: Optional[str] = None
    sha256: Optional[str] = None
    size: Optional[int] = None
    state: Optional[str] = None
    updated_at: Optional[str] = None


class Release4(BaseModel):
    author: Author16
    created_at: str
    draft: bool
    html_url: str
    id: int
    name: str
    prerelease: bool
    published_at: str
    tag_name: str
    target_commitish: str
    url: str


class PackageVersion4(BaseModel):
    author: Author16
    body: str
    body_html: str
    created_at: str
    description: str
    docker_metadata: Optional[List[Optional[DockerMetadatum]]] = None
    draft: Optional[bool] = None
    html_url: str
    id: int
    installation_command: str
    manifest: Optional[str] = None
    metadata: List[Dict[str, Any]]
    name: str
    package_files: List[PackageFile3]
    package_url: str
    prerelease: Optional[bool] = None
    release: Optional[Release4] = None
    rubygems_metadata: Optional[List[WebhookRubygemsMetadata]] = None
    summary: str
    tag_name: Optional[str] = None
    target_commitish: str
    target_oid: str
    updated_at: str
    version: str


class RegistryPackage1(BaseModel):
    created_at: str
    ecosystem: str
    html_url: str
    id: int
    name: str
    namespace: str
    owner: Owner98
    package_type: str
    package_version: PackageVersion4
    registry: Optional[Dict[str, Any]] = None
    updated_at: str


class WebhookRegistryPackageUpdated(BaseModel):
    action: Action21
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    registry_package: RegistryPackage1
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks


class State138(Enum):
    uploaded = "uploaded"


class Uploader(Optional[AnswerChosenBy]):
    pass


class Asset(BaseModel):
    browser_download_url: AnyUrl
    content_type: str
    created_at: AwareDatetime
    download_count: int
    id: int
    label: Optional[str] = None
    name: str = Field(..., description="The file name of the asset.")
    node_id: str
    size: int
    state: State138 = Field(..., description="State of the release asset.")
    updated_at: AwareDatetime
    uploader: Optional[Uploader] = Field(None, title="User")
    url: AnyUrl


class Author18(Optional[AnswerChosenBy]):
    pass


class Release5(BaseModel):
    assets: List[Asset]
    assets_url: AnyUrl
    author: Optional[Author18] = Field(..., title="User")
    body: Optional[str] = None
    created_at: Optional[AwareDatetime] = None
    discussion_url: Optional[AnyUrl] = None
    draft: bool = Field(..., description="Whether the release is a draft or published")
    html_url: AnyUrl
    id: int
    name: Optional[str] = None
    node_id: str
    prerelease: bool = Field(
        ..., description="Whether the release is identified as a prerelease or a full release."
    )
    published_at: Optional[AwareDatetime] = None
    reactions: Optional[Reactions31] = Field(None, title="Reactions")
    tag_name: str = Field(..., description="The name of the tag.")
    tarball_url: Optional[AnyUrl] = None
    target_commitish: str = Field(
        ...,
        description="Specifies the committish value that determines where the Git tag is created from.",
    )
    upload_url: str
    url: AnyUrl
    zipball_url: Optional[AnyUrl] = None


class WebhookReleaseCreated(BaseModel):
    action: Action2
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    release: Release5 = Field(
        ...,
        description="The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.",
        title="Release",
    )
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Uploader1(Optional[AnswerChosenBy]):
    pass


class Asset1(BaseModel):
    browser_download_url: AnyUrl
    content_type: str
    created_at: AwareDatetime
    download_count: int
    id: int
    label: Optional[str] = None
    name: str = Field(..., description="The file name of the asset.")
    node_id: str
    size: int
    state: State138 = Field(..., description="State of the release asset.")
    updated_at: AwareDatetime
    uploader: Optional[Uploader1] = Field(None, title="User")
    url: AnyUrl


class Author19(Optional[AnswerChosenBy]):
    pass


class Release6(BaseModel):
    assets: List[Asset1]
    assets_url: AnyUrl
    author: Optional[Author19] = Field(..., title="User")
    body: Optional[str] = None
    created_at: Optional[AwareDatetime] = None
    discussion_url: Optional[AnyUrl] = None
    draft: bool = Field(..., description="Whether the release is a draft or published")
    html_url: AnyUrl
    id: int
    name: Optional[str] = None
    node_id: str
    prerelease: bool = Field(
        ..., description="Whether the release is identified as a prerelease or a full release."
    )
    published_at: Optional[AwareDatetime] = None
    reactions: Optional[Reactions31] = Field(None, title="Reactions")
    tag_name: str = Field(..., description="The name of the tag.")
    tarball_url: Optional[AnyUrl] = None
    target_commitish: str = Field(
        ...,
        description="Specifies the committish value that determines where the Git tag is created from.",
    )
    upload_url: str
    url: AnyUrl
    zipball_url: Optional[AnyUrl] = None


class WebhookReleaseDeleted(BaseModel):
    action: Action3
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    release: Release6 = Field(
        ...,
        description="The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.",
        title="Release",
    )
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Name4(Name):
    pass


class MakeLatest(BaseModel):
    to: bool = Field(
        ..., description="Whether this release was explicitly `edited` to be the latest."
    )


class Changes30(BaseModel):
    body: Optional[Body8] = None
    name: Optional[Name4] = None
    make_latest: Optional[MakeLatest] = None


class Uploader2(Optional[AnswerChosenBy]):
    pass


class Asset2(BaseModel):
    browser_download_url: AnyUrl
    content_type: str
    created_at: AwareDatetime
    download_count: int
    id: int
    label: Optional[str] = None
    name: str = Field(..., description="The file name of the asset.")
    node_id: str
    size: int
    state: State138 = Field(..., description="State of the release asset.")
    updated_at: AwareDatetime
    uploader: Optional[Uploader2] = Field(None, title="User")
    url: AnyUrl


class Author20(Optional[AnswerChosenBy]):
    pass


class Release7(BaseModel):
    assets: List[Asset2]
    assets_url: AnyUrl
    author: Optional[Author20] = Field(..., title="User")
    body: Optional[str] = None
    created_at: Optional[AwareDatetime] = None
    discussion_url: Optional[AnyUrl] = None
    draft: bool = Field(..., description="Whether the release is a draft or published")
    html_url: AnyUrl
    id: int
    name: Optional[str] = None
    node_id: str
    prerelease: bool = Field(
        ..., description="Whether the release is identified as a prerelease or a full release."
    )
    published_at: Optional[AwareDatetime] = None
    reactions: Optional[Reactions31] = Field(None, title="Reactions")
    tag_name: str = Field(..., description="The name of the tag.")
    tarball_url: Optional[AnyUrl] = None
    target_commitish: str = Field(
        ...,
        description="Specifies the committish value that determines where the Git tag is created from.",
    )
    upload_url: str
    url: AnyUrl
    zipball_url: Optional[AnyUrl] = None


class WebhookReleaseEdited(BaseModel):
    action: Action4
    changes: Changes30
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    release: Release7 = Field(
        ...,
        description="The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.",
        title="Release",
    )
    repository: RepositoryWebhooks
    sender: Optional[SimpleUserWebhooks] = None


class Action181(Enum):
    prereleased = "prereleased"


class Uploader3(Optional[AnswerChosenBy]):
    pass


class Asset3(BaseModel):
    browser_download_url: AnyUrl
    content_type: str
    created_at: AwareDatetime
    download_count: int
    id: int
    label: Optional[str] = None
    name: str = Field(..., description="The file name of the asset.")
    node_id: str
    size: int
    state: State138 = Field(..., description="State of the release asset.")
    updated_at: AwareDatetime
    uploader: Optional[Uploader3] = Field(None, title="User")
    url: AnyUrl


class Author21(Owner9):
    pass


class Release8(BaseModel):
    assets: List[Asset3]
    assets_url: AnyUrl
    author: Author21 = Field(..., title="User")
    body: Optional[str] = None
    created_at: Optional[AwareDatetime] = None
    discussion_url: Optional[AnyUrl] = None
    draft: bool = Field(..., description="Whether the release is a draft or published")
    html_url: AnyUrl
    id: int
    name: Optional[str] = None
    node_id: str
    prerelease: bool = Field(
        ..., description="Whether the release is identified as a prerelease or a full release."
    )
    published_at: Optional[AwareDatetime] = None
    reactions: Optional[Reactions31] = Field(None, title="Reactions")
    tag_name: str = Field(..., description="The name of the tag.")
    tarball_url: Optional[AnyUrl] = None
    target_commitish: str = Field(
        ...,
        description="Specifies the committish value that determines where the Git tag is created from.",
    )
    upload_url: str
    url: AnyUrl
    zipball_url: Optional[AnyUrl] = None


class WebhookReleasePrereleased(BaseModel):
    action: Action181
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    release: Release8
    repository: RepositoryWebhooks
    sender: Optional[SimpleUserWebhooks] = None


class Uploader4(Optional[AnswerChosenBy]):
    pass


class Asset4(BaseModel):
    browser_download_url: AnyUrl
    content_type: str
    created_at: AwareDatetime
    download_count: int
    id: int
    label: Optional[str] = None
    name: str = Field(..., description="The file name of the asset.")
    node_id: str
    size: int
    state: State138 = Field(..., description="State of the release asset.")
    updated_at: AwareDatetime
    uploader: Optional[Uploader4] = Field(None, title="User")
    url: AnyUrl


class Release9(BaseModel):
    assets: List[Asset4]
    assets_url: AnyUrl
    author: Author21 = Field(..., title="User")
    body: Optional[str] = None
    created_at: Optional[AwareDatetime] = None
    discussion_url: Optional[AnyUrl] = None
    draft: bool = Field(..., description="Whether the release is a draft or published")
    html_url: AnyUrl
    id: int
    name: Optional[str] = None
    node_id: str
    prerelease: bool = Field(
        ..., description="Whether the release is identified as a prerelease or a full release."
    )
    published_at: Optional[AwareDatetime] = None
    reactions: Optional[Reactions31] = Field(None, title="Reactions")
    tag_name: str = Field(..., description="The name of the tag.")
    tarball_url: Optional[AnyUrl] = None
    target_commitish: str = Field(
        ...,
        description="Specifies the committish value that determines where the Git tag is created from.",
    )
    upload_url: str
    url: AnyUrl
    zipball_url: Optional[AnyUrl] = None


class WebhookReleasePublished(BaseModel):
    action: Action113
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    release: Release9
    repository: RepositoryWebhooks
    sender: Optional[SimpleUserWebhooks] = None


class Action183(Enum):
    released = "released"


class Uploader5(Optional[AnswerChosenBy]):
    pass


class Asset5(BaseModel):
    browser_download_url: AnyUrl
    content_type: str
    created_at: AwareDatetime
    download_count: int
    id: int
    label: Optional[str] = None
    name: str = Field(..., description="The file name of the asset.")
    node_id: str
    size: int
    state: State138 = Field(..., description="State of the release asset.")
    updated_at: AwareDatetime
    uploader: Optional[Uploader5] = Field(None, title="User")
    url: AnyUrl


class Author23(Optional[AnswerChosenBy]):
    pass


class Release10(BaseModel):
    assets: List[Asset5]
    assets_url: AnyUrl
    author: Optional[Author23] = Field(..., title="User")
    body: Optional[str] = None
    created_at: Optional[AwareDatetime] = None
    discussion_url: Optional[AnyUrl] = None
    draft: bool = Field(..., description="Whether the release is a draft or published")
    html_url: AnyUrl
    id: int
    name: Optional[str] = None
    node_id: str
    prerelease: bool = Field(
        ..., description="Whether the release is identified as a prerelease or a full release."
    )
    published_at: Optional[AwareDatetime] = None
    reactions: Optional[Reactions31] = Field(None, title="Reactions")
    tag_name: str = Field(..., description="The name of the tag.")
    tarball_url: Optional[AnyUrl] = None
    target_commitish: str = Field(
        ...,
        description="Specifies the committish value that determines where the Git tag is created from.",
    )
    upload_url: str
    url: AnyUrl
    zipball_url: Optional[AnyUrl] = None


class WebhookReleaseReleased(BaseModel):
    action: Action183
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    release: Release10 = Field(
        ...,
        description="The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.",
        title="Release",
    )
    repository: RepositoryWebhooks
    sender: Optional[SimpleUserWebhooks] = None


class Action184(Enum):
    unpublished = "unpublished"


class Uploader6(Optional[AnswerChosenBy]):
    pass


class Asset6(BaseModel):
    browser_download_url: AnyUrl
    content_type: str
    created_at: AwareDatetime
    download_count: int
    id: int
    label: Optional[str] = None
    name: str = Field(..., description="The file name of the asset.")
    node_id: str
    size: int
    state: State138 = Field(..., description="State of the release asset.")
    updated_at: AwareDatetime
    uploader: Optional[Uploader6] = Field(None, title="User")
    url: AnyUrl


class Author24(Owner9):
    pass


class Release11(BaseModel):
    assets: List[Asset6]
    assets_url: AnyUrl
    author: Author24 = Field(..., title="User")
    body: Optional[str] = None
    created_at: Optional[AwareDatetime] = None
    discussion_url: Optional[AnyUrl] = None
    draft: bool = Field(..., description="Whether the release is a draft or published")
    html_url: AnyUrl
    id: int
    name: Optional[str] = None
    node_id: str
    prerelease: bool = Field(
        ..., description="Whether the release is identified as a prerelease or a full release."
    )
    published_at: Optional[AwareDatetime] = None
    reactions: Optional[Reactions31] = Field(None, title="Reactions")
    tag_name: str = Field(..., description="The name of the tag.")
    tarball_url: Optional[AnyUrl] = None
    target_commitish: str = Field(
        ...,
        description="Specifies the committish value that determines where the Git tag is created from.",
    )
    upload_url: str
    url: AnyUrl
    zipball_url: Optional[AnyUrl] = None


class WebhookReleaseUnpublished(BaseModel):
    action: Action184
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    release: Release11
    repository: RepositoryWebhooks
    sender: Optional[SimpleUserWebhooks] = None


class WebhookRepositoryAdvisoryPublished(BaseModel):
    action: Action113
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    repository_advisory: RepositoryAdvisory
    sender: Optional[SimpleUserWebhooks] = None


class Action186(Enum):
    reported = "reported"


class WebhookRepositoryAdvisoryReported(BaseModel):
    action: Action186
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    repository_advisory: RepositoryAdvisory
    sender: Optional[SimpleUserWebhooks] = None


class WebhookRepositoryArchived(BaseModel):
    action: Action137
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class WebhookRepositoryCreated(BaseModel):
    action: Action2
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class WebhookRepositoryDeleted(BaseModel):
    action: Action3
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action190(Enum):
    sample_collected = "sample.collected"


class WebhookRepositoryDispatchSample(BaseModel):
    action: Action190
    branch: str
    client_payload: Optional[Dict[str, Any]] = None
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: SimpleInstallation
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class DefaultBranch(Body):
    pass


class Description3(Note1):
    pass


class Homepage(Note1):
    pass


class Topics(BaseModel):
    from_: Optional[List[str]] = Field(None, alias="from")


class Changes31(BaseModel):
    default_branch: Optional[DefaultBranch] = None
    description: Optional[Description3] = None
    homepage: Optional[Homepage] = None
    topics: Optional[Topics] = None


class WebhookRepositoryEdited(BaseModel):
    action: Action4
    changes: Changes31
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Status25(Enum):
    success = "success"
    cancelled = "cancelled"
    failure = "failure"


class WebhookRepositoryImport(BaseModel):
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks
    status: Status25


class Action192(Enum):
    privatized = "privatized"


class WebhookRepositoryPrivatized(BaseModel):
    action: Action192
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action193(Enum):
    publicized = "publicized"


class WebhookRepositoryPublicized(BaseModel):
    action: Action193
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Name5(Body):
    pass


class Repository13(BaseModel):
    name: Name5


class Changes32(BaseModel):
    repository: Repository13


class WebhookRepositoryRenamed(BaseModel):
    action: Action64
    changes: Changes32
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class WebhookRepositoryRulesetCreated(BaseModel):
    action: Action2
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: Optional[RepositoryWebhooks] = None
    repository_ruleset: RepositoryRuleset
    sender: SimpleUserWebhooks


class WebhookRepositoryRulesetDeleted(BaseModel):
    action: Action3
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: Optional[RepositoryWebhooks] = None
    repository_ruleset: RepositoryRuleset
    sender: SimpleUserWebhooks


class Name6(Login1):
    pass


class Enforcement1(Login1):
    pass


class ConditionType(Login1):
    pass


class Target1(Login1):
    pass


class Include(Topics):
    pass


class Exclude(Topics):
    pass


class Changes34(BaseModel):
    condition_type: Optional[ConditionType] = None
    target: Optional[Target1] = None
    include: Optional[Include] = None
    exclude: Optional[Exclude] = None


class UpdatedItem(BaseModel):
    condition: Optional[RepositoryRulesetConditions] = None
    changes: Optional[Changes34] = None


class Conditions(BaseModel):
    added: Optional[List[RepositoryRulesetConditions]] = None
    deleted: Optional[List[RepositoryRulesetConditions]] = None
    updated: Optional[List[UpdatedItem]] = None


class Configuration(Login1):
    pass


class RuleType(Login1):
    pass


class Pattern(Login1):
    pass


class Changes35(BaseModel):
    configuration: Optional[Configuration] = None
    rule_type: Optional[RuleType] = None
    pattern: Optional[Pattern] = None


class UpdatedItem1(BaseModel):
    rule: Optional[RepositoryRule] = None
    changes: Optional[Changes35] = None


class Rules(BaseModel):
    added: Optional[List[RepositoryRule]] = None
    deleted: Optional[List[RepositoryRule]] = None
    updated: Optional[List[UpdatedItem1]] = None


class Changes33(BaseModel):
    name: Optional[Name6] = None
    enforcement: Optional[Enforcement1] = None
    conditions: Optional[Conditions] = None
    rules: Optional[Rules] = None


class WebhookRepositoryRulesetEdited(BaseModel):
    action: Action4
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: Optional[RepositoryWebhooks] = None
    repository_ruleset: RepositoryRuleset
    changes: Optional[Changes33] = None
    sender: SimpleUserWebhooks


class Organization1(BaseModel):
    avatar_url: AnyUrl
    description: Optional[str] = None
    events_url: AnyUrl
    hooks_url: AnyUrl
    html_url: Optional[AnyUrl] = None
    id: int
    issues_url: AnyUrl
    login: str
    members_url: str
    node_id: str
    public_members_url: str
    repos_url: AnyUrl
    url: AnyUrl


class User123(Optional[AnswerChosenBy]):
    pass


class From3(BaseModel):
    organization: Optional[Organization1] = Field(None, title="Organization")
    user: Optional[User123] = Field(None, title="User")


class Owner100(BaseModel):
    from_: From3 = Field(..., alias="from")


class Changes36(BaseModel):
    owner: Owner100


class WebhookRepositoryTransferred(BaseModel):
    action: Action51
    changes: Changes36
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action199(Enum):
    unarchived = "unarchived"


class WebhookRepositoryUnarchived(BaseModel):
    action: Action199
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action200(Enum):
    create = "create"


class Dismisser(Optional[AnswerChosenBy]):
    pass


class State145(Enum):
    open = "open"


class Alert6(BaseModel):
    affected_package_name: str
    affected_range: str
    created_at: str
    dismiss_reason: Optional[str] = None
    dismissed_at: Optional[str] = None
    dismisser: Optional[Dismisser] = Field(None, title="User")
    external_identifier: str
    external_reference: Optional[AnyUrl] = None
    fix_reason: Optional[str] = None
    fixed_at: Optional[AwareDatetime] = None
    fixed_in: Optional[str] = None
    ghsa_id: str
    id: int
    node_id: str
    number: int
    severity: str
    state: State145


class WebhookRepositoryVulnerabilityAlertCreate(BaseModel):
    action: Action200
    alert: Alert6
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action201(Enum):
    dismiss = "dismiss"


class Dismisser1(Optional[AnswerChosenBy]):
    pass


class Alert7(BaseModel):
    affected_package_name: str
    affected_range: str
    created_at: str
    dismiss_comment: Optional[str] = None
    dismiss_reason: Optional[str] = None
    dismissed_at: Optional[str] = None
    dismisser: Optional[Dismisser1] = Field(None, title="User")
    external_identifier: str
    external_reference: Optional[AnyUrl] = None
    fix_reason: Optional[str] = None
    fixed_at: Optional[AwareDatetime] = None
    fixed_in: Optional[str] = None
    ghsa_id: str
    id: int
    node_id: str
    number: int
    severity: str
    state: Action26


class WebhookRepositoryVulnerabilityAlertDismiss(BaseModel):
    action: Action201
    alert: Alert7
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action202(Enum):
    reopen = "reopen"


class Dismisser2(Optional[AnswerChosenBy]):
    pass


class Alert8(BaseModel):
    affected_package_name: str
    affected_range: str
    created_at: str
    dismiss_reason: Optional[str] = None
    dismissed_at: Optional[str] = None
    dismisser: Optional[Dismisser2] = Field(None, title="User")
    external_identifier: str
    external_reference: Optional[AnyUrl] = None
    fix_reason: Optional[str] = None
    fixed_at: Optional[AwareDatetime] = None
    fixed_in: Optional[str] = None
    ghsa_id: str
    id: int
    node_id: str
    number: int
    severity: str
    state: State145


class WebhookRepositoryVulnerabilityAlertReopen(BaseModel):
    action: Action202
    alert: Alert8
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Action203(Enum):
    resolve = "resolve"


class Dismisser3(Optional[AnswerChosenBy]):
    pass


class State148(Enum):
    fixed = "fixed"
    open = "open"


class Alert9(BaseModel):
    affected_package_name: str
    affected_range: str
    created_at: str
    dismiss_reason: Optional[str] = None
    dismissed_at: Optional[str] = None
    dismisser: Optional[Dismisser3] = Field(None, title="User")
    external_identifier: str
    external_reference: Optional[AnyUrl] = None
    fix_reason: Optional[str] = None
    fixed_at: Optional[AwareDatetime] = None
    fixed_in: Optional[str] = None
    ghsa_id: str
    id: int
    node_id: str
    number: int
    severity: str
    state: State148


class WebhookRepositoryVulnerabilityAlertResolve(BaseModel):
    action: Action203
    alert: Alert9
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class WebhookSecretScanningAlertCreated(BaseModel):
    action: Action2
    alert: SecretScanningAlertWebhook
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: Optional[SimpleUserWebhooks] = None


class WebhookSecretScanningAlertLocationCreated(BaseModel):
    action: Optional[Action2] = None
    alert: SecretScanningAlertWebhook
    installation: Optional[SimpleInstallation] = None
    location: SecretScanningLocation
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class WebhookSecretScanningAlertLocationCreatedFormEncoded(BaseModel):
    payload: str = Field(
        ...,
        description="A URL-encoded string of the secret_scanning_alert_location.created JSON payload. The decoded payload is a JSON object.",
    )


class WebhookSecretScanningAlertReopened(BaseModel):
    action: Action16
    alert: SecretScanningAlertWebhook
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: Optional[SimpleUserWebhooks] = None


class WebhookSecretScanningAlertResolved(BaseModel):
    action: Action170
    alert: SecretScanningAlertWebhook
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: Optional[SimpleUserWebhooks] = None


class WebhookSecretScanningAlertRevoked(BaseModel):
    action: Action56
    alert: SecretScanningAlertWebhook
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: Optional[SimpleUserWebhooks] = None


class Action209(Enum):
    validated = "validated"


class WebhookSecretScanningAlertValidated(BaseModel):
    action: Action209
    alert: SecretScanningAlertWebhook
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: Optional[SimpleUserWebhooks] = None


class Cvss3(BaseModel):
    score: float
    vector_string: Optional[str] = None


class Cwe3(BaseModel):
    cwe_id: str
    name: str


class Identifier3(BaseModel):
    type: str
    value: str


class Reference1(BaseModel):
    url: AnyUrl


class FirstPatchedVersion1(BaseModel):
    identifier: str


class Package9(BaseModel):
    ecosystem: str
    name: str


class Vulnerability5(BaseModel):
    first_patched_version: Optional[FirstPatchedVersion1] = None
    package: Package9
    severity: str
    vulnerable_version_range: str


class SecurityAdvisory(BaseModel):
    cvss: Cvss3
    cwes: List[Cwe3]
    description: str
    ghsa_id: str
    identifiers: List[Identifier3]
    published_at: str
    references: List[Reference1]
    severity: str
    summary: str
    updated_at: str
    vulnerabilities: List[Vulnerability5]
    withdrawn_at: Optional[str] = None


class WebhookSecurityAdvisoryPublished(BaseModel):
    action: Action113
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: Optional[RepositoryWebhooks] = None
    security_advisory: SecurityAdvisory = Field(
        ...,
        description="The details of the security advisory, including summary, description, and severity.",
    )
    sender: Optional[SimpleUserWebhooks] = None


class Vulnerability6(Vulnerability5):
    pass


class SecurityAdvisory1(BaseModel):
    cvss: Cvss3
    cwes: List[Cwe3]
    description: str
    ghsa_id: str
    identifiers: List[Identifier3]
    published_at: str
    references: List[Reference1]
    severity: str
    summary: str
    updated_at: str
    vulnerabilities: List[Vulnerability6]
    withdrawn_at: Optional[str] = None


class WebhookSecurityAdvisoryUpdated(BaseModel):
    action: Action21
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: Optional[RepositoryWebhooks] = None
    security_advisory: SecurityAdvisory1 = Field(
        ...,
        description="The details of the security advisory, including summary, description, and severity.",
    )
    sender: Optional[SimpleUserWebhooks] = None


class Action212(Enum):
    withdrawn = "withdrawn"


class Vulnerability7(Vulnerability5):
    pass


class SecurityAdvisory2(BaseModel):
    cvss: Cvss3
    cwes: List[Cwe3]
    description: str
    ghsa_id: str
    identifiers: List[Identifier3]
    published_at: str
    references: List[Reference1]
    severity: str
    summary: str
    updated_at: str
    vulnerabilities: List[Vulnerability7]
    withdrawn_at: str


class WebhookSecurityAdvisoryWithdrawn(BaseModel):
    action: Action212
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: Optional[RepositoryWebhooks] = None
    security_advisory: SecurityAdvisory2 = Field(
        ...,
        description="The details of the security advisory, including summary, description, and severity.",
    )
    sender: Optional[SimpleUserWebhooks] = None


class From4(BaseModel):
    security_and_analysis: Optional[SecurityAndAnalysis] = None


class Changes37(BaseModel):
    from_: Optional[From4] = Field(None, alias="from")


class WebhookSecurityAndAnalysis(BaseModel):
    changes: Changes37
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: FullRepository
    sender: Optional[SimpleUserWebhooks] = None


class Maintainer(Owner9):
    pass


class Sponsor(Optional[AnswerChosenBy]):
    pass


class Sponsorable(Optional[AnswerChosenBy]):
    pass


class Tier(BaseModel):
    created_at: str
    description: str
    is_custom_ammount: Optional[bool] = None
    is_custom_amount: Optional[bool] = None
    is_one_time: bool
    monthly_price_in_cents: int
    monthly_price_in_dollars: int
    name: str
    node_id: str


class Sponsorship(BaseModel):
    created_at: str
    maintainer: Optional[Maintainer] = None
    node_id: str
    privacy_level: str
    sponsor: Optional[Sponsor] = Field(..., title="User")
    sponsorable: Optional[Sponsorable] = Field(..., title="User")
    tier: Tier = Field(
        ...,
        description="The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.",
        title="Sponsorship Tier",
    )


class WebhookSponsorshipCancelled(BaseModel):
    action: Action88
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks
    sponsorship: Sponsorship


class Sponsor1(Optional[AnswerChosenBy]):
    pass


class Sponsorable1(Optional[AnswerChosenBy]):
    pass


class Sponsorship1(BaseModel):
    created_at: str
    maintainer: Optional[Maintainer] = None
    node_id: str
    privacy_level: str
    sponsor: Optional[Sponsor1] = Field(..., title="User")
    sponsorable: Optional[Sponsorable1] = Field(..., title="User")
    tier: Tier = Field(
        ...,
        description="The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.",
        title="Sponsorship Tier",
    )


class WebhookSponsorshipCreated(BaseModel):
    action: Action2
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks
    sponsorship: Sponsorship1


class PrivacyLevel(BaseModel):
    from_: str = Field(
        ...,
        alias="from",
        description="The `edited` event types include the details about the change when someone edits a sponsorship to change the privacy.",
    )


class Changes38(BaseModel):
    privacy_level: Optional[PrivacyLevel] = None


class Sponsor2(Optional[AnswerChosenBy]):
    pass


class Sponsorable2(Optional[AnswerChosenBy]):
    pass


class Sponsorship2(BaseModel):
    created_at: str
    maintainer: Optional[Maintainer] = None
    node_id: str
    privacy_level: str
    sponsor: Optional[Sponsor2] = Field(..., title="User")
    sponsorable: Optional[Sponsorable2] = Field(..., title="User")
    tier: Tier = Field(
        ...,
        description="The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.",
        title="Sponsorship Tier",
    )


class WebhookSponsorshipEdited(BaseModel):
    action: Action4
    changes: Changes38
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks
    sponsorship: Sponsorship2


class Action216(Enum):
    pending_cancellation = "pending_cancellation"


class Sponsor3(Optional[AnswerChosenBy]):
    pass


class Sponsorable3(Optional[AnswerChosenBy]):
    pass


class Sponsorship3(BaseModel):
    created_at: str
    maintainer: Optional[Maintainer] = None
    node_id: str
    privacy_level: str
    sponsor: Optional[Sponsor3] = Field(..., title="User")
    sponsorable: Optional[Sponsorable3] = Field(..., title="User")
    tier: Tier = Field(
        ...,
        description="The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.",
        title="Sponsorship Tier",
    )


class WebhookSponsorshipPendingCancellation(BaseModel):
    action: Action216
    effective_date: Optional[str] = Field(
        None,
        description="The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect.",
    )
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks
    sponsorship: Sponsorship3


class Action217(Enum):
    pending_tier_change = "pending_tier_change"


class From5(Tier):
    pass


class Tier4(BaseModel):
    from_: From5 = Field(
        ...,
        alias="from",
        description="The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.",
        title="Sponsorship Tier",
    )


class Changes39(BaseModel):
    tier: Tier4


class Sponsor4(Optional[AnswerChosenBy]):
    pass


class Sponsorable4(Optional[AnswerChosenBy]):
    pass


class Tier5(Tier):
    pass


class Sponsorship4(BaseModel):
    created_at: str
    maintainer: Optional[Maintainer] = None
    node_id: str
    privacy_level: str
    sponsor: Optional[Sponsor4] = Field(..., title="User")
    sponsorable: Optional[Sponsorable4] = Field(..., title="User")
    tier: Tier5 = Field(
        ...,
        description="The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.",
        title="Sponsorship Tier",
    )


class WebhookSponsorshipPendingTierChange(BaseModel):
    action: Action217
    changes: Changes39
    effective_date: Optional[str] = Field(
        None,
        description="The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect.",
    )
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks
    sponsorship: Sponsorship4


class Action218(Enum):
    tier_changed = "tier_changed"


class Tier6(Tier4):
    pass


class Changes40(BaseModel):
    tier: Tier6


class Sponsor5(Optional[AnswerChosenBy]):
    pass


class Sponsorable5(Optional[AnswerChosenBy]):
    pass


class Tier7(Tier):
    pass


class Sponsorship5(BaseModel):
    created_at: str
    maintainer: Optional[Maintainer] = None
    node_id: str
    privacy_level: str
    sponsor: Optional[Sponsor5] = Field(..., title="User")
    sponsorable: Optional[Sponsorable5] = Field(..., title="User")
    tier: Tier7 = Field(
        ...,
        description="The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.",
        title="Sponsorship Tier",
    )


class WebhookSponsorshipTierChanged(BaseModel):
    action: Action218
    changes: Changes40
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: Optional[RepositoryWebhooks] = None
    sender: SimpleUserWebhooks
    sponsorship: Sponsorship5


class WebhookStarCreated(BaseModel):
    action: Action2
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks
    starred_at: Optional[str] = Field(
        ...,
        description="The time the star was created. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Will be `null` for the `deleted` action.",
    )


class WebhookStarDeleted(BaseModel):
    action: Action3
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class Commit8(BaseModel):
    sha: Optional[str] = None
    url: Optional[AnyUrl] = None


class Branch(BaseModel):
    commit: Commit8
    name: str
    protected: bool


class Author25(BaseModel):
    avatar_url: Optional[AnyUrl] = None
    deleted: Optional[bool] = None
    email: Optional[str] = None
    events_url: Optional[str] = None
    followers_url: Optional[AnyUrl] = None
    following_url: Optional[str] = None
    gists_url: Optional[str] = None
    gravatar_id: Optional[str] = None
    html_url: Optional[AnyUrl] = None
    id: Optional[int] = None
    login: Optional[str] = None
    name: Optional[str] = None
    node_id: Optional[str] = None
    organizations_url: Optional[AnyUrl] = None
    received_events_url: Optional[AnyUrl] = None
    repos_url: Optional[AnyUrl] = None
    site_admin: Optional[bool] = None
    starred_url: Optional[str] = None
    subscriptions_url: Optional[AnyUrl] = None
    type: Optional[Type29] = None
    url: Optional[AnyUrl] = None


class Author26(Author5):
    pass


class Reason1(Enum):
    expired_key = "expired_key"
    not_signing_key = "not_signing_key"
    gpgverify_error = "gpgverify_error"
    gpgverify_unavailable = "gpgverify_unavailable"
    unsigned = "unsigned"
    unknown_signature_type = "unknown_signature_type"
    no_user = "no_user"
    unverified_email = "unverified_email"
    bad_email = "bad_email"
    unknown_key = "unknown_key"
    malformed_signature = "malformed_signature"
    invalid = "invalid"
    valid = "valid"
    bad_cert = "bad_cert"
    ocsp_pending = "ocsp_pending"


class Verification4(BaseModel):
    payload: Optional[str] = None
    reason: Reason1
    signature: Optional[str] = None
    verified: bool


class Commit10(BaseModel):
    author: Author26
    comment_count: int
    committer: Committer4
    message: str
    tree: Tree4
    url: AnyUrl
    verification: Verification4


class Committer10(Optional[Author25]):
    pass


class Parent59(BaseModel):
    html_url: AnyUrl
    sha: str
    url: AnyUrl


class Commit9(BaseModel):
    author: Optional[Author25] = Field(..., title="User")
    comments_url: AnyUrl
    commit: Commit10
    committer: Optional[Committer10] = Field(..., title="User")
    html_url: AnyUrl
    node_id: str
    parents: List[Parent59]
    sha: str
    url: AnyUrl


class State149(Enum):
    pending = "pending"
    success = "success"
    failure = "failure"
    error = "error"


class WebhookStatus(BaseModel):
    avatar_url: Optional[AnyUrl] = None
    branches: List[Branch] = Field(
        ...,
        description="An array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.",
    )
    commit: Commit9
    context: str
    created_at: str
    description: Optional[str] = Field(
        ..., description="The optional human-readable description added to the status."
    )
    enterprise: Optional[EnterpriseWebhooks] = None
    id: int = Field(..., description="The unique identifier of the status.")
    installation: Optional[SimpleInstallation] = None
    name: str
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks
    sha: str = Field(..., description="The Commit SHA.")
    state: State149 = Field(
        ..., description="The new state. Can be `pending`, `success`, `failure`, or `error`."
    )
    target_url: Optional[str] = Field(..., description="The optional link added to the status.")
    updated_at: str


class Parent60(Optional[Parent5]):
    pass


class Team4(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent60] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    notification_setting: Optional[NotificationSetting] = Field(
        None,
        description="Whether team members will receive notifications when their team is @mentioned",
    )
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class WebhookTeamAdd(BaseModel):
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks
    team: Team4 = Field(
        ...,
        description="Groups of organization members that gives permissions on specified repositories.",
        title="Team",
    )


class Action221(Enum):
    added_to_repository = "added_to_repository"


class Owner101(Optional[AnswerChosenBy]):
    pass


class Repository14(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    custom_properties: Optional[Dict[str, Any]] = Field(
        None,
        description="The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.",
    )
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner101] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    visibility: Visibility6
    watchers: int
    watchers_count: int


class Parent61(Optional[Parent5]):
    pass


class Team5(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent61] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    notification_setting: Optional[NotificationSetting] = Field(
        None,
        description="Whether team members will receive notifications when their team is @mentioned",
    )
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class WebhookTeamAddedToRepository(BaseModel):
    action: Action221
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: OrganizationSimpleWebhooks
    repository: Optional[Repository14] = Field(
        None, description="A git repository", title="Repository"
    )
    sender: Optional[SimpleUserWebhooks] = None
    team: Team5 = Field(
        ...,
        description="Groups of organization members that gives permissions on specified repositories.",
        title="Team",
    )


class Owner102(Optional[AnswerChosenBy]):
    pass


class Repository15(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    custom_properties: Optional[Dict[str, Any]] = Field(
        None,
        description="The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.",
    )
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner102] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    visibility: Visibility6
    watchers: int
    watchers_count: int


class Parent62(Optional[Parent5]):
    pass


class Team6(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent62] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    notification_setting: Optional[NotificationSetting] = Field(
        None,
        description="Whether team members will receive notifications when their team is @mentioned",
    )
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class WebhookTeamCreated(BaseModel):
    action: Action2
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: OrganizationSimpleWebhooks
    repository: Optional[Repository15] = Field(
        None, description="A git repository", title="Repository"
    )
    sender: SimpleUserWebhooks
    team: Team6 = Field(
        ...,
        description="Groups of organization members that gives permissions on specified repositories.",
        title="Team",
    )


class Owner103(Optional[AnswerChosenBy]):
    pass


class Repository16(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    custom_properties: Optional[Dict[str, Any]] = Field(
        None,
        description="The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.",
    )
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner103] = Field(..., title="User")
    permissions: Optional[Permissions49] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    visibility: Visibility6
    watchers: int
    watchers_count: int


class Parent63(Optional[Parent5]):
    pass


class Team7(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent63] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    notification_setting: Optional[NotificationSetting] = Field(
        None,
        description="Whether team members will receive notifications when their team is @mentioned",
    )
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class WebhookTeamDeleted(BaseModel):
    action: Action3
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: OrganizationSimpleWebhooks
    repository: Optional[Repository16] = Field(
        None, description="A git repository", title="Repository"
    )
    sender: Optional[SimpleUserWebhooks] = None
    team: Team7 = Field(
        ...,
        description="Groups of organization members that gives permissions on specified repositories.",
        title="Team",
    )


class Description4(Description):
    pass


class Name7(Name):
    pass


class Privacy117(BaseModel):
    from_: str = Field(
        ...,
        alias="from",
        description="The previous version of the team's privacy if the action was `edited`.",
    )


class NotificationSetting13(BaseModel):
    from_: str = Field(
        ...,
        alias="from",
        description="The previous version of the team's notification setting if the action was `edited`.",
    )


class From7(BaseModel):
    admin: Optional[bool] = Field(
        None,
        description="The previous version of the team member's `admin` permission on a repository, if the action was `edited`.",
    )
    pull: Optional[bool] = Field(
        None,
        description="The previous version of the team member's `pull` permission on a repository, if the action was `edited`.",
    )
    push: Optional[bool] = Field(
        None,
        description="The previous version of the team member's `push` permission on a repository, if the action was `edited`.",
    )


class Permissions103(BaseModel):
    from_: From7 = Field(..., alias="from")


class Repository17(BaseModel):
    permissions: Permissions103


class Changes41(BaseModel):
    description: Optional[Description4] = None
    name: Optional[Name7] = None
    privacy: Optional[Privacy117] = None
    notification_setting: Optional[NotificationSetting13] = None
    repository: Optional[Repository17] = None


class Owner104(Optional[AnswerChosenBy]):
    pass


class Permissions104(Permissions25):
    pass


class Repository18(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    custom_properties: Optional[Dict[str, Any]] = Field(
        None,
        description="The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.",
    )
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner104] = Field(..., title="User")
    permissions: Optional[Permissions104] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    visibility: Visibility6
    watchers: int
    watchers_count: int


class Parent64(Optional[Parent5]):
    pass


class Team8(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent64] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    notification_setting: Optional[NotificationSetting] = Field(
        None,
        description="Whether team members will receive notifications when their team is @mentioned",
    )
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class WebhookTeamEdited(BaseModel):
    action: Action4
    changes: Changes41 = Field(
        ..., description="The changes to the team if the action was `edited`."
    )
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: OrganizationSimpleWebhooks
    repository: Optional[Repository18] = Field(
        None, description="A git repository", title="Repository"
    )
    sender: SimpleUserWebhooks
    team: Team8 = Field(
        ...,
        description="Groups of organization members that gives permissions on specified repositories.",
        title="Team",
    )


class Action225(Enum):
    removed_from_repository = "removed_from_repository"


class Owner105(Optional[AnswerChosenBy]):
    pass


class Repository19(BaseModel):
    allow_auto_merge: Optional[bool] = Field(
        False, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Optional[bool] = Field(None, description="Whether to allow private forks")
    allow_merge_commit: Optional[bool] = Field(
        True, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Optional[bool] = Field(
        True, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Optional[bool] = Field(
        True, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Optional[bool] = None
    archive_url: str
    archived: bool = Field(..., description="Whether the repository is archived.")
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: AnyUrl
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    created_at: Union[int, AwareDatetime]
    custom_properties: Optional[Dict[str, Any]] = Field(
        None,
        description="The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.",
    )
    default_branch: str = Field(..., description="The default branch of the repository.")
    delete_branch_on_merge: Optional[bool] = Field(
        False, description="Whether to delete head branches when pull requests are merged"
    )
    deployments_url: AnyUrl
    description: Optional[str] = None
    disabled: Optional[bool] = Field(
        None, description="Returns whether or not this repository is disabled."
    )
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks: int
    forks_count: int
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: AnyUrl
    has_downloads: bool = Field(..., description="Whether downloads are enabled.")
    has_issues: bool = Field(..., description="Whether issues are enabled.")
    has_pages: bool
    has_projects: bool = Field(..., description="Whether projects are enabled.")
    has_wiki: bool = Field(..., description="Whether the wiki is enabled.")
    homepage: Optional[str] = None
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    is_template: Optional[bool] = None
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Optional[str] = None
    languages_url: AnyUrl
    license: Optional[License3] = Field(..., title="License")
    master_branch: Optional[str] = None
    merges_url: AnyUrl
    milestones_url: str
    mirror_url: Optional[AnyUrl] = None
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: Optional[str] = None
    owner: Optional[Owner105] = Field(..., title="User")
    permissions: Optional[Permissions104] = None
    private: bool = Field(..., description="Whether the repository is private or public.")
    public: Optional[bool] = None
    pulls_url: str
    pushed_at: Union[int, AwareDatetime]
    releases_url: str
    role_name: Optional[str] = None
    size: int
    ssh_url: str
    stargazers: Optional[int] = None
    stargazers_count: int
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    svn_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    topics: List[str]
    trees_url: str
    updated_at: AwareDatetime
    url: AnyUrl
    visibility: Visibility6
    watchers: int
    watchers_count: int


class Parent65(Optional[Parent5]):
    pass


class Team9(BaseModel):
    deleted: Optional[bool] = None
    description: Optional[str] = Field(None, description="Description of the team")
    html_url: Optional[AnyUrl] = None
    id: int = Field(..., description="Unique identifier of the team")
    members_url: Optional[str] = None
    name: str = Field(..., description="Name of the team")
    node_id: Optional[str] = None
    parent: Optional[Parent65] = None
    permission: Optional[str] = Field(
        None, description="Permission that the team will have for its repositories"
    )
    privacy: Optional[Privacy1] = None
    notification_setting: Optional[NotificationSetting] = Field(
        None,
        description="Whether team members will receive notifications when their team is @mentioned",
    )
    repositories_url: Optional[AnyUrl] = None
    slug: Optional[str] = None
    url: Optional[AnyUrl] = Field(None, description="URL for the team")


class WebhookTeamRemovedFromRepository(BaseModel):
    action: Action225
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: OrganizationSimpleWebhooks
    repository: Optional[Repository19] = Field(
        None, description="A git repository", title="Repository"
    )
    sender: SimpleUserWebhooks
    team: Team9 = Field(
        ...,
        description="Groups of organization members that gives permissions on specified repositories.",
        title="Team",
    )


class Action226(Enum):
    started = "started"


class WebhookWatchStarted(BaseModel):
    action: Action226
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks


class WebhookWorkflowDispatch(BaseModel):
    enterprise: Optional[EnterpriseWebhooks] = None
    inputs: Optional[Dict[str, Any]] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    ref: str
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks
    workflow: str


class Conclusion14(Enum):
    success = "success"
    failure = "failure"
    skipped = "skipped"
    cancelled = "cancelled"
    action_required = "action_required"
    neutral = "neutral"
    timed_out = "timed_out"


class Conclusion15(Enum):
    failure = "failure"
    skipped = "skipped"
    success = "success"
    cancelled = "cancelled"
    NoneType_None = None


class Status27(Enum):
    in_progress = "in_progress"
    completed = "completed"
    queued = "queued"


class Step1(BaseModel):
    completed_at: Optional[str] = None
    conclusion: Conclusion15
    name: str
    number: int
    started_at: Optional[str] = None
    status: Status27


class WorkflowJob(BaseModel):
    check_run_url: AnyUrl
    completed_at: Optional[str] = None
    conclusion: Conclusion14
    created_at: str = Field(..., description="The time that the job created.")
    head_sha: str
    html_url: AnyUrl
    id: int
    labels: List[str] = Field(
        ...,
        description='Custom labels for the job. Specified by the [`"runs-on"` attribute](https://docs.github.com/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on) in the workflow YAML.',
    )
    name: str
    node_id: str
    run_attempt: int
    run_id: float
    run_url: AnyUrl
    runner_group_id: Optional[int] = Field(
        ...,
        description="The ID of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.",
    )
    runner_group_name: Optional[str] = Field(
        ...,
        description="The name of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.",
    )
    runner_id: Optional[int] = Field(
        ...,
        description="The ID of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.",
    )
    runner_name: Optional[str] = Field(
        ...,
        description="The name of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.",
    )
    started_at: str
    status: Status4 = Field(
        ...,
        description="The current status of the job. Can be `queued`, `in_progress`, `waiting`, or `completed`.",
    )
    head_branch: Optional[str] = Field(..., description="The name of the current branch.")
    workflow_name: Optional[str] = Field(..., description="The name of the workflow.")
    steps: List[Step1]
    url: AnyUrl


class WebhookWorkflowJobCompleted(BaseModel):
    action: Action5
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks
    workflow_job: WorkflowJob
    deployment: Optional[Deployment] = None


class Action228(Enum):
    in_progress = "in_progress"


class Conclusion16(Enum):
    success = "success"
    failure = "failure"
    NoneType_None = None
    cancelled = "cancelled"
    neutral = "neutral"


class Conclusion17(Enum):
    failure = "failure"
    skipped = "skipped"
    success = "success"
    NoneType_None = None
    cancelled = "cancelled"


class Status29(Enum):
    in_progress = "in_progress"
    completed = "completed"
    pending = "pending"
    queued = "queued"


class Step2(BaseModel):
    completed_at: Optional[str] = None
    conclusion: Optional[str] = None
    name: str
    number: int
    started_at: Optional[str] = None
    status: Status29


class WorkflowJob1(BaseModel):
    check_run_url: AnyUrl
    completed_at: Optional[str] = None
    conclusion: Conclusion16
    created_at: str = Field(..., description="The time that the job created.")
    head_sha: str
    html_url: AnyUrl
    id: int
    labels: List[str] = Field(
        ...,
        description='Custom labels for the job. Specified by the [`"runs-on"` attribute](https://docs.github.com/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on) in the workflow YAML.',
    )
    name: str
    node_id: str
    run_attempt: int
    run_id: float
    run_url: AnyUrl
    runner_group_id: Optional[int] = Field(
        ...,
        description="The ID of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.",
    )
    runner_group_name: Optional[str] = Field(
        ...,
        description="The name of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.",
    )
    runner_id: Optional[int] = Field(
        ...,
        description="The ID of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.",
    )
    runner_name: Optional[str] = Field(
        ...,
        description="The name of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.",
    )
    started_at: str
    status: Status27 = Field(
        ...,
        description="The current status of the job. Can be `queued`, `in_progress`, or `completed`.",
    )
    head_branch: Optional[str] = Field(..., description="The name of the current branch.")
    workflow_name: Optional[str] = Field(..., description="The name of the workflow.")
    steps: List[Step2]
    url: AnyUrl


class WebhookWorkflowJobInProgress(BaseModel):
    action: Action228
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks
    workflow_job: WorkflowJob1
    deployment: Optional[Deployment] = None


class Action229(Enum):
    queued = "queued"


class Status31(Enum):
    completed = "completed"
    in_progress = "in_progress"
    queued = "queued"
    pending = "pending"


class Step3(BaseModel):
    completed_at: Optional[str] = None
    conclusion: Conclusion15
    name: str
    number: int
    started_at: Optional[str] = None
    status: Status31


class WorkflowJob2(BaseModel):
    check_run_url: AnyUrl
    completed_at: Optional[str] = None
    conclusion: Optional[str] = None
    created_at: str = Field(..., description="The time that the job created.")
    head_sha: str
    html_url: AnyUrl
    id: int
    labels: List[str]
    name: str
    node_id: str
    run_attempt: int
    run_id: float
    run_url: AnyUrl
    runner_group_id: Optional[int] = None
    runner_group_name: Optional[str] = None
    runner_id: Optional[int] = None
    runner_name: Optional[str] = None
    started_at: AwareDatetime
    status: Status4
    head_branch: Optional[str] = Field(..., description="The name of the current branch.")
    workflow_name: Optional[str] = Field(..., description="The name of the workflow.")
    steps: List[Step3]
    url: AnyUrl


class WebhookWorkflowJobQueued(BaseModel):
    action: Action229
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks
    workflow_job: WorkflowJob2
    deployment: Optional[Deployment] = None


class Action230(Enum):
    waiting = "waiting"


class Status33(Enum):
    completed = "completed"
    in_progress = "in_progress"
    queued = "queued"
    pending = "pending"
    waiting = "waiting"


class Step4(BaseModel):
    completed_at: Optional[str] = None
    conclusion: Conclusion15
    name: str
    number: int
    started_at: Optional[str] = None
    status: Status33


class WorkflowJob3(BaseModel):
    check_run_url: AnyUrl
    completed_at: Optional[str] = None
    conclusion: Optional[str] = None
    created_at: str = Field(..., description="The time that the job created.")
    head_sha: str
    html_url: AnyUrl
    id: int
    labels: List[str]
    name: str
    node_id: str
    run_attempt: int
    run_id: float
    run_url: AnyUrl
    runner_group_id: Optional[int] = None
    runner_group_name: Optional[str] = None
    runner_id: Optional[int] = None
    runner_name: Optional[str] = None
    started_at: AwareDatetime
    head_branch: Optional[str] = Field(..., description="The name of the current branch.")
    workflow_name: Optional[str] = Field(..., description="The name of the workflow.")
    status: Status4
    steps: List[Step4]
    url: AnyUrl


class WebhookWorkflowJobWaiting(BaseModel):
    action: Action230
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks
    workflow_job: WorkflowJob3
    deployment: Optional[Deployment] = None


class Actor6(Owner9):
    pass


class Conclusion20(Enum):
    success = "success"
    failure = "failure"
    neutral = "neutral"
    cancelled = "cancelled"
    timed_out = "timed_out"
    action_required = "action_required"
    stale = "stale"
    skipped = "skipped"


class Author27(BaseModel):
    email: Optional[str] = None
    name: Optional[str] = None


class Committer11(Author27):
    pass


class HeadCommit4(BaseModel):
    author: Optional[Author27] = None
    committer: Optional[Committer11] = None
    id: Optional[str] = None
    message: Optional[str] = None
    timestamp: Optional[str] = None
    tree_id: Optional[str] = None


class Owner106(Owner9):
    pass


class HeadRepository5(BaseModel):
    archive_url: Optional[str] = None
    assignees_url: Optional[str] = None
    blobs_url: Optional[str] = None
    branches_url: Optional[str] = None
    collaborators_url: Optional[str] = None
    comments_url: Optional[str] = None
    commits_url: Optional[str] = None
    compare_url: Optional[str] = None
    contents_url: Optional[str] = None
    contributors_url: Optional[str] = None
    deployments_url: Optional[str] = None
    description: Optional[str] = None
    downloads_url: Optional[str] = None
    events_url: Optional[str] = None
    fork: Optional[bool] = None
    forks_url: Optional[str] = None
    full_name: Optional[str] = None
    git_commits_url: Optional[str] = None
    git_refs_url: Optional[str] = None
    git_tags_url: Optional[str] = None
    hooks_url: Optional[str] = None
    html_url: Optional[str] = None
    id: Optional[int] = None
    issue_comment_url: Optional[str] = None
    issue_events_url: Optional[str] = None
    issues_url: Optional[str] = None
    keys_url: Optional[str] = None
    labels_url: Optional[str] = None
    languages_url: Optional[str] = None
    merges_url: Optional[str] = None
    milestones_url: Optional[str] = None
    name: Optional[str] = None
    node_id: Optional[str] = None
    notifications_url: Optional[str] = None
    owner: Optional[Owner106] = None
    private: Optional[bool] = None
    pulls_url: Optional[str] = None
    releases_url: Optional[str] = None
    stargazers_url: Optional[str] = None
    statuses_url: Optional[str] = None
    subscribers_url: Optional[str] = None
    subscription_url: Optional[str] = None
    tags_url: Optional[str] = None
    teams_url: Optional[str] = None
    trees_url: Optional[str] = None
    url: Optional[str] = None


class Repo71(Repo):
    pass


class Base37(BaseModel):
    ref: str
    repo: Repo71 = Field(..., title="Repo Ref")
    sha: str


class Head36(Base37):
    pass


class PullRequest74(BaseModel):
    base: Base37
    head: Head36
    id: float
    number: float
    url: AnyUrl


class Repository20(HeadRepository5):
    pass


class Status34(Enum):
    requested = "requested"
    in_progress = "in_progress"
    completed = "completed"
    queued = "queued"
    pending = "pending"
    waiting = "waiting"


class TriggeringActor5(Owner9):
    pass


class WorkflowRun7(BaseModel):
    actor: Actor6 = Field(..., title="User")
    artifacts_url: AnyUrl
    cancel_url: AnyUrl
    check_suite_id: int
    check_suite_node_id: str
    check_suite_url: AnyUrl
    conclusion: Conclusion20
    created_at: AwareDatetime
    event: str
    head_branch: Optional[str] = None
    head_commit: HeadCommit4 = Field(..., title="SimpleCommit")
    head_repository: HeadRepository5 = Field(..., title="Repository Lite")
    head_sha: str
    html_url: AnyUrl
    id: int
    jobs_url: AnyUrl
    logs_url: AnyUrl
    name: Optional[str] = None
    node_id: str
    path: str
    previous_attempt_url: Optional[AnyUrl] = None
    pull_requests: List[PullRequest74]
    referenced_workflows: Optional[List[ReferencedWorkflow1]] = None
    repository: Repository20 = Field(..., title="Repository Lite")
    rerun_url: AnyUrl
    run_attempt: int
    run_number: int
    run_started_at: AwareDatetime
    status: Status34
    triggering_actor: Optional[TriggeringActor5] = Field(..., title="User")
    updated_at: AwareDatetime
    url: AnyUrl
    workflow_id: int
    workflow_url: AnyUrl


class WebhookWorkflowRunCompleted(BaseModel):
    action: Action5
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks
    workflow: Optional[Workflow1] = Field(..., title="Workflow")
    workflow_run: WorkflowRun7


class Conclusion21(Enum):
    success = "success"
    failure = "failure"
    neutral = "neutral"
    cancelled = "cancelled"
    timed_out = "timed_out"
    action_required = "action_required"
    skipped = "skipped"
    stale = "stale"
    NoneType_None = None


class HeadCommit5(HeadCommit4):
    pass


class HeadRepository6(BaseModel):
    archive_url: Optional[str] = None
    assignees_url: Optional[str] = None
    blobs_url: Optional[str] = None
    branches_url: Optional[str] = None
    collaborators_url: Optional[str] = None
    comments_url: Optional[str] = None
    commits_url: Optional[str] = None
    compare_url: Optional[str] = None
    contents_url: Optional[str] = None
    contributors_url: Optional[str] = None
    deployments_url: Optional[str] = None
    description: Optional[str] = None
    downloads_url: Optional[str] = None
    events_url: Optional[str] = None
    fork: Optional[bool] = None
    forks_url: Optional[str] = None
    full_name: Optional[str] = None
    git_commits_url: Optional[str] = None
    git_refs_url: Optional[str] = None
    git_tags_url: Optional[str] = None
    hooks_url: Optional[str] = None
    html_url: Optional[str] = None
    id: Optional[int] = None
    issue_comment_url: Optional[str] = None
    issue_events_url: Optional[str] = None
    issues_url: Optional[str] = None
    keys_url: Optional[str] = None
    labels_url: Optional[str] = None
    languages_url: Optional[str] = None
    merges_url: Optional[str] = None
    milestones_url: Optional[str] = None
    name: Optional[str] = None
    node_id: Optional[str] = None
    notifications_url: Optional[str] = None
    owner: Optional[Owner106] = None
    private: Optional[bool] = None
    pulls_url: Optional[str] = None
    releases_url: Optional[str] = None
    stargazers_url: Optional[str] = None
    statuses_url: Optional[str] = None
    subscribers_url: Optional[str] = None
    subscription_url: Optional[str] = None
    tags_url: Optional[str] = None
    teams_url: Optional[str] = None
    trees_url: Optional[str] = None
    url: Optional[str] = None


class Base38(Base37):
    pass


class Head37(Base37):
    pass


class PullRequest75(BaseModel):
    base: Base38
    head: Head37
    id: float
    number: float
    url: AnyUrl


class Repository21(HeadRepository5):
    pass


class Status35(Enum):
    requested = "requested"
    in_progress = "in_progress"
    completed = "completed"
    queued = "queued"
    pending = "pending"


class WorkflowRun8(BaseModel):
    actor: Actor6 = Field(..., title="User")
    artifacts_url: AnyUrl
    cancel_url: AnyUrl
    check_suite_id: int
    check_suite_node_id: str
    check_suite_url: AnyUrl
    conclusion: Conclusion21
    created_at: AwareDatetime
    event: str
    head_branch: Optional[str] = None
    head_commit: HeadCommit5 = Field(..., title="SimpleCommit")
    head_repository: HeadRepository6 = Field(..., title="Repository Lite")
    head_sha: str
    html_url: AnyUrl
    id: int
    jobs_url: AnyUrl
    logs_url: AnyUrl
    name: Optional[str] = None
    node_id: str
    path: str
    previous_attempt_url: Optional[AnyUrl] = None
    pull_requests: List[PullRequest75]
    referenced_workflows: Optional[List[ReferencedWorkflow1]] = None
    repository: Repository21 = Field(..., title="Repository Lite")
    rerun_url: AnyUrl
    run_attempt: int
    run_number: int
    run_started_at: AwareDatetime
    status: Status35
    triggering_actor: Optional[TriggeringActor5] = Field(..., title="User")
    updated_at: AwareDatetime
    url: AnyUrl
    workflow_id: int
    workflow_url: AnyUrl


class WebhookWorkflowRunInProgress(BaseModel):
    action: Action228
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks
    workflow: Optional[Workflow1] = Field(..., title="Workflow")
    workflow_run: WorkflowRun8


class Actor8(Optional[AnswerChosenBy]):
    pass


class Author29(Author5):
    pass


class Committer13(Author5):
    pass


class HeadCommit6(BaseModel):
    author: Author29 = Field(
        ..., description="Metaproperties for Git author/committer information.", title="Committer"
    )
    committer: Committer13 = Field(
        ..., description="Metaproperties for Git author/committer information.", title="Committer"
    )
    id: str
    message: str
    timestamp: str
    tree_id: str


class Owner110(Optional[AnswerChosenBy]):
    pass


class HeadRepository7(BaseModel):
    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    deployments_url: AnyUrl
    description: Optional[str] = None
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: AnyUrl
    merges_url: AnyUrl
    milestones_url: str
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    owner: Optional[Owner110] = Field(..., title="User")
    private: bool = Field(..., description="Whether the repository is private or public.")
    pulls_url: str
    releases_url: str
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    trees_url: str
    url: AnyUrl


class Base39(Base37):
    pass


class Head38(Base37):
    pass


class PullRequest76(BaseModel):
    base: Base39
    head: Head38
    id: float
    number: float
    url: AnyUrl


class Owner111(Optional[AnswerChosenBy]):
    pass


class Repository22(BaseModel):
    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    deployments_url: AnyUrl
    description: Optional[str] = None
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int = Field(..., description="Unique identifier of the repository")
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: AnyUrl
    merges_url: AnyUrl
    milestones_url: str
    name: str = Field(..., description="The name of the repository.")
    node_id: str
    notifications_url: str
    owner: Optional[Owner111] = Field(..., title="User")
    private: bool = Field(..., description="Whether the repository is private or public.")
    pulls_url: str
    releases_url: str
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    trees_url: str
    url: AnyUrl


class TriggeringActor7(Optional[AnswerChosenBy]):
    pass


class WorkflowRun9(BaseModel):
    actor: Optional[Actor8] = Field(..., title="User")
    artifacts_url: AnyUrl
    cancel_url: AnyUrl
    check_suite_id: int
    check_suite_node_id: str
    check_suite_url: AnyUrl
    conclusion: Conclusion5
    created_at: AwareDatetime
    event: str
    head_branch: Optional[str] = None
    head_commit: HeadCommit6 = Field(..., title="SimpleCommit")
    head_repository: HeadRepository7 = Field(..., title="Repository Lite")
    head_sha: str
    html_url: AnyUrl
    id: int
    jobs_url: AnyUrl
    logs_url: AnyUrl
    name: Optional[str] = None
    node_id: str
    path: str
    previous_attempt_url: Optional[AnyUrl] = None
    pull_requests: List[PullRequest76]
    referenced_workflows: Optional[List[ReferencedWorkflow1]] = None
    repository: Repository22 = Field(..., title="Repository Lite")
    rerun_url: AnyUrl
    run_attempt: int
    run_number: int
    run_started_at: AwareDatetime
    status: Status34
    triggering_actor: Optional[TriggeringActor7] = Field(..., title="User")
    updated_at: AwareDatetime
    url: AnyUrl
    workflow_id: int
    workflow_url: AnyUrl
    display_title: str


class WebhookWorkflowRunRequested(BaseModel):
    action: Action10
    enterprise: Optional[EnterpriseWebhooks] = None
    installation: Optional[SimpleInstallation] = None
    organization: Optional[OrganizationSimpleWebhooks] = None
    repository: RepositoryWebhooks
    sender: SimpleUserWebhooks
    workflow: Optional[Workflow1] = Field(..., title="Workflow")
    workflow_run: WorkflowRun9 = Field(..., title="Workflow Run")
